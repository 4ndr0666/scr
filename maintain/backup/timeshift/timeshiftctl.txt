#!/bin/sh -e

# shellcheck disable=SC2034

RC='\033[0m'
RED='\033[31m'
YELLOW='\033[33m'
CYAN='\033[36m'
GREEN='\033[32m'

command_exists() {
for cmd in "$@"; do
    export PATH="$HOME/.local/share/flatpak/exports/bin:/var/lib/flatpak/exports/bin:$PATH"
    command -v "$cmd" >/dev/null 2>&1 || return 1
done
return 0
}

checkFlatpak() {
    if ! command_exists flatpak; then
        printf "%b\n" "${YELLOW}Installing Flatpak...${RC}"
        case "$PACKAGER" in
            pacman)
                "$ESCALATION_TOOL" "$PACKAGER" -S --needed --noconfirm flatpak
                ;;
            apk)
                "$ESCALATION_TOOL" "$PACKAGER" add flatpak
                ;;
            xbps-install)
                "$ESCALATION_TOOL" "$PACKAGER" -Sy flatpak
                ;;
            *)
                "$ESCALATION_TOOL" "$PACKAGER" install -y flatpak
                ;;
        esac
        printf "%b\n" "${YELLOW}Adding Flathub remote...${RC}"
        "$ESCALATION_TOOL" flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        printf "%b\n" "${YELLOW}Applications installed by Flatpak may not appear on your desktop until the user session is restarted...${RC}"
    else
        if ! flatpak remotes | grep -q "flathub"; then
            printf "%b\n" "${YELLOW}Adding Flathub remote...${RC}"
            "$ESCALATION_TOOL" flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        else
            printf "%b\n" "${CYAN}Flatpak is installed${RC}"
        fi
    fi
}

checkArch() {
    case "$(uname -m)" in
        x86_64 | amd64) ARCH="x86_64" ;;
        aarch64 | arm64) ARCH="aarch64" ;;
        *) printf "%b\n" "${RED}Unsupported architecture: $(uname -m)${RC}" && exit 1 ;;
    esac

    printf "%b\n" "${CYAN}System architecture: ${ARCH}${RC}"
}

checkAURHelper() {
    ## Check & Install AUR helper
    if [ "$PACKAGER" = "pacman" ]; then
        if [ -z "$AUR_HELPER_CHECKED" ]; then
            AUR_HELPERS="yay paru"
            for helper in ${AUR_HELPERS}; do
                if command_exists "${helper}"; then
                    AUR_HELPER=${helper}
                    printf "%b\n" "${CYAN}Using ${helper} as AUR helper${RC}"
                    AUR_HELPER_CHECKED=true
                    return 0
                fi
            done

            printf "%b\n" "${YELLOW}Installing yay as AUR helper...${RC}"
            "$ESCALATION_TOOL" "$PACKAGER" -S --needed --noconfirm base-devel git
            cd /opt && "$ESCALATION_TOOL" git clone https://aur.archlinux.org/yay-bin.git && "$ESCALATION_TOOL" chown -R "$USER":"$USER" ./yay-bin
            cd yay-bin && makepkg --noconfirm -si

            if command_exists yay; then
                AUR_HELPER="yay"
                AUR_HELPER_CHECKED=true
            else
                printf "%b\n" "${RED}Failed to install AUR helper.${RC}"
                exit 1
            fi
        fi
    fi
}

checkEscalationTool() {
    ## Check for escalation tools.
    if [ -z "$ESCALATION_TOOL_CHECKED" ]; then
        if [ "$(id -u)" = "0" ]; then
            ESCALATION_TOOL="eval"
            ESCALATION_TOOL_CHECKED=true
            printf "%b\n" "${CYAN}Running as root, no escalation needed${RC}"
            return 0
        fi

        ESCALATION_TOOLS='sudo doas'
        for tool in ${ESCALATION_TOOLS}; do
            if command_exists "${tool}"; then
                ESCALATION_TOOL=${tool}
                printf "%b\n" "${CYAN}Using ${tool} for privilege escalation${RC}"
                ESCALATION_TOOL_CHECKED=true
                return 0
            fi
        done

        printf "%b\n" "${RED}Can't find a supported escalation tool${RC}"
        exit 1
    fi
}

checkCommandRequirements() {
    ## Check for requirements.
    REQUIREMENTS=$1
    for req in ${REQUIREMENTS}; do
        if ! command_exists "${req}"; then
            printf "%b\n" "${RED}To run me, you need: ${REQUIREMENTS}${RC}"
            exit 1
        fi
    done
}

checkPackageManager() {
    ## Check Package Manager
    PACKAGEMANAGER=$1
    for pgm in ${PACKAGEMANAGER}; do
        if command_exists "${pgm}"; then
            PACKAGER=${pgm}
            printf "%b\n" "${CYAN}Using ${pgm} as package manager${RC}"
            break
        fi
    done

    ## Enable apk community packages
    if [ "$PACKAGER" = "apk" ] && grep -qE '^#.*community' /etc/apk/repositories; then
        "$ESCALATION_TOOL" sed -i '/community/s/^#//' /etc/apk/repositories
        "$ESCALATION_TOOL" "$PACKAGER" update
    fi

    if [ -z "$PACKAGER" ]; then
        printf "%b\n" "${RED}Can't find a supported package manager${RC}"
        exit 1
    fi
}

checkSuperUser() {
    ## Check SuperUser Group
    SUPERUSERGROUP='wheel sudo root'
    for sug in ${SUPERUSERGROUP}; do
        if groups | grep -q "${sug}"; then
            SUGROUP=${sug}
            printf "%b\n" "${CYAN}Super user group ${SUGROUP}${RC}"
            break
        fi
    done

    ## Check if member of the sudo group.
    if ! groups | grep -q "${SUGROUP}"; then
        printf "%b\n" "${RED}You need to be a member of the sudo group to run me!${RC}"
        exit 1
    fi
}

checkCurrentDirectoryWritable() {
    ## Check if the current directory is writable.
    GITPATH="$(dirname "$(realpath "$0")")"
    if [ ! -w "$GITPATH" ]; then
        printf "%b\n" "${RED}Can't write to $GITPATH${RC}"
        exit 1
    fi
}

checkDistro() {
    DTYPE="unknown"  # Default to unknown
    # Use /etc/os-release for modern distro identification
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        DTYPE=$ID
    fi
}

checkEnv() {
    checkArch
    checkEscalationTool
    checkCommandRequirements "curl groups $ESCALATION_TOOL"
    checkPackageManager 'nala apt-get dnf pacman zypper apk xbps-install eopkg'
    checkCurrentDirectoryWritable
    checkSuperUser
    checkDistro
    checkAURHelper
}
#!/bin/sh -e

. ../common-script.sh

# Function to install Timeshift
install_timeshift() {
    clear
    printf "%b\n" "${YELLOW}Checking if Timeshift is installed...${RC}"

    if ! command_exists timeshift; then
        case "$PACKAGER" in
            pacman)
                "$ESCALATION_TOOL" "${PACKAGER}" -S --noconfirm timeshift
                ;;
            dnf|zypper|apt-get|nala)
                "$ESCALATION_TOOL" "${PACKAGER}" install -y timeshift
                ;;
            *)
                printf "%b\n" "${RED}Unsupported package manager.${RC}"
                ;;
        esac
    else
        printf "%b\n" "${GREEN}Timeshift is already installed.${RC}"
    fi
}

# Function to display the menu
display_menu() {
    clear
    printf "%b\n" "${CYAN}Timeshift CLI Automation${RC}"
    printf "%b\n" "${CYAN}1) List Snapshots${RC}"
    printf "%b\n" "${CYAN}2) List Devices${RC}"
    printf "%b\n" "${CYAN}3) Create Snapshot${RC}"
    printf "%b\n" "${CYAN}4) Restore Snapshot${RC}"
    printf "%b\n" "${CYAN}5) Delete Snapshot${RC}"
    printf "%b\n" "${CYAN}6) Delete All Snapshots${RC}"
    printf "%b\n" "${CYAN}7) Exit${RC}"
}

# Function to list snapshots
list_snapshots() {
    printf "%b\n" "${CYAN}Listing snapshots...${RC}"
    "$ESCALATION_TOOL" timeshift --list-snapshots
}

# Function to list devices
list_devices() {
    printf "%b\n" "${CYAN}Listing available devices...${RC}"
    "$ESCALATION_TOOL" timeshift --list-devices
}

# Function to create a new snapshot
create_snapshot() {
    printf "%b" "${CYAN}Enter a comment for the snapshot (optional): ${RC}"
    read -r COMMENT
    printf "%b" "${CYAN}Enter snapshot tag (O,B,H,D,W,M) (leave empty for no tag): ${RC}"
    read -r TAG

    if [ -z "$COMMENT" ] && [ -z "$TAG" ]; then
        printf "%b\n" "${CYAN}Creating snapshot with no comment or tag...${RC}"
        "$ESCALATION_TOOL" timeshift --create
    elif [ -z "$TAG" ]; then
        printf "%b\n" "${CYAN}Creating snapshot with no tag...${RC}"
        "$ESCALATION_TOOL" timeshift --create --comments "$COMMENT"
    else
        printf "%b\n" "${CYAN}Creating snapshot with tag: $TAG...${RC}"
        "$ESCALATION_TOOL" timeshift --create --comments "$COMMENT" --tags "$TAG"
    fi

    # shellcheck disable=SC2181
    if [ $? -eq 0 ]; then
        printf "%b\n" "${GREEN}Snapshot created successfully.${RC}"
    else
        printf "%b\n" "${RED}Snapshot creation failed.${RC}"
    fi
}

# Function to restore a snapshot
restore_snapshot() {
    list_snapshots

    printf "%b" "${CYAN}Enter the snapshot name you want to restore: ${RC}"
    read -r SNAPSHOT
    printf "%b" "${CYAN}Enter the target device (e.g., /dev/sda1): ${RC}"
    read -r TARGET_DEVICE
    printf "%b" "${CYAN}Do you want to skip GRUB reinstall? (y/N): ${RC}"
    read -r SKIP_GRUB

    if [ "$SKIP_GRUB" = "y" ] || [ "$SKIP_GRUB" = "Y" ]; then
        "$ESCALATION_TOOL" timeshift --restore --snapshot "$SNAPSHOT" --target-device "$TARGET_DEVICE" --skip-grub --yes
    else
        printf "%b\n" "${CYAN}Enter GRUB device (e.g., /dev/sda): ${RC}"
        read -r GRUB_DEVICE
        "$ESCALATION_TOOL" timeshift --restore --snapshot "$SNAPSHOT" --target-device "$TARGET_DEVICE" --grub-device "$GRUB_DEVICE" --yes
    fi

    # shellcheck disable=SC2181
    if [ $? -eq 0 ]; then
        printf "%b\n" "${GREEN}Snapshot restored successfully.${RC}"
    else
        printf "%b\n" "${RED}Snapshot restore failed.${RC}"
    fi
}

# Function to delete a snapshot
delete_snapshot() {
    list_snapshots

    printf "%b" "${CYAN}Enter the snapshot name you want to delete: ${RC}"
    read -r SNAPSHOT

    printf "%b\n" "${YELLOW}Deleting snapshot $SNAPSHOT...${RC}"
    "$ESCALATION_TOOL" timeshift --delete --snapshot "$SNAPSHOT" --yes

    # shellcheck disable=SC2181
    if [ $? -eq 0 ]; then
        printf "%b\n" "${GREEN}Snapshot deleted successfully.${RC}"
    else
        printf "%b\n" "${RED}Snapshot deletion failed.${RC}"
    fi
}

# Function to delete all snapshots
delete_all_snapshots() {
    printf "%b\n" "${RED}WARNING: This will delete all snapshots!${RC}"
    printf "%b" "${CYAN}Are you sure? (y/N): ${RC}"
    read -r CONFIRMATION

    if [ "$CONFIRMATION" = "y" ] || [ "$CONFIRMATION" = "Y" ]; then
        printf "%b\n" "${CYAN}Deleting all snapshots...${RC}"
        "$ESCALATION_TOOL" timeshift --delete-all --yes
        # shellcheck disable=SC2181
        if [ $? -eq 0 ]; then
            printf "%b\n" "${GREEN}All snapshots deleted successfully.${RC}"
        else
            printf "%b\n" "${RED}Failed to delete snapshots.${RC}"
        fi
    else
        printf "%b\n" "${RED}Operation cancelled.${RC}"
    fi
}

main_menu() {
    while true; do
        display_menu
        printf "%b\n" "${CYAN}Select an option (1-7): ${RC}"
        read -r OPTION

        case $OPTION in
            1) list_snapshots ;;
            2) list_devices ;;
            3) create_snapshot ;;
            4) restore_snapshot ;;
            5) delete_snapshot ;;
            6) delete_all_snapshots ;;
            7) printf "%b\n" "${GREEN}Exiting...${RC}"; exit 0 ;;
            *) printf "%b\n" "${RED}Invalid option. Please try again.${RC}" ;;
        esac
        printf "%b\n" "${CYAN}Press Enter to continue...${RC}"
        read -r _
    done
}

checkEnv
checkEscalationTool
install_timeshift  
main_menu
