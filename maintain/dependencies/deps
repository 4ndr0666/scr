#!/usr/bin/env bash
set -euo pipefail
# =============================================================================
# File: deps
# Author: 4ndr0666 (Revised by Assistant)
# Purpose: Systematically verify and install all dependencies for every 
#          installed package (or a user‐specified list) on an Arch system.
#
#          This script performs a fixed-point dependency closure:
#            1. Retrieves the installed package list via "pacman -Qqe" (or uses 
#               a user-provided list).
#            2. For each package, it extracts the "Depends On" field using 
#               "pacman -Qi" and cleans dependency names robustly.
#            3. Computes the union of all direct dependencies not yet installed.
#            4. For each missing dependency, it checks if it exists in the 
#               official repos and installs via pacman; otherwise, uses yay.
#            5. Repeats the process until no new missing dependency is found.
#
#          If pacman database refresh fails due to GPGME errors, a fallback
#          function repairs the keyring and databases.
#
# Dependencies: pacman, pactree, expac, git, reflector, setfacl,
#               loginctl, lostfiles, yay.
# Required permissions: must run as root due to package installation.
# Recommended: run during off-peak hours to reduce system impact.
#
#          Temporary files are stored in a dedicated directory and cleaned up 
#          via TRAP.
#
#          Interactive mode (-i) prompts the user (defaulting to "y") before 
#          installations.
#
# Total Functions: 19
# Total Lines of Code: ~260
# =============================================================================

###############################################################################
# Auto-escalation: Re-run with sudo if not root.
###############################################################################
if [ "$EUID" -ne 0 ]; then
    echo "Re-running the script with sudo privileges..."
    exec sudo "$0" "$@"
fi

###############################################################################
# Set Internal Field Separator.
###############################################################################
IFS=$'\n\t'

###############################################################################
# Global Variables & Constants.
###############################################################################
DEFAULT_LOGFILE="${HOME}/.local/share/logs/dependency-checker.log"
LOGFILE="${DEFAULT_LOGFILE}"
PACMAN_LOCK="/var/lib/pacman/db.lck"
# Create temp directory under XDG_RUNTIME_DIR when available
TMP_DIR="$(mktemp -d "${XDG_RUNTIME_DIR:-/tmp}"/deps.XXXXXX)"

ALL_SYSTEM=false
INTERACTIVE_MODE=false
DRY_RUN=false
SHOW_MATRIX=false

# Arrays for ignore lists
declare -a DEFAULT_IGNORE_PKGS=("wayland")
declare -a CUSTOM_IGNORE_PKGS=()
declare -a CUSTOM_IGNORE_GROUPS=()

# Features list from both scripts for matrix output
# shellcheck disable=SC2034
declare -a FEATURES_DEPS=(
    "dry-run support" "interactive mode" "pacman lock handling" \
    "keyring fix" "dependency closure" "logging"
)
# shellcheck disable=SC2034
declare -a FEATURES_BETA=(
    "ignore packages" "ignore groups" "pactree resolution" \
    "AUR support" "caching" "interactive prompts"
)

# Array to store target package list.
declare -a PKGLIST
PKGLIST=()

###############################################################################
# Function: cleanup
# Description: Remove the temporary directory on exit.
###############################################################################
cleanup() {
    if [ -d "${TMP_DIR}" ]; then
        rm -rf "${TMP_DIR}"
    fi
}
trap cleanup EXIT

###############################################################################
# Function: log_message
# Description: Log messages to stdout and append them to the logfile.
###############################################################################
log_message() {
    local msg="$1"
    echo -e "$msg" | tee -a "$LOGFILE" 2>&1
}

###############################################################################
# Function: feature_matrix
# Description: Display a simple feature matrix comparing this script with
#              deps-beta. This aids future refactoring efforts.
###############################################################################
feature_matrix() {
    local -n list_a=$1
    local -n list_b=$2
    declare -A seen=()
    local item
    for item in "${list_a[@]}"; do
        seen["$item"]="deps"
    done
    for item in "${list_b[@]}"; do
        if [[ -n ${seen[$item]:-} ]]; then
            seen["$item"]="both"
        else
            seen["$item"]="deps-beta"
        fi
    done
    printf "%-25s | %s\n" "Feature" "Source"
    printf -- '-------------------------+-----------\n'
    for item in "${!seen[@]}"; do
        printf "%-25s | %s\n" "$item" "${seen[$item]}"
    done
}

###############################################################################
# Function: check_requirements
# Description: Verify required tools; auto-install any that are missing.
###############################################################################
check_requirements() {
    local tool
    local required_tools=( "pacman" "pactree" "expac" "git" "reflector" "setfacl" "loginctl" "lostfiles" )
    local missing_tools=()
    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            missing_tools+=("$tool")
        fi
    done
    if [ ${#missing_tools[@]} -gt 0 ]; then
        log_message "INFO: Auto-installing missing tools: ${missing_tools[*]}"
        if [[ " ${missing_tools[*]} " == *"pacman"* ]]; then
            log_message "ERROR: 'pacman' is missing. Please fix your system manually."
            exit 1
        fi
        local retries i
        for tool in "${missing_tools[@]}"; do
            if [ "$DRY_RUN" = true ]; then
                log_message "DRY-RUN: pacman -S --needed --noconfirm $tool"
                continue
            fi
            retries=3
            for (( i = 1; i <= retries; i++ )); do
                if pacman -S --needed --noconfirm "$tool" >/dev/null 2>&1; then
                    log_message "INFO: Successfully installed '$tool'."
                    break
                fi
                log_message "WARN: Attempt $i/$retries failed to install '$tool'. Retrying..."
                sleep 3
            done
            if ! command -v "$tool" >/dev/null 2>&1; then
                log_message "ERROR: '$tool' could not be installed after $retries attempts."
            fi
        done
    else
        log_message "INFO: All required tools are present."
    fi
}

###############################################################################
# Function: wait_for_pacman_lock
# Description: Wait until the pacman lock file is released.
###############################################################################
wait_for_pacman_lock() {
    local wait_time=30
    local interval=5
    local elapsed=0
    while [ -e "$PACMAN_LOCK" ]; do
        if [ "$elapsed" -ge "$wait_time" ]; then
            log_message "ERROR: pacman lock ($PACMAN_LOCK) persists after $wait_time seconds. Another process may be running!"
            log_message "INFO: Remove lock with: rm -f $PACMAN_LOCK"
            exit 1
        fi
        log_message "INFO: Waiting for pacman lock to be released... ($elapsed/$wait_time sec elapsed)"
        sleep "$interval"
        elapsed=$((elapsed + interval))
    done
}

###############################################################################
# Function: fix_pacman_keyring
# Description: Fallback routine to fix keyring and database issues.
###############################################################################
fix_pacman_keyring() {
    log_message "INFO: Attempting to fix pacman keyring and database issues..."
    if [ "$DRY_RUN" = true ]; then
        log_message "DRY-RUN: pacman -Sy archlinux-keyring --noconfirm"
        log_message "DRY-RUN: pacman-key --init && pacman-key --populate"
        return
    fi
    if ! pacman -Sy archlinux-keyring --noconfirm >/dev/null 2>&1; then
        log_message "ERROR: Failed to update archlinux-keyring."
        exit 1
    fi
    log_message "INFO: archlinux-keyring updated successfully."
    
    log_message "INFO: Removing pacman sync databases..."
    sudo rm -f /var/lib/pacman/sync/*
    
    log_message "INFO: Removing /etc/pacman.d/gnupg folder contents..."
    sudo rm -rf /etc/pacman.d/gnupg/*
    
    log_message "INFO: Initializing pacman keyring..."
    if ! pacman-key --init >/dev/null 2>&1; then
        log_message "ERROR: pacman-key --init failed."
        exit 1
    fi
    
    log_message "INFO: Populating pacman keyring..."
    if ! pacman-key --populate >/dev/null 2>&1; then
        log_message "ERROR: pacman-key --populate failed."
        exit 1
    fi
    
    log_message "INFO: Adding Ubuntu keyserver to /etc/pacman.d/gnupg/gpg.conf..."
    echo "keyserver hkp://keyserver.ubuntu.com:80" | sudo tee --append /etc/pacman.d/gnupg/gpg.conf >/dev/null 2>&1
    
    log_message "INFO: Retrying pacman database refresh..."
    if ! pacman -Sy --noconfirm >/dev/null 2>&1; then
        log_message "ERROR: pacman database refresh still failing after keyring fix."
        exit 1
    fi
    log_message "INFO: Pacman database refresh successful after keyring fix."
}

###############################################################################
# Function: refresh_pacman_databases
# Description: Refresh the pacman database with fallback on GPGME error.
###############################################################################
refresh_pacman_databases() {
    log_message "INFO: Refreshing pacman database..."
    if [ "$DRY_RUN" = true ]; then
        log_message "DRY-RUN: pacman -Sy"
        return
    fi
    local output
    output=$(pacman -Sy --noconfirm 2>&1)
    local ret_code=$?
    if [ $ret_code -ne 0 ]; then
        if echo "$output" | grep -qi "GPGME error"; then
            log_message "ERROR: Failed to refresh pacman database due to GPGME error. Output:"
            log_message "$output"
            fix_pacman_keyring
        else
            log_message "ERROR: Failed to refresh pacman database. Output:"
            log_message "$output"
            exit 1
        fi
    else
        log_message "INFO: Pacman database refreshed successfully."
    fi
}

###############################################################################
# Function: update_installed_packages
# Description: Retrieve and cache the list of installed packages.
###############################################################################
update_installed_packages() {
    if ! pacman -Qqe > "$TMP_DIR/installed_pkgs.txt" 2>&1; then
        log_message "ERROR: Failed to cache installed packages."
        exit 1
    fi
    log_message "INFO: Cached installed packages."
}

###############################################################################
# Function: get_package_dependencies
# Description: Extract the "Depends On" field from pacman -Qi for a given package.
###############################################################################
get_package_dependencies() {
    local pkg="$1"
    pacman -Qi "$pkg" 2>/dev/null | awk -F':' '/^Depends On/ {
        gsub(/^[[:space:]]+|[[:space:]]+$/, "", $2);
        if ($2 != "None") { print $2 }
    }'
}

###############################################################################
# Function: parse_dependencies
# Description: Clean dependency strings by stripping version constraints.
###############################################################################
parse_dependencies() {
    local deps_line="$1"
    local dep
    # Split on whitespace
    for dep in $deps_line; do
        echo "$dep" | sed -E 's/[<>=].*$//'
    done
}

###############################################################################
# Function: sanitize_and_resolve_dep_name
# Description: Sanitize a dependency name and resolve shared object files.
###############################################################################
sanitize_and_resolve_dep_name() {
    local dep="$1"
    local sanitized
    local owner
    sanitized=$(echo "$dep" | sed -E 's/[<>=].*$//')
    if [[ "$sanitized" =~ \.so ]]; then
        pacman -Fy >/dev/null 2>&1
        if [ -f "/usr/lib/$sanitized" ]; then
            owner=$(pacman -F "/usr/lib/$sanitized" 2>/dev/null | head -n1 | awk '{print $3}')
            if [ -n "$owner" ]; then
                echo "$owner"
                return
            fi
        fi
        sanitized=${sanitized%.so}
    fi
    echo "$sanitized"
}

###############################################################################
# Function: is_installed
# Description: Check if a package/dependency is installed.
###############################################################################
is_installed() {
    local dep="$1"
    pacman -Qq "$dep" >/dev/null 2>&1
}

###############################################################################
# Function: is_in_official_repo
# Description: Check if a dependency exists in the official repositories.
###############################################################################
is_in_official_repo() {
    local dep="$1"
    pacman -Si "$dep" >/dev/null 2>&1
}

###############################################################################
# Function: is_ignored
# Description: Return 0 if a package should be ignored based on ignore lists.
###############################################################################
declare -A PKG_GROUP_CACHE=()
is_ignored() {
    local pkg="$1"
    local item groups

    for item in "${DEFAULT_IGNORE_PKGS[@]}" "${CUSTOM_IGNORE_PKGS[@]}"; do
        if [[ -n "$item" && "$pkg" == "$item" ]]; then
            return 0
        fi
    done

    groups="${PKG_GROUP_CACHE[$pkg]:-}"
    if [[ -z "$groups" ]]; then
        groups=$(pacman -Qi "$pkg" 2>/dev/null | awk -F':' '/^Groups/ {print $2}')
        groups=${groups## } ; groups=${groups%% } # trim
        PKG_GROUP_CACHE["$pkg"]="$groups"
    fi

    if [[ -n "$groups" ]]; then
        for item in "${CUSTOM_IGNORE_GROUPS[@]}"; do
            if [[ -n "$item" && " $groups " == *" $item "* ]]; then
                return 0
            fi
        done
    fi
    return 1
}

###############################################################################
# Function: install_dependency
# Description: Install a dependency via pacman (if in official repo) or via yay.
###############################################################################
install_dependency() {
    local dep="$1"
    if is_in_official_repo "$dep"; then
        log_message "INFO: Installing $dep from official repositories..."
        if [ "$DRY_RUN" = true ]; then
            log_message "DRY-RUN: pacman -S --needed --noconfirm $dep"
        else
            pacman -S --needed --noconfirm "$dep" >/dev/null 2>&1
        fi
    else
        log_message "INFO: Installing $dep from AUR..."
        if [ "$DRY_RUN" = true ]; then
            log_message "DRY-RUN: yay -S --needed --noconfirm $dep"
        else
            yay -S --needed --noconfirm "$dep" >/dev/null 2>&1
        fi
    fi
}

###############################################################################
# Function: interactive_prompt
# Description: Prompt the user, defaulting to "y" if no input is provided.
###############################################################################
interactive_prompt() {
    local prompt="$1"
    local response
    echo -n "$prompt"
    read -r response
    if [ -z "$response" ]; then
        response="y"
    fi
    echo "$response"
}

###############################################################################
# Function: compute_missing_dependencies
# Description: For each target package, extract and sanitize dependencies, and
#              return those not installed.
###############################################################################
compute_missing_dependencies() {
    declare -A all_deps
    all_deps=()
    local pkg deps_line dep resolved_dep
    for pkg in "${PKGLIST[@]}"; do
        deps_line=$(get_package_dependencies "$pkg")
        if [ -n "$deps_line" ]; then
            # Read the parsed dependencies into an array
            read -r -a dep_array <<< "$(parse_dependencies "$deps_line")"
            for dep in "${dep_array[@]}"; do
                resolved_dep=$(sanitize_and_resolve_dep_name "$dep")
                if ! is_ignored "$resolved_dep"; then
                    all_deps["$resolved_dep"]=1
                fi
            done
        fi
    done

    local missing=()
    local key
    for key in "${!all_deps[@]}"; do
        if ! is_installed "$key" && ! is_ignored "$key"; then
            missing+=("$key")
        fi
    done
    # Output missing dependencies as space-separated string.
    echo "${missing[@]}"
}

###############################################################################
# Function: process_dependency_closure
# Description: Iteratively compute and install missing dependencies until closure.
###############################################################################
process_dependency_closure() {
    local iteration=1
    local missing_deps_str
    while true; do
        log_message "INFO: Dependency closure iteration ${iteration}: scanning installed packages..."
        if [ "$ALL_SYSTEM" = true ]; then
            update_installed_packages
            mapfile -t PKGLIST < "$TMP_DIR/installed_pkgs.txt"
        fi
        missing_deps_str=$(compute_missing_dependencies)
        # Read missing_deps_str into an array.
        read -r -a missing_deps <<< "$missing_deps_str"
        if [ "${#missing_deps[@]}" -eq 0 ]; then
            log_message "INFO: All dependencies are satisfied after ${iteration} iteration(s)."
            break
        else
            log_message "INFO: Iteration ${iteration}: Missing dependencies: ${missing_deps[*]}"
            if [ "$INTERACTIVE_MODE" = true ] && [ -t 0 ]; then
                local resp
                resp=$(interactive_prompt 'Install missing dependencies? [Y/n]: ')
                if [[ "$resp" =~ ^[Nn] ]]; then
                    log_message "INFO: User aborted installation."
                    exit 0
                fi
            fi
            local dep
            for dep in "${missing_deps[@]}"; do
                if ! is_installed "$dep"; then
                    install_dependency "$dep"
                fi
            done
            sleep 2
            iteration=$((iteration + 1))
        fi
    done
}

###############################################################################
# Function: parse_arguments
# Description: Parse CLI arguments and set target package list.
###############################################################################
parse_arguments() {
    local opt
    while getopts "nia:l:k:g:m?h" opt; do
        case "$opt" in
            n) DRY_RUN=true ;;
            a) ALL_SYSTEM=true ;;
            i) INTERACTIVE_MODE=true ;;
            l) LOGFILE="$OPTARG" ;;
            k) IFS=',' read -r -a CUSTOM_IGNORE_PKGS <<< "$OPTARG" ;;
            g) IFS=',' read -r -a CUSTOM_IGNORE_GROUPS <<< "$OPTARG" ;;
            m) SHOW_MATRIX=true ;;
            h) print_help ;;
            *) print_help ;;
        esac
    done
    shift $(( OPTIND - 1 ))
    if [ "$ALL_SYSTEM" = false ] && [ "$#" -eq 0 ]; then
        print_help
    fi
    if [ "$ALL_SYSTEM" = false ]; then
        PKGLIST=("$@")
    fi
}

###############################################################################
# Function: print_help
# Description: Display usage instructions.
###############################################################################
print_help() {
    cat <<EOF
Usage: $0 [OPTIONS] [package1 package2 ...]

  -a             Check & install missing dependencies for the entire system (default)
  -i             Enable interactive installation mode
  -n             Dry-run; show actions without executing
  -k <pkgs>      Comma-separated packages to ignore
  -g <groups>    Comma-separated groups to ignore
  -m             Show feature matrix and exit
  -l <logfile>   Custom log file (default: ${DEFAULT_LOGFILE})
  -h             Display this help screen

Examples:
  $0 -a
  $0 -i bat
  $0 -n -a
EOF
    exit 0
}

###############################################################################
# Function: main
# Description: Main execution routine.
###############################################################################
main() {
    parse_arguments "$@"
    if [ "$SHOW_MATRIX" = true ]; then
        feature_matrix FEATURES_DEPS FEATURES_BETA
        exit 0
    fi
    log_message "INFO: Starting dependency checker..."
    check_requirements
    wait_for_pacman_lock
    refresh_pacman_databases
    process_dependency_closure
    if [ "$INTERACTIVE_MODE" = true ] && [ -t 0 ]; then
        local resp
        resp=$(interactive_prompt 'Final confirmation: Install any remaining missing dependencies? [Y/n]: ')
        if [[ "$resp" =~ ^[Nn] ]]; then
            log_message "INFO: User aborted final installation."
        else
            log_message "INFO: All missing dependencies have been processed."
        fi
    fi
    log_message "INFO: Completed dependency check."
}

# Execute main
main "$@"
