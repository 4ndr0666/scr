#!/usr/bin/env bash
# File: deps
# Author: 4ndr0666
# Purpose: Systematically verify and install all dependencies for every installed package (or a user‐specified list)
#          on an Arch system.
#
#          This script performs a fixed-point dependency closure:
#            1. It retrieves the installed package list via "pacman -Qqe" (or uses a user list).
#            2. For each package, it extracts the "Depends On" field using "pacman -Si" and cleans dependency names.
#            3. It computes the union of all direct dependencies not yet installed.
#            4. For each missing dependency, it uses "pacman -Ss" to determine if it exists in the official repos.
#               If so, it installs via pacman; otherwise, via yay.
#            5. The process repeats until no new missing dependency is found.
#
#          Temporary files are stored in a dedicated directory and cleaned up via TRAP.
#          In interactive mode (-i), the user is prompted (with an indefinite wait defaulting to "y")
#          before installations.
#
# **Total lines of code: 430**
# **Total functions: 17**

###############################################################################
# Auto-escalation: Re-run with sudo if not root.
###############################################################################
declare user_status
user_status="$EUID"
if [ "$user_status" -ne 0 ]; then
    echo "Re-running the script with sudo privileges..."
    sudo bash "$0" "$@"
    exit $?
fi

###############################################################################
# Set Internal Field Separator.
###############################################################################
IFS=$'\n\t'

###############################################################################
# Global Variables & Constants.
###############################################################################
declare DEFAULT_LOGFILE
DEFAULT_LOGFILE="${HOME}/.local/share/logs/dependency-checker.log"

declare PACMAN_LOCK
PACMAN_LOCK="/var/lib/pacman/db.lck"

declare TMP_DIR
TMP_DIR="$(mktemp -d)"

declare ALL_SYSTEM
ALL_SYSTEM=false

declare INTERACTIVE_MODE
INTERACTIVE_MODE=false

# Arrays for custom ignore options (not used in dependency logic here)
declare -a CUSTOM_IGNORE_PKGS
CUSTOM_IGNORE_PKGS=()
declare -a CUSTOM_IGNORE_GROUPS
CUSTOM_IGNORE_GROUPS=()

# Arrays to store missing dependencies and target package list.
declare -a MISSING_DEPS
MISSING_DEPS=()
declare -a PKGLIST
PKGLIST=()

declare LOGFILE
LOGFILE="$DEFAULT_LOGFILE"

###############################################################################
# Cleanup: Remove temporary directory.
###############################################################################
cleanup() {
    if [ -d "$TMP_DIR" ]; then
        rm -rf "$TMP_DIR"
    fi
}
trap cleanup EXIT

###############################################################################
# Function: log_message
# Description: Log messages to stdout and append them to the logfile.
###############################################################################
log_message() {
    declare msg
    msg="$1"
    echo -e "$msg" 2>&1 | tee -a "$LOGFILE"
}

###############################################################################
# Function: check_requirements
# Description: Verify required tools; auto-install any that are missing.
###############################################################################
check_requirements() {
    declare -a required_tools
    required_tools=("pacman" "pactree" "expac" "git" "reflector" "setfacl" "loginctl" "lostfiles")
    declare -a missing_tools
    missing_tools=()
    declare tool
    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" > /dev/null 2>&1; then
            missing_tools+=("$tool")
        fi
    done
    if [ "${#missing_tools[@]}" -eq 0 ]; then
        log_message "INFO: All required tools are present."
        return 0
    fi
    log_message "INFO: Auto-installing missing tools: ${missing_tools[*]}"
    if [[ ${missing_tools[*]} =~ pacman ]]; then
        log_message "ERROR: 'pacman' is missing. Cannot auto-install. Please fix your system manually."
        exit 1
    fi
    declare t
    for t in "${missing_tools[@]}"; do
        declare retries i
        retries=3
        for (( i=1; i<=retries; i++ )); do
            if pacman -S --needed --noconfirm "$t" > /dev/null 2>&1; then
                log_message "INFO: Successfully installed '$t'."
                break
            fi
            log_message "WARN: Attempt $i/$retries failed to install '$t'. Retrying..."
            sleep 3
        done
        if ! command -v "$t" > /dev/null 2>&1; then
            log_message "ERROR: '$t' could not be installed after $retries attempts."
        fi
    done
}

###############################################################################
# Function: wait_for_pacman_lock
# Description: Wait until the pacman lock file is removed.
###############################################################################
wait_for_pacman_lock() {
    declare wait_time interval elapsed
    wait_time=30
    interval=5
    elapsed=0
    while [ -e "$PACMAN_LOCK" ]; do
        if [ "$elapsed" -ge "$wait_time" ]; then
            log_message "ERROR: pacman lock ($PACMAN_LOCK) still exists after $wait_time seconds. Another process may be running!"
            log_message "INFO: Remove lock with: rm -f $PACMAN_LOCK"
            exit 1
        fi
        log_message "INFO: Waiting for pacman lock to be released... ($elapsed/$wait_time sec elapsed)"
        sleep "$interval" > /dev/null 2>&1
        elapsed=$((elapsed + interval))
    done
}

###############################################################################
# Function: refresh_pacman_databases
# Description: Refresh the pacman database.
###############################################################################
refresh_pacman_databases() {
    log_message "INFO: Refreshing pacman db..."
    if ! pacman -Sy --noconfirm > /dev/null 2>&1; then
        log_message "ERROR: Failed to refresh pacman db."
        exit 1
    else
        log_message "INFO: Pacman db refreshed successfully."
    fi
}

###############################################################################
# Function: update_installed_packages
# Description: Retrieve the list of installed packages and cache it.
###############################################################################
update_installed_packages() {
    pacman -Qqe > "$TMP_DIR/installed_pkgs.txt" 2>&1
    log_message "INFO: Cached installed packages."
}

###############################################################################
# Function: get_package_dependencies
# Description: Extract the "Depends On" field from pacman -Si for a given package.
###############################################################################
get_package_dependencies() {
    declare pkg
    pkg="$1"
    pacman -Si "$pkg" 2>/dev/null | grep -i "^Depends On" | cut -d: -f2 | sed 's/^[[:space:]]*//'
}

###############################################################################
# Function: parse_dependencies
# Description: Clean dependency strings by stripping version constraints.
###############################################################################
parse_dependencies() {
    declare deps_line
    deps_line="$1"
    if [[ "$deps_line" =~ ^None$ ]]; then
        return
    fi
    for dep in $deps_line; do
        echo "$dep" | sed -E 's/[<>=].*$//'
    done
}

###############################################################################
# Function: sanitize_and_resolve_dep_name
# Description: Sanitize a dependency name and, if it contains ".so",
#              use pacman -F to determine the owning package.
###############################################################################
sanitize_and_resolve_dep_name() {
    declare dep
    dep="$1"
    # First, remove version specifiers.
    local sanitized
    sanitized=$(echo "$dep" | sed -E 's/[<>=].*$//')
    # If the name contains ".so", attempt to resolve it.
    if [[ "$sanitized" =~ \.so ]]; then
        # Ensure the file database is updated.
        sudo pacman -Fy > /dev/null 2>&1
        # Assume the file is in /usr/lib
        if [ -f "/usr/lib/$sanitized" ]; then
            local owner
            owner=$(pacman -F "/usr/lib/$sanitized" 2>/dev/null | head -n 1 | awk '{print $3}')
            if [ -n "$owner" ]; then
                echo "$owner"
                return
            fi
        fi
        # Fallback: remove the ".so" suffix.
        sanitized=${sanitized%.so}
    fi
    echo "$sanitized"
}

###############################################################################
# Function: is_installed
# Description: Check if a dependency is installed.
###############################################################################
is_installed() {
    declare dep
    dep="$1"
    pacman -Qq "$dep" > /dev/null 2>&1
}

###############################################################################
# Function: is_in_official_repo
# Description: Check if a dependency exists in the official repositories.
###############################################################################
is_in_official_repo() {
    declare dep
    dep="$1"
    pacman -Si "$dep" > /dev/null 2>&1
}

###############################################################################
# Function: install_dependency
# Description: Install a dependency via pacman if available; otherwise, via yay.
###############################################################################
install_dependency() {
    declare dep
    dep="$1"
    if is_in_official_repo "$dep"; then
        log_message "INFO: Installing $dep from official repositories..."
        pacman -S --needed --noconfirm "$dep" > /dev/null 2>&1
    else
        log_message "INFO: Installing $dep from AUR..."
        yay -S --needed --noconfirm "$dep" > /dev/null 2>&1
    fi
}

###############################################################################
# Function: compute_missing_dependencies
# Description: For each package in the target list, extract its dependencies,
#              sanitize the names, and return those not installed.
###############################################################################
compute_missing_dependencies() {
    declare -a all_deps
    all_deps=()
    declare pkg deps_line dep resolved_dep
    for pkg in "${PKGLIST[@]}"; do
        deps_line="$(get_package_dependencies "$pkg")"
        if [ -n "$deps_line" ]; then
            for dep in $(parse_dependencies "$deps_line"); do
                resolved_dep=$(sanitize_and_resolve_dep_name "$dep")
                if [[ ! " ${all_deps[*]} " =~ $resolved_dep ]]; then
                    all_deps+=( "$resolved_dep" )
                fi
            done
        fi
    done
    declare -a missing
    missing=()
    for dep in "${all_deps[@]}"; do
        if ! is_installed "$dep"; then
            missing+=( "$dep" )
        fi
    done
    echo "${missing[@]}"
}

###############################################################################
# Function: process_dependency_closure
# Description: Iteratively compute and install missing dependencies until closure.
###############################################################################
process_dependency_closure() {
    declare iteration=1
    while true; do
        log_message "INFO: Dependency closure iteration $iteration: scanning installed packages..."
        update_installed_packages
        mapfile -t PKGLIST < "$TMP_DIR/installed_pkgs.txt"
        missing_deps_str="$(compute_missing_dependencies)"
        read -r -a missing_deps <<< "$missing_deps_str"
        if [ "${#missing_deps[@]}" -eq 0 ]; then
            log_message "INFO: All dependencies are satisfied after $iteration iteration(s)."
            break
        else
            log_message "INFO: Iteration $iteration: Missing dependencies: ${missing_deps[*]}"
            if [ "$INTERACTIVE_MODE" = true ] && [ -t 0 ]; then
                resp="$(interactive_prompt 'Install missing dependencies? [Y/n]: ')"
                case "$resp" in
                    [Nn]*)
                        log_message "INFO: User aborted installation."
                        exit 0
                        ;;
                    *)
                        ;;
                esac
            fi
            declare dep
            for dep in "${missing_deps[@]}"; do
                if ! is_installed "$dep"; then
                    install_dependency "$dep"
                fi
            done
            sleep 2
            iteration=$((iteration + 1))
        fi
    done
}

###############################################################################
# Function: interactive_prompt
# Description: Prompt the user indefinitely, defaulting to "y" if no input is provided.
###############################################################################
interactive_prompt() {
    echo -n "$1"
    read -r response
    if [ -z "$response" ]; then
        response="y"
    fi
    echo "$response"
}

###############################################################################
# Function: parse_arguments
# Description: Parse CLI arguments and populate the target package list.
###############################################################################
parse_arguments() {
    while getopts "iak:g:l:h" opt; do
        case "$opt" in
            a) ALL_SYSTEM=true ;;
            i) INTERACTIVE_MODE=true ;;
            k)
                IFS=',' read -r -a CUSTOM_IGNORE_PKGS <<< "$OPTARG"
                ;;
            g)
                IFS=',' read -r -a CUSTOM_IGNORE_GROUPS <<< "$OPTARG"
                ;;
            l) LOGFILE="$OPTARG" ;;
            h) print_help ;;
            *) print_help ;;
        esac
    done
    shift $(( OPTIND - 1 ))
    if [ "$ALL_SYSTEM" = false ] && [ "$#" -eq 0 ]; then
        print_help
    fi
    if [ "$ALL_SYSTEM" = false ]; then
        PKGLIST=( "$@" )
    fi
}

###############################################################################
# Function: print_help
# Description: Display usage instructions.
###############################################################################
print_help() {
    cat <<EOF
Usage: $0 [OPTIONS] [package1 package2 ...]

  -a             Check & install missing dependencies for the entire system (default)
  -i             Enable interactive installation mode
  -k <packages>  Comma-separated list of packages to ignore (not implemented)
  -g <groups>    Comma-separated list of groups to ignore (not implemented)
  -l <logfile>   Custom log file (default: $DEFAULT_LOGFILE)
  -h             Display this help screen

Examples:
  $0 -a
  $0 -i bat
  $0 -k firefox,thunderbird bash
  $0 -g base,extra python
EOF
    exit 0
}

###############################################################################
# Function: main
# Description: Main execution routine.
###############################################################################
main() {
    log_message "INFO: Starting dependency checker..."
    check_requirements
    wait_for_pacman_lock
    refresh_pacman_databases
    parse_arguments "$@"
    process_dependency_closure
    if [ "$INTERACTIVE_MODE" = true ] && [ -t 0 ]; then
        resp="$(interactive_prompt 'Install missing dependencies? [Y/n]: ')"
        case "$resp" in
            [Nn]*)
                log_message "INFO: User aborted installation."
                ;;
            *)
                log_message "INFO: Missing dependencies have been installed."
                ;;
        esac
    fi
    log_message "INFO: Completed dependency check."
}

# Execute main
main "$@"
