#!/usr/bin/env bash
# File: deps
# Author: 4ndr0666
# Checks for missing dependencies and installs them automatically. 

# ===================== // DEPS //
### Auto-escalate
if [ "$EUID" -ne 0 ]; then
    echo "Re-running the script with sudo privileges..."
    sudo "$0" "$@"
    exit $?
fi
IFS=$'\n\t'

### Constants & Global Variables
declare DEFAULT_LOGFILE
DEFAULT_LOGFILE="/home/andro/.local/share/logs/dependency-checker.log"

declare PACMAN_LOCK
PACMAN_LOCK="/var/lib/pacman/db.lck"

declare AUR_DIR
AUR_DIR="/home/build"

declare LOG_LEVEL
LOG_LEVEL="INFO"

declare ALL_SYSTEM
ALL_SYSTEM=false

declare CUSTOM_IGNORE_PKGS
CUSTOM_IGNORE_PKGS=()

declare CUSTOM_IGNORE_GROUPS
CUSTOM_IGNORE_GROUPS=()

declare IGNORE_PKGS
IGNORE_PKGS=()

declare IGNORE_GROUPS
IGNORE_GROUPS=()

declare -a MISSING_DEPS
MISSING_DEPS=()

declare -a PKGLIST
PKGLIST=()

declare -a INSTALLED_PKGS
INSTALLED_PKGS=()

declare CYAN
CYAN='\033[38;2;21;255;255m'

declare RED
RED='\033[0;31m'

declare YELLOW
YELLOW='\033[1;33m'

declare NC
NC='\033[0m'

###############################################################################
# Directory Setup
###############################################################################
mkdir -p "$(dirname "$DEFAULT_LOGFILE")"
sudo mkdir -p "$AUR_DIR"
sudo chown "$(whoami)":"$(whoami)" "$AUR_DIR"
sudo chmod 755 "$AUR_DIR"

declare LOGFILE
LOGFILE="$DEFAULT_LOGFILE"

###############################################################################
# Logging Function
###############################################################################
log_message() {
    declare msg
    msg="$1"
    echo "$msg" | tee -a "$LOGFILE"
}

###############################################################################
# Auto-install Missing Required Tools
###############################################################################
check_requirements() {
    declare -a required_tools
    required_tools=( "pacman" "pactree" "expac" "xargs" "git" "reflector" "setfacl" "loginctl" )
    declare -a missing_tools
    missing_tools=()

    declare tool
    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" > /dev/null 2>&1; then
            missing_tools+=( "$tool" )
        fi
    done

    if [ "${#missing_tools[@]}" -eq 0 ]; then
        log_message "INFO: All required tools are present."
        return 0
    fi

    log_message "INFO: Auto-installing missing tools: ${missing_tools[*]}"
    declare found_pacman=false
    for tool in "${missing_tools[@]}"; do
        if [ "$tool" = "pacman" ]; then
            found_pacman=true
            break
        fi
    done
    if [ "$found_pacman" = "true" ]; then
        log_message "ERROR: 'pacman' is missing. Cannot auto-install. Please fix your system manually."
        exit 1
    fi

    declare t
    for t in "${missing_tools[@]}"; do
        log_message "INFO: Installing '$t' via pacman..."
        if ! sudo pacman -S --needed --noconfirm "$t" > /dev/null 2>&1; then
            log_message "WARN: Failed to install '$t'. Continuing anyway..."
        else
            log_message "INFO: Successfully installed '$t'."
        fi
    done
}

###############################################################################
# Check if a Package is Available in Repositories
###############################################################################
is_available_in_repo() {
    sudo pacman -Si "$1" > /dev/null 2>&1
    return $?
}

###############################################################################
# Load Ignored Packages/Groups from /etc/pacman.conf
###############################################################################
load_ignored_packages() {
    if [ -f /etc/pacman.conf ]; then
        while IFS= read -r line; do
            case "$line" in
                IgnorePkg*)
                    declare pkgs
                    pkgs="${line#IgnorePkg*= }"
                    IFS=' ' read -r -a pkg_array <<< "$pkgs"
                    IGNORE_PKGS=( "${IGNORE_PKGS[@]}" "${pkg_array[@]}" )
                    ;;
                IgnoreGroup*)
                    declare groups
                    groups="${line#IgnoreGroup*= }"
                    IFS=' ' read -r -a group_array <<< "$groups"
                    IGNORE_GROUPS=( "${IGNORE_GROUPS[@]}" "${group_array[@]}" )
                    ;;
            esac
        done < /etc/pacman.conf
    fi
    IGNORE_PKGS=( "${IGNORE_PKGS[@]}" "${CUSTOM_IGNORE_PKGS[@]}" )
    IGNORE_GROUPS=( "${IGNORE_GROUPS[@]}" "${CUSTOM_IGNORE_GROUPS[@]}" )
}

###############################################################################
# Check if a Package is Ignored
###############################################################################
is_ignored_package() {
    declare pkg
    pkg="$1"
    declare ignored
    for ignored in "${IGNORE_PKGS[@]}"; do
        if [ "$pkg" = "$ignored" ]; then
            return 0
        fi
    done
    declare group group_pkgs g_pkg
    for group in "${IGNORE_GROUPS[@]}"; do
        group_pkgs="$(pacman -Sg "$group" 2> /dev/null | awk '{print $2}')"
        for g_pkg in $group_pkgs; do
            if [ "$pkg" = "$g_pkg" ]; then
                return 0
            fi
        done
    done
    return 1
}

###############################################################################
# Wait for pacman Lock
###############################################################################
wait_for_pacman_lock() {
    declare wait_time interval elapsed
    wait_time=30
    interval=5
    elapsed=0
    while [ -e "$PACMAN_LOCK" ]; do
        if [ "$elapsed" -ge "$wait_time" ]; then
            log_message "ERROR: Pacman lock present after $wait_time seconds."
            exit 1
        fi
        log_message "INFO: Pacman locked; waiting..."
        sleep "$interval"
        elapsed=$((elapsed + interval))
    done
}

###############################################################################
# Handle pacman Errors
###############################################################################
handle_pacman_errors() {
    declare stderr
    stderr="$1"
    if echo "$stderr" | grep -q 'db\.sig'; then
        log_message "WARN: Signature error. Attempting mirror refresh..."
        if ! sudo reflector --latest 20 --sort rate --save /etc/pacman.d/mirrorlist > /dev/null 2>&1; then
            log_message "WARN: Reflector failed; using existing mirrors."
        fi
        if ! sudo pacman -Sy --noconfirm > /dev/null 2>&1; then
            log_message "ERROR: Could not refresh pacman db after signature error."
            exit 1
        fi
    elif echo "$stderr" | grep -q 'exists in filesystem'; then
        log_message "WARN: File conflict detected; attempting overwrite..."
        if ! sudo pacman -Syu --overwrite '*' --noconfirm > /dev/null 2>&1; then
            log_message "ERROR: Failed to resolve file conflict."
            exit 1
        fi
    else
        log_message "ERROR: pacman error: $stderr"
        exit 1
    fi
}

###############################################################################
# Refresh Pacman DB
###############################################################################
refresh_pacman_databases() {
    log_message "INFO: Refreshing pacman db..."
    if ! sudo pacman -Sy --noconfirm > /dev/null 2>&1; then
        declare error_output
        error_output="$(sudo pacman -Sy --noconfirm 2>&1)" || true
        handle_pacman_errors "$error_output"
        if ! sudo pacman -Sy --noconfirm > /dev/null 2>&1; then
            log_message "ERROR: Failed to refresh pacman db after error handling."
            exit 1
        fi
    else
        log_message "INFO: Pacman db refreshed successfully."
    fi
}

###############################################################################
# Cache Installed Packages
###############################################################################
cache_installed_packages() {
    declare -a tmp
    mapfile -t tmp < <(pacman -Qq)
    INSTALLED_PKGS=( "${tmp[@]}" )
}

###############################################################################
# Check if a Package is Installed (using cache)
###############################################################################
is_installed() {
    declare pkg
    pkg="$(echo "$1" | sed -E 's/[><=].*$//')"
    # Skip "sh" or any containing ".so"
    if [ "$pkg" = "sh" ] || echo "$pkg" | grep -q '\.so'; then
        return 0
    fi
    declare p
    for p in "${INSTALLED_PKGS[@]}"; do
        if [ "$p" = "$pkg" ]; then
            return 0
        fi
    done
    return 1
}

###############################################################################
# Gather Dependencies Using pactree
###############################################################################
gather_dependencies() {
    declare output
    if ! output="$(pactree -u "$1" 2>/dev/null)"; then
        echo ""
        return 0
    fi
    echo "$output" | tail -n +2
}

###############################################################################
# Check Missing Dependencies
###############################################################################
check_missing_dependencies() {
    declare -a packages
    packages=( "$@" )
    declare pkg dep clean_dep
    for pkg in "${packages[@]}"; do
        if is_ignored_package "$pkg"; then
            continue
        fi
        if is_installed "$pkg"; then
            declare deps
            deps="$(gather_dependencies "$pkg")"
            for dep in $deps; do
                clean_dep="$(echo "$dep" | sed -E 's/[><=].*$//')"
                if [ -z "$clean_dep" ]; then
                    continue
                fi
                if is_ignored_package "$clean_dep"; then
                    continue
                fi
                if ! is_installed "$clean_dep"; then
                    MISSING_DEPS+=( "$clean_dep" )
                fi
            done
        else
            MISSING_DEPS+=( "$pkg" )
        fi
    done
    if [ "${#MISSING_DEPS[@]}" -eq 0 ]; then
        log_message "INFO: All dependencies satisfied."
    else
        log_message "INFO: Missing dependencies: ${MISSING_DEPS[*]}"
    fi
}

###############################################################################
# Check if a Package is Available in Repositories
###############################################################################
is_available_in_repo() {
    sudo pacman -Si "$1" > /dev/null 2>&1
    return $?
}

###############################################################################
# Install a Single Package
###############################################################################
install_package() {
    declare pkg
    pkg="$1"
    declare clean_pkg
    clean_pkg="$(echo "$pkg" | sed -E 's/[><=].*$//')"
    if ! is_available_in_repo "$clean_pkg"; then
        log_message "WARN: Package '$clean_pkg' is not available in repositories. Skipping installation."
        return 0
    fi
    declare retry_count
    retry_count=3
    declare success
    success=false
    declare i
    for i in $(seq 1 "$retry_count"); do
        log_message "INFO: Installing '$clean_pkg' (attempt $i/$retry_count)..."
        if sudo pacman -S --needed --noconfirm "$clean_pkg" > /dev/null 2>&1; then
            success=true
            break
        else
            log_message "WARN: Installation of '$clean_pkg' failed; retrying..."
            sleep 3
        fi
    done
    if $success; then
        log_message "INFO: Successfully installed '$clean_pkg'."
    else
        log_message "WARN: Failed to install '$clean_pkg' after $retry_count tries. Skipping."
    fi
}

###############################################################################
# Install Missing Dependencies in Parallel
###############################################################################
install_missing_dependencies() {
    if [ "${#MISSING_DEPS[@]}" -eq 0 ]; then
        log_message "INFO: No missing dependencies to install."
        return
    fi
    log_message "INFO: Installing missing dependencies: ${MISSING_DEPS[*]}"
    declare max_jobs current_jobs
    max_jobs=4
    current_jobs=0
    declare dep
    for dep in "${MISSING_DEPS[@]}"; do
        install_package "$dep" &
        current_jobs=$(( current_jobs + 1 ))
        if [ "$current_jobs" -ge "$max_jobs" ]; then
            wait -n
            current_jobs=$(( current_jobs - 1 ))
        fi
    done
    wait
    log_message "INFO: Finished installing missing dependencies."
}

###############################################################################
# Interactive Installation
###############################################################################
prompt_with_timeout() {
    declare prompt timeout default response
    prompt="$1"
    timeout="$2"
    default="$3"
    if ! read -r -t "$timeout" -p "$prompt" response; then
        response="$default"
    fi
    echo "$response"
}

interactive_install() {
    if [ "${#MISSING_DEPS[@]}" -gt 0 ]; then
        echo -e "${YELLOW}The following dependencies are missing:${NC}"
        declare i
        for i in $(seq 0 $((${#MISSING_DEPS[@]} - 1))); do
            echo "$((i + 1)). ${MISSING_DEPS[$i]}"
        done
        declare response
        response="$(prompt_with_timeout 'Install these dependencies? [y/N]: ' 10 'n')"
        case "$response" in
            [Yy])
                install_missing_dependencies
                ;;
            *)
                log_message "INFO: Installation aborted by user."
                ;;
        esac
    else
        log_message "INFO: No missing dependencies to install."
    fi
}

###############################################################################
# Ensure Idempotency (Remove Duplicate Dependencies)
###############################################################################
ensure_idempotency() {
    declare -a unique
    unique=()
    declare -A seen
    declare dep
    for dep in "${MISSING_DEPS[@]}"; do
        if [ -z "${seen[$dep]+x}" ] && ! is_installed "$dep" && ! is_ignored_package "$dep" ]; then
            unique+=( "$dep" )
            seen["$dep"]=1
        fi
    done
    MISSING_DEPS=( "${unique[@]}" )
}

###############################################################################
# Print Help Screen
###############################################################################
print_help() {
    cat <<EOF
Usage: \$0 [OPTIONS] [package1 package2 ...]

  -a             Check & install missing dependencies for the entire system
  -k <packages>  Comma-separated list of packages to ignore
  -g <groups>    Comma-separated list of groups to ignore
  -l <logfile>   Custom log file (default: $DEFAULT_LOGFILE)
  -h             Display this help screen

Examples:
  \$0 -a
  \$0 firefox
  \$0 -k firefox,thunderbird bash
  \$0 -g base,extra python
EOF
    exit 0
}

###############################################################################
# Parse Command-Line Arguments
###############################################################################
parse_arguments() {
    declare opt
    while getopts "ak:g:l:h" opt; do
        case "$opt" in
            a)
                ALL_SYSTEM=true
                ;;
            k)
                IFS=',' read -r -a CUSTOM_IGNORE_PKGS <<< "$OPTARG"
                ;;
            g)
                IFS=',' read -r -a CUSTOM_IGNORE_GROUPS <<< "$OPTARG"
                ;;
            l)
                LOGFILE="$OPTARG"
                ;;
            h)
                print_help
                ;;
            *)
                print_help
                ;;
        esac
    done
    shift $((OPTIND - 1))
    if [ "$ALL_SYSTEM" = "false" ] && [ "$#" -eq 0 ]; then
        print_help
    fi
    if [ "$ALL_SYSTEM" = "true" ]; then
        mapfile -t PKGLIST < <(pacman -Qqe)
    else
        PKGLIST=( "$@" )
    fi
}

###############################################################################
# Main Execution
###############################################################################
main() {
    log_message "INFO: Starting dependency checker..."
    check_requirements
    wait_for_pacman_lock
    load_ignored_packages
    refresh_pacman_databases
    mapfile -t INSTALLED_PKGS < <(pacman -Qq)
    check_missing_dependencies "${PKGLIST[@]}"
    ensure_idempotency
    install_missing_dependencies
    log_message "INFO: Completed."
}

###############################################################################
# Entry Point
###############################################################################
if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root." >&2
    exit 1
fi

parse_arguments "$@"
main
