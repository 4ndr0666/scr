#!/bin/bash
# File: group_manager.sh
# Author: 4ndr0666
# Edited: 11-27-24 (Revised: [Current Date])
# Description: A minimalistic yet powerful tool for managing user groups, including creation,
#              deletion, adding/removing users to/from groups, and applying standard group presets.
#              Enhanced with a visually engaging menu system and robust feedback.

# ============================== // GROUP_MANAGER //
set -euo pipefail
IFS=$'\n\t'

# --- // Colors:
RC='\033[0m'
RED='\033[31m'
YELLOW='\033[33m'
CYAN='\033[36m'
GREEN='\033[32m'

# --- // Constants:
LOG_FILE="/var/log/group_manager.log"
BACKUP_DIR="/root/group_manager_backups/$(date +%F_%T)"
USER_TO_MANAGE=()
VERBOSE=false
DRY_RUN=false
PACKAGER=""

# --- // Priv_check:
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        printf "%b\n" "${RED}[!] Re-running with root privileges...${RC}"
        sudo "$0" "$@"
        exit $?
    fi
}

# --- // Logging: 
log() {
    local MESSAGE="$1"
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') $MESSAGE" >> "$LOG_FILE"
}

log_verbose() {
    if [ "$VERBOSE" = true ]; then
        local MESSAGE="$1"
        echo -e "$(date '+%Y-%m-%d %H:%M:%S') $MESSAGE" >> "$LOG_FILE"
    fi
}

# --- // Validate: 
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# --- // Trap:
terminate_script() {
    log "${RED}[!] Script terminated prematurely.${RC}"
    exit 1
}

trap terminate_script SIGINT SIGTERM

# --- // Package Manager Detection:
determine_package_manager() {
    PACKAGERS=('pacman' 'apt-get' 'dnf' 'zypper')
    for pgm in "${PACKAGERS[@]}"; do
        if command_exists "$pgm"; then
            PACKAGER=$pgm
            printf "%b\n" "${CYAN}Using $pgm as package manager.${RC}"
            return 0
        fi
    done

    printf "%b\n" "${RED}[!] No supported package manager found.${RC}"
    exit 1
}

# --- // Install Package:
install_package() {
    local PKG="$1"
    if [ "$DRY_RUN" = false ]; then
        case "$PACKAGER" in
            pacman)
                pacman -S --noconfirm "$PKG" >> "$LOG_FILE" 2>&1
                ;;
            apt-get)
                apt-get install -y "$PKG" >> "$LOG_FILE" 2>&1
                ;;
            dnf)
                dnf install -y "$PKG" >> "$LOG_FILE" 2>&1
                ;;
            zypper)
                zypper install -y "$PKG" >> "$LOG_FILE" 2>&1
                ;;
            *)
                printf "%b\n" "${RED}[!] Automatic installation not supported for your package manager. Please install $PKG manually.${RC}"
                exit 1
                ;;
        esac
        printf "%b\n" "${CYAN}[+] Installed $PKG.${RC}"
    else
        printf "%b\n" "${YELLOW}[Dry Run] Would install $PKG.${RC}"
    fi
}

# --- // Check and Install Dependencies:
check_dependencies() {
    printf "%b\n" "${CYAN}[*] Checking and installing dependencies...${RC}"
    local DEPENDENCIES=('fzf' 'shellcheck' 'polkit' 'chpasswd' 'usermod' 'chattr' 'openssl')
    for PKG in "${DEPENDENCIES[@]}"; do
        if [ "$PKG" = "polkit" ]; then
            if ! is_polkit_installed; then
                printf "%b\n" "${YELLOW}[!] $PKG is not installed. Installing...${RC}"
                install_package "$PKG"
            else
                printf "%b\n" "${CYAN}[-] $PKG is already installed.${RC}"
            fi
        elif ! command_exists "$PKG"; then
            printf "%b\n" "${YELLOW}[!] $PKG is not installed. Installing...${RC}"
            install_package "$PKG"
        else
            printf "%b\n" "${CYAN}[-] $PKG is already installed.${RC}"
        fi
    done
}

# --- // Check if Polkit is Installed:
is_polkit_installed() {
    case "$PACKAGER" in
        pacman)
            pacman -Qs polkit &>/dev/null
            ;;
        apt-get)
            dpkg -l polkit &>/dev/null
            ;;
        dnf)
            dnf list installed polkit &>/dev/null
            ;;
        zypper)
            zypper se -i polkit &>/dev/null
            ;;
        *)
            return 1
            ;;
    esac
}

# --- // Display Help Message:
show_help() {
    printf "%b\n" "${CYAN}Usage: ./group_manager.sh [options] [username1] [username2] ...${RC}"
    echo ""
    printf "%b\n" "Options:"
    printf "%b\n" "  -h, --help        Show this help message and exit."
    printf "%b\n" "  -v, --verbose     Enable verbose logging."
    printf "%b\n" "  -d, --dry-run     Perform a trial run with no changes made."
    echo ""
    printf "%b\n" "If no username is provided, the script will prompt you to enter one."
    exit 0
}

# --- // Parse Command-Line Arguments:
parse_arguments() {
    while [[ "$#" -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                ;;
            -v|--verbose)
                VERBOSE=true
                ;;
            -d|--dry-run)
                DRY_RUN=true
                ;;
            *)
                USER_TO_MANAGE+=("$1")
                ;;
        esac
        shift
    done

    # Prompt for username if none provided
    if [ "${#USER_TO_MANAGE[@]}" -eq 0 ]; then
        read -rp "Enter the username(s) to manage (separate multiple users with spaces): " -a USER_TO_MANAGE
        if [ "${#USER_TO_MANAGE[@]}" -eq 0 ]; then
            printf "%b\n" "${RED}[!] No username provided. Exiting.${RC}"
            exit 1
        fi
    fi
}

# --- // Confirmation Prompt:
confirm_action() {
    local PROMPT="$1"
    while true; do
        read -rp "$PROMPT [Y/n]: " yn
        case $yn in
            [Yy]*|"" ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer yes or no.";;
        esac
    done
}

# --- // Backup Files:
backup_files() {
    log "${CYAN}[*] Backing up critical configuration files...${RC}"
    if [ "$DRY_RUN" = false ]; then
        mkdir -p "$BACKUP_DIR"
        for FILE in /etc/group /etc/gshadow /etc/sudoers /etc/sudoers.d; do
            if [ -e "$FILE" ]; then
                cp -r "$FILE" "$BACKUP_DIR"/ || log "${RED}[!] Failed to backup $FILE.${RC}"
            else
                log "${YELLOW}[!] File $FILE does not exist. Skipping backup.${RC}"
            fi
        done
        log "${CYAN}[+] Backup completed at $BACKUP_DIR${RC}"
    else
        log_verbose "${YELLOW}[Dry Run] Would backup critical configuration files to $BACKUP_DIR.${RC}"
    fi
}

# --- // Correct File Permissions and Ownership:
correct_permissions() {
    local FILE="$1"
    local PERM="$2"
    local OWNER="$3"
    local GROUP="$4"

    if [ -e "$FILE" ]; then
        local CURRENT_PERM CURRENT_OWNER CURRENT_GROUP FILE_ATTR
        CURRENT_PERM=$(stat -c "%a" "$FILE")
        CURRENT_OWNER=$(stat -c "%U" "$FILE")
        CURRENT_GROUP=$(stat -c "%G" "$FILE")
        FILE_ATTR=$(lsattr "$FILE" | awk '{print $1}')

        if [[ "$CURRENT_PERM" != "$PERM" || "$CURRENT_OWNER" != "$OWNER" || "$CURRENT_GROUP" != "$GROUP" ]]; then
            log "${CYAN}[*] Correcting permissions for $FILE...${RC}"
            if [ "$DRY_RUN" = false ]; then
                chmod "$PERM" "$FILE" && chown "$OWNER":"$GROUP" "$FILE"
                log "${CYAN}[+] Permissions and ownership corrected for $FILE.${RC}"
            else
                log_verbose "${YELLOW}[Dry Run] Would chmod $PERM and chown $OWNER:$GROUP $FILE.${RC}"
            fi
        else
            log_verbose "${YELLOW}[-] $FILE permissions and ownership are already correct.${RC}"
        fi

        if echo "$FILE_ATTR" | grep -q 'i'; then
            log "${YELLOW}[!] $FILE has immutable attribute set. Removing...${RC}"
            if [ "$DRY_RUN" = false ]; then
                chattr -i "$FILE"
                log "${CYAN}[+] Immutable attribute removed from $FILE.${RC}"
            else
                log_verbose "${YELLOW}[Dry Run] Would remove immutable attribute from $FILE.${RC}"
            fi
        else
            log_verbose "${YELLOW}[-] $FILE does not have immutable attribute set.${RC}"
        fi
    else
        log "${RED}[!] File $FILE does not exist. Skipping permission correction.${RC}"
    fi
}

# --- // Apply Permissions to Critical Files and Directories:
apply_permissions() {
    log "${CYAN}[*] Applying correct permissions to critical files and directories...${RC}"
    declare -A FILES
    FILES["/etc/group"]="644 root root"
    FILES["/etc/gshadow"]="640 root root"
    FILES["/etc/sudoers"]="440 root root"
    FILES["/etc/sudoers.d"]="755 root root"

    for FILE in "${!FILES[@]}"; do
        local PERM OWNER GROUP
        PERM=$(echo "${FILES[$FILE]}" | awk '{print $1}')
        OWNER=$(echo "${FILES[$FILE]}" | awk '{print $2}')
        GROUP=$(echo "${FILES[$FILE]}" | awk '{print $3}')
        correct_permissions "$FILE" "$PERM" "$OWNER" "$GROUP"
    done
}

# --- // Remove Lock Files:
remove_lock_files() {
    log "${CYAN}[*] Removing lock files if they exist...${RC}"
    local LOCK_FILES=('/etc/group.lock' '/etc/gshadow.lock' '/etc/sudoers.lock' '/etc/sudoers.d.lock')
    for LOCK in "${LOCK_FILES[@]}"; do
        if [ -f "$LOCK" ]; then
            if [ "$DRY_RUN" = false ]; then
                rm -f "$LOCK"
                log "${CYAN}[+] Removed lock file: $LOCK${RC}"
            else
                log_verbose "${YELLOW}[Dry Run] Would remove lock file: $LOCK.${RC}"
            fi
        else
            log_verbose "${YELLOW}[-] No lock file found: $LOCK.${RC}"
        fi
    done
}

# --- // Create a Group if It Doesn't Exist:
create_group() {
    local GROUP="$1"
    if ! grep -q "^$GROUP:" /etc/group; then
        log "${CYAN}[+] Creating group: $GROUP.${RC}"
        if [ "$DRY_RUN" = false ]; then
            groupadd "$GROUP" && log "${CYAN}[+] Group $GROUP created successfully.${RC}"
        else
            log_verbose "${YELLOW}[Dry Run] Would create group: $GROUP.${RC}"
        fi
    else
        log_verbose "${YELLOW}[-] Group $GROUP already exists.${RC}"
    fi
}

# --- // Delete a Group if It Exists:
delete_group() {
    local GROUP="$1"
    if grep -q "^$GROUP:" /etc/group; then
        log "${CYAN}[+] Deleting group: $GROUP.${RC}"
        if [ "$DRY_RUN" = false ]; then
            groupdel "$GROUP" && log "${CYAN}[+] Group $GROUP deleted successfully.${RC}"
        else
            log_verbose "${YELLOW}[Dry Run] Would delete group: $GROUP.${RC}"
        fi
    else
        log_verbose "${YELLOW}[-] Group $GROUP does not exist.${RC}"
    fi
}

# --- // Display User's Current Groups:
view_user_groups() {
    local USER="$1"
    if id "$USER" &>/dev/null; then
        local USER_GROUPS
        USER_GROUPS=$(id -nG "$USER")
        printf "%b\n" "${CYAN}Groups for user '$USER':${RC} $USER_GROUPS"
    else
        printf "%b\n" "${RED}[!] User '$USER' does not exist.${RC}"
    fi
}

# --- // Add User to Selected Groups:
add_user_to_groups() {
    local USER="$1"
    shift
    local GROUPS_LIST=("$@")
    for GROUP in "${GROUPS_LIST[@]}"; do
        create_group "$GROUP"
        log "${CYAN}[+] Adding user '$USER' to group '$GROUP'.${RC}"
        if [ "$DRY_RUN" = false ]; then
            usermod -aG "$GROUP" "$USER" && log "${CYAN}[+] User '$USER' added to group '$GROUP'.${RC}"
        else
            log_verbose "${YELLOW}[Dry Run] Would add user '$USER' to group '$GROUP'.${RC}"
        fi
    done
    printf "%b\n" "${CYAN}[+] Operation completed: User '$USER' has been added to selected groups.${RC}"
}

# --- // Remove User from Selected Groups:
remove_user_from_groups() {
    local USER="$1"
    shift
    local GROUPS_LIST=("$@")
    for GROUP in "${GROUPS_LIST[@]}"; do
        if id -nG "$USER" | grep -qw "$GROUP"; then
            log "${CYAN}[+] Removing user '$USER' from group '$GROUP'.${RC}"
            if [ "$DRY_RUN" = false ]; then
                gpasswd -d "$USER" "$GROUP" && log "${CYAN}[+] User '$USER' removed from group '$GROUP'.${RC}"
            else
                log_verbose "${YELLOW}[Dry Run] Would remove user '$USER' from group '$GROUP'.${RC}"
            fi
        else
            log_verbose "${YELLOW}[-] User '$USER' is not a member of group '$GROUP'.${RC}"
        fi
    done
    printf "%b\n" "${CYAN}[+] Operation completed: User '$USER' has been removed from selected groups.${RC}"
}

# --- // Apply Standard Preset of Groups to the User:
apply_standard_preset() {
    local USER="$1"
    local STANDARD_GROUPS=("adm" "users" "disk" "wheel" "cdrom" "audio" "video" "usb" "optical" "storage" "scanner" "lp" "network" "power")
    log "${CYAN}[*] Applying standard preset groups to user '$USER'...${RC}"
    for GROUP in "${STANDARD_GROUPS[@]}"; do
        create_group "$GROUP"
        log "${CYAN}[+] Adding user '$USER' to group '$GROUP'.${RC}"
        if [ "$DRY_RUN" = false ]; then
            usermod -aG "$GROUP" "$USER" && log "${CYAN}[+] User '$USER' added to group '$GROUP'.${RC}"
        else
            log_verbose "${YELLOW}[Dry Run] Would add user '$USER' to group '$GROUP'.${RC}"
        fi
    done
    printf "%b\n" "${CYAN}[+] Standard preset applied to user '$USER'.${RC}"
}

# --- // Enable a Group in Sudoers:
enable_group_in_sudoers() {
    local GROUP="$1"
    local SUDOERS_FILE="/etc/sudoers.d/${GROUP}-sudo"
    if [ ! -f "$SUDOERS_FILE" ]; then
        log "${CYAN}[*] Enabling group '$GROUP' in sudoers...${RC}"
        if [ "$DRY_RUN" = false ]; then
            echo "%$GROUP ALL=(ALL) ALL" > "$SUDOERS_FILE"
            chmod 440 "$SUDOERS_FILE"
            log "${CYAN}[+] Group '$GROUP' has been enabled for sudo access.${RC}"
        else
            log_verbose "${YELLOW}[Dry Run] Would enable group '$GROUP' in sudoers by creating $SUDOERS_FILE.${RC}"
        fi
    else
        log_verbose "${YELLOW}[-] Group '$GROUP' is already enabled in sudoers.${RC}"
    fi
}

# --- // Disable a Group in Sudoers:
disable_group_in_sudoers() {
    local GROUP="$1"
    local SUDOERS_FILE="/etc/sudoers.d/${GROUP}-sudo"
    if [ -f "$SUDOERS_FILE" ]; then
        log "${CYAN}[*] Disabling group '$GROUP' in sudoers...${RC}"
        if [ "$DRY_RUN" = false ]; then
            rm -f "$SUDOERS_FILE"
            log "${CYAN}[+] Group '$GROUP' has been disabled for sudo access.${RC}"
        else
            log_verbose "${YELLOW}[Dry Run] Would disable group '$GROUP' in sudoers by removing $SUDOERS_FILE.${RC}"
        fi
    else
        log_verbose "${YELLOW}[-] Group '$GROUP' is not enabled in sudoers.${RC}"
    fi
}

# --- // Generate Summary Report:
generate_summary_report() {
    log "${CYAN}[*] Generating summary report...${RC}"
    if [ "$DRY_RUN" = false ]; then
        {
            echo ""
            echo "==================== Summary Report ===================="
            echo "User(s) Managed: ${USER_TO_MANAGE[*]}"
            echo "Backup Location: $BACKUP_DIR"
            echo "Log File: $LOG_FILE"
            echo "Date: $(date)"
            echo "========================================================="
        } >> "$LOG_FILE"
    else
        log_verbose "${YELLOW}[Dry Run] Would generate summary report.${RC}"
    fi
}

# --- // Generate Comprehensive Report:
generate_comprehensive_report() {
    log "${CYAN}[*] Generating comprehensive report...${RC}"
    if [ "$DRY_RUN" = false ]; then
        cp "$LOG_FILE" "$BACKUP_DIR"/
        log "${CYAN}[+] Report generated at $BACKUP_DIR/group_manager.log${RC}"
    else
        log_verbose "${YELLOW}[Dry Run] Would copy log file to backup directory.${RC}"
    fi
}

# --- // Final Syntax Check:
final_syntax_check() {
    log "${CYAN}[*] Performing final syntax check with ShellCheck...${RC}"
    if command_exists shellcheck; then
        shellcheck "$0" | tee -a "$LOG_FILE"
    else
        log "${RED}[!] ShellCheck not installed. Skipping syntax check.${RC}"
    fi
}

# --- // Robust Menu System:
main_menu() {
    while true; do
        clear
        echo -e "#${CYAN} === // GROUPCTL //${RC}"
        echo ""
        echo -e "${YELLOW}Select an operation:${RC}"
        echo " 1) View User's Groups"
        echo " 2) Add User to Group"
        echo " 3) Remove User from Group"
        echo " 4) Apply Standard Group Preset"
        echo " 5) Create a New Group"
        echo " 6) Delete a Group"
        echo " 7) Enable Group in Sudoers"
        echo " 8) Disable Group in Sudoers"
        echo " 9) Exit"
        echo ""
        read -rp "#? " choice
        case "$choice" in
            1)
                echo -e "${CYAN}Enter username:${RC}"
                read -r username
                view_user_groups "$username"
                echo ""
                echo -e "${CYAN}[+] Operation completed. Press any key to return to the menu.${RC}"
                read -n1 -s -r -p "" ; echo ""
                ;;
            2)
                echo -e "${CYAN}Enter username:${RC}"
                read -r username
                if id "$username" &>/dev/null; then
                    echo -e "${CYAN}Select group(s) to add user to (use space to separate multiple groups):${RC}"
                    mapfile -t selected < <(cut -d: -f1 /etc/group | fzf -m)
                    if [ "${#selected[@]}" -gt 0 ]; then
                        add_user_to_groups "$username" "${selected[@]}"
                        echo -e "${CYAN}[+] User '$username' added to selected groups.${RC}"
                    else
                        echo -e "${YELLOW}[!] No groups selected.${RC}"
                    fi
                else
                    echo -e "${RED}[!] User '$username' does not exist.${RC}"
                fi
                echo ""
                echo -e "${CYAN}[+] Operation completed. Press any key to return to the menu.${RC}"
                read -n1 -s -r -p "" ; echo ""
                ;;
            3)
                echo -e "${CYAN}Enter username:${RC}"
                read -r username
                if id "$username" &>/dev/null; then
                    echo -e "${CYAN}Select group(s) to remove user from (use space to separate multiple groups):${RC}"
                    mapfile -t selected < <(id -nG "$username" | tr ' ' '\n' | fzf -m)
                    if [ "${#selected[@]}" -gt 0 ]; then
                        remove_user_from_groups "$username" "${selected[@]}"
                        echo -e "${CYAN}[+] User '$username' removed from selected groups.${RC}"
                    else
                        echo -e "${YELLOW}[!] No groups selected.${RC}"
                    fi
                else
                    echo -e "${RED}[!] User '$username' does not exist.${RC}"
                fi
                echo ""
                echo -e "${CYAN}[+] Operation completed. Press any key to return to the menu.${RC}"
                read -n1 -s -r -p "" ; echo ""
                ;;
            4)
                echo -e "${CYAN}Enter username:${RC}"
                read -r username
                if id "$username" &>/dev/null; then
                    apply_standard_preset "$username"
                    echo -e "${CYAN}[+] Standard group preset applied to '$username'.${RC}"
                else
                    echo -e "${RED}[!] User '$username' does not exist.${RC}"
                fi
                echo ""
                echo -e "${CYAN}[+] Operation completed. Press any key to return to the menu.${RC}"
                read -n1 -s -r -p "" ; echo ""
                ;;
            5)
                echo -e "${CYAN}Enter group name to create:${RC}"
                read -r groupname
                if [[ "$groupname" =~ ^[a-zA-Z0-9_-]+$ ]]; then
                    create_group "$groupname"
                    echo -e "${CYAN}[+] Group '$groupname' created successfully.${RC}"
                else
                    echo -e "${RED}[!] Invalid group name. Use only letters, numbers, underscores, or hyphens.${RC}"
                fi
                echo ""
                echo -e "${CYAN}[+] Operation completed. Press any key to return to the menu.${RC}"
                read -n1 -s -r -p "" ; echo ""
                ;;
            6)
                echo -e "${CYAN}Enter group name to delete:${RC}"
                read -r groupname
                if [[ "$groupname" =~ ^[a-zA-Z0-9_-]+$ ]]; then
                    if [[ "$groupname" == "root" || "$groupname" == "sudo" ]]; then
                        echo -e "${RED}[!] Cannot delete critical group '$groupname'.${RC}"
                    else
                        delete_group "$groupname"
                        echo -e "${CYAN}[+] Group '$groupname' deleted successfully.${RC}"
                    fi
                else
                    echo -e "${RED}[!] Invalid group name. Use only letters, numbers, underscores, or hyphens.${RC}"
                fi
                echo ""
                echo -e "${CYAN}[+] Operation completed. Press any key to return to the menu.${RC}"
                read -n1 -s -r -p "" ; echo ""
                ;;
            7)
                echo -e "${CYAN}Enter group name to enable in sudoers:${RC}"
                read -r groupname
                if [[ "$groupname" =~ ^[a-zA-Z0-9_-]+$ ]]; then
                    enable_group_in_sudoers "$groupname"
                    echo -e "${CYAN}[+] Group '$groupname' enabled in sudoers.${RC}"
                else
                    echo -e "${RED}[!] Invalid group name. Use only letters, numbers, underscores, or hyphens.${RC}"
                fi
                echo ""
                echo -e "${CYAN}[+] Operation completed. Press any key to return to the menu.${RC}"
                read -n1 -s -r -p "" ; echo ""
                ;;
            8)
                echo -e "${CYAN}Enter group name to disable in sudoers:${RC}"
                read -r groupname
                if [[ "$groupname" =~ ^[a-zA-Z0-9_-]+$ ]]; then
                    disable_group_in_sudoers "$groupname"
                    echo -e "${CYAN}[+] Group '$groupname' disabled in sudoers.${RC}"
                else
                    echo -e "${RED}[!] Invalid group name. Use only letters, numbers, underscores, or hyphens.${RC}"
                fi
                echo ""
                echo -e "${CYAN}[+] Operation completed. Press any key to return to the menu.${RC}"
                read -n1 -s -r -p "" ; echo ""
                ;;
            9)
                echo -e "${CYAN}[+] Exiting group_manager.sh.${RC}"
                break
                ;;
            *)
                echo -e "${RED}Invalid option. Please enter a number between 1 and 9.${RC}"
                sleep 1
                ;;
        esac
    done
}

# ------------------------------ Main Execution ------------------------------

# Check if the script is run as root (pass along any arguments)
check_root "$@"

# Parse command-line arguments
parse_arguments "$@"

# Determine package manager (if needed)
#determine_package_manager

# Initialize log file with correct permissions
touch "$LOG_FILE"
chmod 600 "$LOG_FILE"
chown root:root "$LOG_FILE"
log "${CYAN}[+] Log file created at $LOG_FILE.${RC}"
log "${CYAN}[+] Starting group_manager.sh for user(s): ${USER_TO_MANAGE[*]}${RC}"

# Check and install dependencies (if desired)
#check_dependencies

# Remove lock files if any
remove_lock_files

# Apply correct permissions to critical files
apply_permissions

# Backup critical files
backup_files

# Launch robust main menu
main_menu

# Generate reports
generate_summary_report
generate_comprehensive_report

# Final syntax check
final_syntax_check

# Finalize script
log "${CYAN}[+] group_manager.sh completed successfully.${RC}"
printf "%b\n" "${CYAN}[+] All tasks completed. Please review the log at $LOG_FILE for details.${RC}"
