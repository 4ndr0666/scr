#!/bin/bash
# Author: 4ndr0666
# Enhanced by: AI Assistant
set -euo pipefail

# ================= // MAKEX //
## Description: Manages executable permissions in a directory.
#               1. Adds user executable permission to potential script files
#                  (.sh extension or shell shebang).
#               2. Removes executable permissions from files that should not
#                  have them (e.g., .md, .txt, .pdf, .jpg).
#               Excludes files within .git directories and processes only files
#               that need their permissions changed.
## Usage:       makex.sh [DIR]   (default: current dir)
# ----------------------------------------------------------------------------

DEFAULT_DIR="."
SHEBANG_PATTERN='^#!.*\b(bash|sh|zsh|dash|ksh|ash)\b'

# --- Configuration ---

# Patterns for files that should NOT be made executable, even if they have a shebang.
# Used in the "add executable" phase.
EXEC_EXCLUSION_PATTERNS=(
    "*.md" "*.MD" "*.markdown"
    "*.txt" "*.TXT"
    "README" "README.md" "README.MD"
    "*.rst"
)

# Patterns for files that should NEVER be executable.
# Used in the "remove executable" phase.
NON_EXEC_PATTERNS=(
    "*.md" "*.MD" "*.markdown"
    "*.txt" "*.TXT"
    "*.pdf" "*.PDF"
    "*.jpg" "*.jpeg" "*.png" "*.gif" "*.svg"
    "*.json" "*.yml" "*.yaml"
    "*.csv" "*.html" "*.css"
    "*.rst" "README"
)

# --- Color and Helper Functions ---

# Declare color variables. They will remain empty if tput is not available or stdout is not a TTY.
declare COLOR_GLOW="" COLOR_BUG="" COLOR_INFO="" COLOR_BANNER_START="" COLOR_RESET=""

if command -v tput >/dev/null 2>&1 && [ -t 1 ]; then
    COLOR_GLOW=$(tput setaf 6) # Cyan
    COLOR_BUG=$(tput setaf 1)  # Red
    COLOR_INFO=$(tput setaf 4) # Blue
    COLOR_BANNER_START=$(tput setaf 5) # Magenta
    COLOR_RESET=$(tput sgr0)
fi

GLOW() { printf '%s[✔️] %s%s\n' "$COLOR_GLOW" "$*" "$COLOR_RESET"; }
BUG() { printf '%s[❌] %s%s\n' "$COLOR_BUG" "$*" "$COLOR_RESET" >&2; }
INFO() { printf '%s[➡️] %s%s\n' "$COLOR_INFO" "$*" "$COLOR_RESET"; }

pause_prompt() {
    local oldstty
    GLOW "Press any key to continue..."
    if ! oldstty=$(stty -g); then BUG "Failed to save stty settings."; return 1; fi
    if ! stty cbreak -echo; then BUG "Failed to set stty cbreak -echo."; return 1; fi
    read -r -n 1 -s
    stty "$oldstty" || BUG "Failed to restore stty settings."
    printf '\n'
}

# --- Script Start ---

command -v clear >/dev/null 2>&1 && clear

banner="███╗   ███╗ █████╗ ██╗  ██╗███████╗██╗  ██╗
████╗ ████║██╔══██╗██║ ██╔╝██╔════╝╚██╗██╔╝
██╔████╔██║███████║█████╔╝ ██████╗   ╚███╔╝
██║╚██╔╝██║██╔══██║██╔═██╗ ██╔══╝   ██╔██╗
██║ ╚═╝ ██║██║  ██║██║  ██╗███████╗██╔╝ ██╗
╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝"

printf '%s%s%s\n\n' "$COLOR_BANNER_START" "$banner" "$COLOR_RESET"
printf "Managing executable permissions...\n\n"
pause_prompt

DIR="${1:-$DEFAULT_DIR}"
if [ ! -d "$DIR" ]; then
    BUG "Error: Directory '$DIR' not found or is not a directory."
    exit 1
fi

TEMP_FILE_ADD=$(mktemp)
TEMP_FILE_REMOVE=$(mktemp)
trap 'rm -f "$TEMP_FILE_ADD" "$TEMP_FILE_REMOVE"' EXIT

# Initialize counters for summary
files_made_executable=0
files_made_non_executable=0
total_failures=0

# ==============================================================================
# PHASE 1: ADD EXECUTABLE PERMISSION TO SCRIPTS
# ==============================================================================
INFO "PHASE 1: Searching for scripts that need executable permission in '$DIR'..."

# Build find command arguments for script exclusions
declare -a find_exclusion_args=()
for pattern in "${EXEC_EXCLUSION_PATTERNS[@]}"; do
    find_exclusion_args+=("!" "-name" "$pattern")
done

# NOTE: The `-name` predicate in `find` treats dotfiles (`.filename`) just
# like regular files, so "*.sh" will match both "script.sh" and ".script.sh".
# This ensures hidden scripts are correctly identified.
find "$DIR" \
    -type f \
    ! -path "*/.git/*" \
    "${find_exclusion_args[@]}" \
    \( -name "*.sh" -o -exec sh -c 'head -n 1 "$0" | grep -Eq "$1"' {} "$SHEBANG_PATTERN" \; \) \
    ! -perm -u=x \
    -print0 > "$TEMP_FILE_ADD"

# Process files to make them executable
if [ -s "$TEMP_FILE_ADD" ]; then
    mapfile -d '' files_to_process < "$TEMP_FILE_ADD"
    INFO "Found ${#files_to_process[@]} script(s) to make executable. Processing..."
    for file in "${files_to_process[@]}"; do
        INFO "Attempting: chmod u+x '$file'"
        if chmod u+x "$file"; then
            GLOW "Success: made '$file' executable."
            files_made_executable=$((files_made_executable + 1))
        else
            BUG "Failure: could not make '$file' executable."
            total_failures=$((total_failures + 1))
        fi
    done
else
    GLOW "No scripts found requiring executable permission."
fi
printf '\n'

# ==============================================================================
# PHASE 2: REMOVE EXECUTABLE PERMISSION FROM NON-SCRIPTS
# ==============================================================================
INFO "PHASE 2: Searching for non-script files with executable permission..."

# Build find command arguments for non-executable patterns
declare -a find_non_exec_args=()
if [ ${#NON_EXEC_PATTERNS[@]} -gt 0 ]; then
    # The first pattern needs to be without -o
    find_non_exec_args+=("-name" "${NON_EXEC_PATTERNS[0]}")
    # Add the rest of the patterns with -o
    for ((i=1; i<${#NON_EXEC_PATTERNS[@]}; i++)); do
        find_non_exec_args+=("-o" "-name" "${NON_EXEC_PATTERNS[i]}")
    done
fi

# NOTE: As with the previous find command, the `-name` predicates below
# will correctly match hidden files (e.g., "*.md" matches ".releasenotes.md").
find "$DIR" \
    -type f \
    -perm /a=x \
    ! -path "*/.git/*" \
    \( "${find_non_exec_args[@]}" \) \
    -print0 > "$TEMP_FILE_REMOVE"

# Process files to make them non-executable
if [ -s "$TEMP_FILE_REMOVE" ]; then
    mapfile -d '' files_to_process < "$TEMP_FILE_REMOVE"
    INFO "Found ${#files_to_process[@]} non-script file(s) to make non-executable. Processing..."
    for file in "${files_to_process[@]}"; do
        INFO "Attempting: chmod a-x '$file'"
        if chmod a-x "$file"; then
            GLOW "Success: removed executable permission from '$file'."
            files_made_non_executable=$((files_made_non_executable + 1))
        else
            BUG "Failure: could not remove executable permission from '$file'."
            total_failures=$((total_failures + 1))
        fi
    done
else
    GLOW "No non-script files found with incorrect executable permission."
fi
printf '\n'

# ==============================================================================
# SUMMARY
# ==============================================================================
INFO "Summary:"
GLOW "  Scripts made executable: $files_made_executable"
GLOW "  Non-scripts made non-executable: $files_made_non_executable"

if [ "$total_failures" -gt 0 ]; then
    BUG "  Total operations failed: $total_failures"
    exit 1
else
    GLOW "  All operations completed successfully."
    exit 0
fi
