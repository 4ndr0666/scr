#!/usr/bin/env sh
# shellcheck disable=all

# File: pentest.sh
# Author: 4ndr0666
# Date: 10-16-24
# Description: Gathers system information and checks for potential misconfigurations.
# Usage: sudo ./security_audit.sh <keyword>

# ============================== // PENTEST.SH //
# Check for root privileges
if [[ $EUID -ne 0 ]]; then
   echo -e "\033[1;31mThis script must be run as root. Use sudo.\033[0m" 
   exit 1
fi

# Check if a keyword is provided
if [ $# -eq 0 ]; then
    echo -e "\033[1;33mUsage: $0 <keyword>\033[0m"
    exit 1
fi

SEARCH_KEYWORD="$1"

# Define colors
RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
CYAN="\033[1;36m"
RESET="\033[0m"

# Define Output File
OUTPUT_FILE="/tmp/security_audit_$(date '+%Y%m%d_%H%M%S').log"
echo -e "\033[1;35mSecurity Audit Started at $(date)\033[0m" | tee -a "$OUTPUT_FILE"
exec > >(tee -a "$OUTPUT_FILE") 2>&1

# Function to print headers
print_header() {
    local color="$1"
    local text="$2"
    echo -e "${color}${text}${RESET}"
}

# Function to check command success
check_success() {
    if [[ $1 -eq 0 ]]; then
        echo -e "${GREEN}✅ Success:${RESET} $2"
    else
        echo -e "${RED}❌ Failed:${RESET} $2"
    fi
}

# =====================================================
# Kernel and Distribution Release Details
# =====================================================
print_header "$RED" "[+] Kernel and Distribution Release Details"
uname -a
check_success $? "uname -a"

cat /etc/os-release
check_success $? "cat /etc/os-release"
echo ""

# =====================================================
# System Information
# =====================================================
print_header "$RED" "[+] System Information"

# Hostname
print_header "$GREEN" "[+] Hostname"
hostname
check_success $? "hostname"
echo ""

# Networking Details
print_header "$GREEN" "[+] Networking Details"

# Current IP
print_header "$GREEN" "[+] Current IP Addresses"
ip a | grep 'inet'
check_success $? "ip a | grep 'inet'"
echo ""

# Default Route Details
print_header "$GREEN" "[+] Default Route Details"
ip route
check_success $? "ip route"
echo ""

# DNS Server Information
print_header "$GREEN" "[+] DNS Server Information"
cat /etc/resolv.conf
check_success $? "cat /etc/resolv.conf"
echo ""

# =====================================================
# User Information
# =====================================================
print_header "$RED" "[+] User Information"

# Current User Details
print_header "$GREEN" "[+] Current User Details"
whoami
check_success $? "whoami"
echo ""

# Last Logged On Users
print_header "$GREEN" "[+] Last Logged On Users"
last
check_success $? "last"
echo ""

# Shows Users Currently Logged In
print_header "$GREEN" "[+] Users Currently Logged In"
who
check_success $? "who"
echo ""

# List All Users Including UID/GID Information
print_header "$GREEN" "[+] All Users with UID/GID Information"
cat /etc/passwd
check_success $? "cat /etc/passwd"
echo ""

# List Root Accounts
print_header "$GREEN" "[+] Root Accounts"
grep "^root:" /etc/passwd
check_success $? "grep '^root:' /etc/passwd"
echo ""

# Extract Password Policies and Hash Storage Method Information
print_header "$GREEN" "[+] Password Policies and Hash Storage Method Information"
grep "^password" /etc/pam.d/* 2>/dev/null
check_success $? "grep '^password' /etc/pam.d/*"
echo ""

# Check Umask Value
print_header "$GREEN" "[+] Current Umask Value"
umask
check_success $? "umask"
echo ""

# Attempt to Read Restricted Files (e.g., /etc/shadow)
print_header "$RED" "[+] Attempting to Read /etc/shadow (Requires Root)"
cat /etc/shadow 2>/dev/null
check_success $? "cat /etc/shadow"
echo ""

# List Current Users' History Files (e.g., .bash_history, .nano_history)
print_header "$RED" "[+] Current Users' History Files"
find /home \( -name ".bash_history" -o -name ".nano_history" \) -exec ls -la {} \; 2>/dev/null
check_success $? "find /home for history files"
echo ""

# Which Users Have Recently Used Sudo
print_header "$RED" "[+] Users Who Have Recently Used Sudo"
grep "sudo" /var/log/auth.log
check_success $? "grep 'sudo' /var/log/auth.log"
echo ""

# Determine if /etc/sudoers is Accessible
print_header "$RED" "[+] /etc/sudoers Accessibility"
ls -la /etc/sudoers
check_success $? "ls -la /etc/sudoers"
echo ""

# Are Known 'Good' Breakout Binaries Available via Sudo (e.g., nmap, vim)
print_header "$RED" "[+] 'Good' Breakout Binaries Available via Sudo"
sudo -l | grep -E "nmap|vim"
check_success $? "sudo -l | grep -E 'nmap|vim'"
echo ""

# Is Root’s Home Directory Accessible
print_header "$RED" "[+] Root's Home Directory Accessibility"
ls -ld /root
check_success $? "ls -ld /root"
echo ""

# List Permissions for /home/
print_header "$RED" "[+] Permissions for /home/"
ls -ld /home
check_success $? "ls -ld /home"
echo ""

# Display Current $PATH
print_header "$RED" "[+] Current \$PATH"
echo "$PATH"
check_success $? "echo \$PATH"
echo ""

# =====================================================
# Cron Jobs
# =====================================================
print_header "$RED" "[+] Cron Jobs"

# List All Cron Jobs
print_header "$GREEN" "[+] Listing All Cron Jobs"
crontab -l
check_success $? "crontab -l"
echo ""

# Locate All World-Writable Cron Jobs
print_header "$GREEN" "[+] World-Writable Cron Jobs"
find /etc/cron* -perm -0002 -type f -exec ls -la {} \; 2>/dev/null
check_success $? "find /etc/cron* -perm -0002 -type f"
echo ""

# Locate Cron Jobs Owned by Other Users
print_header "$GREEN" "[+] Cron Jobs Owned by Non-Root Users"
find /etc/cron* ! -user root -type f -exec ls -la {} \; 2>/dev/null
check_success $? "find /etc/cron* ! -user root -type f"
echo ""

# =====================================================
# Systemd Timers
# =====================================================
print_header "$RED" "[+] Systemd Timers"

# List Active and Inactive Systemd Timers
print_header "$GREEN" "[+] Active and Inactive Systemd Timers"
systemctl list-timers --all
check_success $? "systemctl list-timers --all"
echo ""

# =====================================================
# Processes and Permissions
# =====================================================
print_header "$RED" "[+] Processes and Permissions"

# List Running Processes
print_header "$GREEN" "[+] Running Processes"
ps aux
check_success $? "ps aux"
echo ""

# Lookup and List Process Binaries and Associated Permissions
print_header "$GREEN" "[+] Process Binaries and Permissions"
ps aux --sort=-%cpu | awk '{print $11}' | xargs -r ls -la 2>/dev/null
check_success $? "List process binaries and permissions"
echo ""

# List Init.d Binary Permissions
print_header "$GREEN" "[+] Init.d Binary Permissions"
ls -la /etc/init.d/* 2>/dev/null
check_success $? "ls -la /etc/init.d/*"
echo ""

# =====================================================
# SUID/GUID Files
# =====================================================
print_header "$RED" "[+] SUID/GUID Files"

# Locate All SUID/GUID Files
print_header "$GREEN" "[+] All SUID/GUID Files"
find / -perm /4000 -type f 2>/dev/null
check_success $? "find / -perm /4000 -type f"
echo ""

# Locate All World-Writable SUID/GUID Files
print_header "$GREEN" "[+] World-Writable SUID/GUID Files"
find / -perm /6000 -type f 2>/dev/null
check_success $? "find / -perm /6000 -type f"
echo ""

# Locate All SUID/GUID Files Owned by Root
print_header "$GREEN" "[+] SUID/GUID Files Owned by Root"
find / -user root -perm /4000 -type f 2>/dev/null
check_success $? "find / -user root -perm /4000 -type f"
echo ""

# Locate 'Interesting' SUID/GUID Files (e.g., nmap, vim)
print_header "$GREEN" "[+] 'Interesting' SUID/GUID Files (nmap, vim)"
find / -user root -perm /4000 -type f \( -name "nmap" -o -name "vim" \) 2>/dev/null
check_success $? "find / -user root -perm /4000 -type f (nmap, vim)"
echo ""

# Locate Files with POSIX Capabilities
print_header "$GREEN" "[+] Files with POSIX Capabilities"
getcap -r / 2>/dev/null
check_success $? "getcap -r /"
echo ""

# List All World-Writable Directories (excluding sticky bit)
print_header "$GREEN" "[+] World-Writable Directories (No Sticky Bit)"
find / -xdev -type d \( -perm -0002 -a ! -perm -1000 \) -print
check_success $? "find / -xdev -type d \( -perm -0002 -a ! -perm -1000 \)"
echo ""

# =====================================================
# Specific File Searches
# =====================================================
print_header "$RED" "[+] Specific File Searches"

# Find/List All Accessible *.plan Files and Display Contents
print_header "$GREEN" "[+] Accessible *.plan Files and Their Contents"
find / -name "*.plan" -exec echo "File: {}" \; -exec cat {} \; 2>/dev/null
check_success $? "find / -name '*.plan' -exec cat {} \;"
echo ""

# Find/List All Accessible *.rhosts Files and Display Contents
print_header "$GREEN" "[+] Accessible *.rhosts Files and Their Contents"
find / -name "*.rhosts" -exec echo "File: {}" \; -exec cat {} \; 2>/dev/null
check_success $? "find / -name '*.rhosts' -exec cat {} \;"
echo ""

# =====================================================
# Network Services
# =====================================================
print_header "$RED" "[+] Network Services"

# Show NFS Server Details
print_header "$GREEN" "[+] NFS Server Details"
showmount -e
check_success $? "showmount -e"
echo ""

# =====================================================
# Configuration and Backup Files
# =====================================================
print_header "$RED" "[+] Configuration and Backup Files"

# Locate *.conf and *.log Files Containing Keyword
print_header "$GREEN" "[+] *.conf and *.log Files Containing Keyword: $SEARCH_KEYWORD"
grep -r "$SEARCH_KEYWORD" /etc/*.conf /var/log/* 2>/dev/null
check_success $? "grep -r '$SEARCH_KEYWORD' /etc/*.conf /var/log/*"
echo ""

# List All *.conf Files Located in /etc
print_header "$GREEN" "[+] All *.conf Files in /etc"
ls -la /etc/*.conf 2>/dev/null
check_success $? "ls -la /etc/*.conf"
echo ""

# .bak File Search
print_header "$GREEN" "[+] .bak Files"
find / -name "*.bak" -exec ls -la {} \; 2>/dev/null
check_success $? "find / -name '*.bak' -exec ls -la {} \;"
echo ""

# Locate Mail
print_header "$GREEN" "[+] Mail Files"
find / -name "mail" -exec ls -la {} \; 2>/dev/null
check_success $? "find / -name 'mail' -exec ls -la {} \;"
echo ""

# =====================================================
# Container Checks
# =====================================================
print_header "$RED" "[+] Container Environment Checks"

# Check if in a Docker Container
print_header "$GREEN" "[+] Checking for Docker Container"
if grep -q "docker" /proc/self/cgroup; then
    echo -e "${GREEN}✅ Running inside a Docker container.${RESET}"
else
    echo -e "${YELLOW}⚠️ Not running inside a Docker container.${RESET}"
fi
check_success $? "grep 'docker' /proc/self/cgroup"
echo ""

# Check if Docker is Installed on Host
print_header "$GREEN" "[+] Checking if Docker is Installed on Host"
if command -v docker >/dev/null 2>&1; then
    echo -e "${GREEN}✅ Docker is installed.${RESET}"
else
    echo -e "${YELLOW}⚠️ Docker is not installed.${RESET}"
fi
check_success $? "command -v docker"
echo ""

# Check if in an LXC Container
print_header "$GREEN" "[+] Checking for LXC Container"
if grep -q "lxc" /proc/self/cgroup; then
    echo -e "${GREEN}✅ Running inside an LXC container.${RESET}"
else
    echo -e "${YELLOW}⚠️ Not running inside an LXC container.${RESET}"
fi
check_success $? "grep 'lxc' /proc/self/cgroup"
echo ""

echo -e "\033[1;35mSecurity Audit Completed at $(date)\033[0m"
