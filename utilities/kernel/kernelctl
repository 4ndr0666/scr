#!/bin/bash

# Define necessary paths
BOOT_DIR="/boot"
EFI_DIR="/boot/efi"
KERNEL_PREFIX="vmlinuz"
CURRENT_KERNEL=$(uname -r)
CURRENT_MAJOR_VERSION=$(echo $CURRENT_KERNEL | cut -d '-' -f 1)

# Log and print function
log_and_print() {
    echo -e "$1"
}

 # --- // AUTO_ESCALATE:
  if [ "$(id -u)" -ne 0 ]; then
        sudo "$0" "$@"
      exit $?
  fi
  sleep 1
  echo "üíÄWARNINGüíÄ - you are now operating as root..."
  sleep 1
  echo
  
# Function to identify installed kernels
identify_kernels() {
    log_and_print "‚û°Ô∏è Identifying installed kernels..."
    installed_kernels=$(ls ${BOOT_DIR}/${KERNEL_PREFIX}* | awk -F "${KERNEL_PREFIX}" '{print $2}' | tr -d '-')
    log_and_print "‚û°Ô∏è Installed kernels: ${installed_kernels}"
}

# Function to identify kernels to remove
identify_kernels_to_remove() {
    log_and_print "‚û°Ô∏è Identifying kernels to remove..."
    for kernel in $installed_kernels; do
        if [[ "$kernel" != "$CURRENT_MAJOR_VERSION" ]]; then
            kernels_to_remove+=("$kernel")
        fi
    done
    log_and_print "‚û°Ô∏è Kernels identified for removal: ${kernels_to_remove[*]}"
}

# Function to remove old kernels
remove_old_kernels() {
    if [ ${#kernels_to_remove[@]} -eq 0 ]; then
        log_and_print "‚û°Ô∏è No old kernels to remove."
        return
    fi

    log_and_print "‚û°Ô∏è Removing old kernels..."
    for kernel in "${kernels_to_remove[@]}"; do
        rm -f "${BOOT_DIR}/${KERNEL_PREFIX}-${kernel}"
        rm -f "${BOOT_DIR}/initramfs-${kernel}.img"
        log_and_print "‚úîÔ∏è Removed kernel: ${kernel}"
    done
}

# Function to check EFI entries
check_and_clean_efi_entries() {
    if [ ! -d "$EFI_DIR" ]; then
        log_and_print "‚ùå EFI directory not found. Skipping EFI cleanup."
        return
    fi

    log_and_print "‚û°Ô∏è Checking EFI entries..."
    efi_entries=$(ls "$EFI_DIR" | grep "$KERNEL_PREFIX" | grep -v "$CURRENT_MAJOR_VERSION")
    
    if [ -z "$efi_entries" ]; then
        log_and_print "‚û°Ô∏è No old EFI entries to remove."
        return
    fi

    log_and_print "‚û°Ô∏è Removing old EFI entries..."
    for entry in $efi_entries; do
        rm -rf "${EFI_DIR}/${entry}"
        log_and_print "‚úîÔ∏è Removed EFI entry: ${entry}"
    done
}

# Main function to orchestrate cleanup
clean_kernels() {
    identify_kernels
    identify_kernels_to_remove
    remove_old_kernels
    check_and_clean_efi_entries
    log_and_print "‚úîÔ∏è Kernel cleanup completed."
}

# Execute the main function
clean_kernels
