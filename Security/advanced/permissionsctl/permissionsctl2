#!/usr/bin/env bash

# Permissions Management Script
# Author: [Your Name]
# Description:
# Manages file and directory permissions and ownerships based on a policy.
# Intelligently includes custom paths from the user's home directory.

set -euo pipefail

# --- Configuration ---
CONFIG_FILE="/etc/permissions_policy.yaml"     # Path to the permissions policy file
LOG_FILE="/var/log/permissions_management.log"
BACKUP_DIR_BASE="/Nas/Backups/permissions"     # Base directory for backups
CRON_JOB="@daily root $0 audit"                # Cron job entry

# Logging function
log_action() {
    local level="$1"
    local message="$2"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$level] $message" | sudo tee -a "$LOG_FILE" >/dev/null
}

print_help() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  setup       Set up environment" 
    echo "  backup      Save all permissions"
    echo "  audit       Perform security audit"
    echo "  fix         Apply factory defaults"
    exit 0
}

# List of critical system directories to include
SYSTEM_DIRS=(
    /bin
    /sbin
    /usr/bin
    /usr/sbin
    /lib
    /lib64
    /etc
    /var
    /opt
    /boot
)

# User's home directory
USER_HOME="/home/andro"

# List of important directories in the home directory to include
HOME_DIRS=(
    "$USER_HOME/.cheater"
    "$USER_HOME/.chatgpt.conf"
    "$USER_HOME/.fzf.zsh"
    "$USER_HOME/.gnupg"
    "$USER_HOME/.gitconfig"
    "$USER_HOME/.gitignore_gloabl"
    "$USER_HOME/.gitmodules"
    "$USER_HOME/.gtkrc-2.0"
    "$USER_HOME/.icons"
    "$USER_HOME/.jd"
    "$USER_HOME/.local"
    "$USER_HOME/.profile"
    "$USER_HOME/.rustup"
    "$USER_HOME/.screenlayout"
    "$USER_HOME/.ssh"
    "$USER_HOME/.themes"
    "$USER_HOME/.Xauthority"
    "$USER_HOME/.Xresources"
    "$USER_HOME/.yarnrc"
    "$USER_HOME/.zsh"
    "$USER_HOME/.zshrc"    
    "$USER_HOME/bin"
    "$USER_HOME/ffmpeg_build"
    "$USER_HOME/ffmpeg_mpv_build"
    "$USER_HOME/ffmpeg_sources"
    "$USER_HOME/mpv_build"
    "$USER_HOME/node_modules"
)

# --- Functions ---

# Install dependencies if not present
install_dependencies() {
    local dependencies=("yq" "pacutils")
    local to_install=()

    for dep in "${dependencies[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            to_install+=("$dep")
        fi
    done

    if [ "${#to_install[@]}" -ne 0 ]; then
        echo "Installing dependencies: ${to_install[*]}"
        sudo pacman -Syu --noconfirm "${to_install[@]}"
    fi
}

# Create necessary directories and set permissions
setup_directories() {
    sudo mkdir -p "$BACKUP_DIR_BASE"
    sudo chown root:root "$BACKUP_DIR_BASE"
    sudo chmod 700 "$BACKUP_DIR_BASE"

    sudo touch "$LOG_FILE"
    sudo chown root:root "$LOG_FILE"
    sudo chmod 600 "$LOG_FILE"
}

setup_cron() {
    if ! sudo crontab -l 2>/dev/null | grep -Fq "$0 audit"; then
        (sudo crontab -l 2>/dev/null; echo "$CRON_JOB") | sudo crontab -
        echo "Cron job added for regular audits."
    else
        echo "Cron job already exists."
    fi
}

show_progress() {
    local current=$1
    local total=$2
    local width=50  # Width of the progress bar
    local progress=$(( current * width / total ))
    local percent=$(( current * 100 / total ))
    local bar=""

    for ((i=0; i<progress; i++)); do
        bar+="#"
    done
    for ((i=progress; i<width; i++)); do
        bar+=" "
    done

    # Move cursor to the beginning of the line with \r
    printf "\r\033[1;36m[%s] %d%%\033[0m" "$bar" "$percent"
}

generate_permissions_policy() {
    echo "Generating permissions policy..."
    local temp_policy="/tmp/permissions_policy.yaml"
    local dir_entries_file="/tmp/permissions_policy_directories.yaml"
    local file_entries_file="/tmp/permissions_policy_files.yaml"

    # Initialize policy file and temporary files
    echo "directories:" > "$temp_policy"
    echo "" > "$dir_entries_file"
    echo "files:" >> "$temp_policy"
    echo "" > "$file_entries_file"

    # Calculate total number of paths
    local total_paths=0
    local current_path=0

    # Collect all paths to be processed
    local all_paths=()

    # Process system directories
    for dir in "${SYSTEM_DIRS[@]}"; do
        if [ -d "$dir" ]; then
            local package_paths
            package_paths=$(sudo pacman -Ql | awk '{print $2}' | grep "^$dir" | sort -u)
            while IFS= read -r path; do
                if [ -e "$path" ]; then
                    all_paths+=("$path")
                fi
            done <<< "$package_paths"
        fi
    done

    # Process important home directories
    for dir in "${HOME_DIRS[@]}"; do
        if [ -e "$dir" ]; then
            local home_paths
            home_paths=$(find "$dir" -type f -o -type d 2>/dev/null | sort -u)
            while IFS= read -r path; do
                if [ -e "$path" ]; then
                    all_paths+=("$path")
                fi
            done <<< "$home_paths"
        fi
    done

    total_paths=${#all_paths[@]}
    echo "Total paths to process: $total_paths"

    # Process all paths and update progress bar
    for path in "${all_paths[@]}"; do
        current_path=$((current_path + 1))
        add_path_to_policy "$path" "$dir_entries_file" "$file_entries_file"
        show_progress "$current_path" "$total_paths"
    done

    # Append the directory and file entries to the policy file
    cat "$dir_entries_file" >> "$temp_policy"
    cat "$file_entries_file" >> "$temp_policy"

    # Clean up temporary files
    rm "$dir_entries_file" "$file_entries_file"

    # Move the temporary policy to the final location
    sudo mv "$temp_policy" "$CONFIG_FILE"
    sudo chown root:root "$CONFIG_FILE"
    sudo chmod 600 "$CONFIG_FILE"

    # Move to a new line after progress bar
    echo ""
    echo "Permissions policy generated at $CONFIG_FILE"
}

add_path_to_policy() {
    local path="$1"
    local dir_entries_file="$2"
    local file_entries_file="$3"
    local owner group perms

    owner=$(stat -c '%U' "$path")
    group=$(stat -c '%G' "$path")
    perms=$(stat -c '%a' "$path")
    path_escaped=$(printf '%q' "$path")

    if [ -d "$path" ]; then
        echo "  - path: \"$path_escaped\"" >> "$dir_entries_file"
        echo "    owner: \"$owner\"" >> "$dir_entries_file"
        echo "    group: \"$group\"" >> "$dir_entries_file"
        echo "    permissions: \"$perms\"" >> "$dir_entries_file"
    elif [ -f "$path" ]; then
        echo "  - path: \"$path_escaped\"" >> "$file_entries_file"
        echo "    owner: \"$owner\"" >> "$file_entries_file"
        echo "    group: \"$group\"" >> "$file_entries_file"
        echo "    permissions: \"$perms\"" >> "$file_entries_file"
    fi
}

# Load permissions policy
load_policy() {
    if ! command -v yq >/dev/null 2>&1; then
        echo "Error: 'yq' is required to parse the YAML configuration."
        exit 1
    fi

    if [ ! -f "$CONFIG_FILE" ]; then
        echo "Error: Configuration file '$CONFIG_FILE' not found."
        exit 1
    fi
}

# Backup current permissions
backup_permissions() {
    local timestamp
    timestamp=$(date +%Y%m%d%H%M%S)
    local backup_dir="$BACKUP_DIR_BASE/$timestamp"
    sudo mkdir -p "$backup_dir"

    yq e '.directories[].path, .files[].path' "$CONFIG_FILE" | while IFS= read -r path; do
        if [ -e "$path" ]; then
            sudo getfacl -pR "$path" > "$backup_dir/$(echo "$path" | tr '/' '_').acl"
        else
            echo "Warning: $path does not exist. Skipping backup."
        fi
    done

    log_action "INFO" "Permissions backed up to $backup_dir"
    echo "Permissions backed up to $backup_dir"
}

# Audit permissions
audit_permissions() {
    local discrepancies=0

    yq e '.directories[] | [.path, .owner, .group, .permissions] | @tsv' "$CONFIG_FILE" | while IFS=$'\t' read -r path owner group perms; do
        if [ -d "$path" ]; then
            local curr_owner curr_group curr_perms
            curr_owner=$(stat -c '%U' "$path")
            curr_group=$(stat -c '%G' "$path")
            curr_perms=$(stat -c '%a' "$path")

            if [ "$curr_owner" != "$owner" ] || [ "$curr_group" != "$group" ] || [ "$curr_perms" != "$perms" ]; then
                echo "Discrepancy found in $path"
                discrepancies=$((discrepancies + 1))
            fi
        else
            echo "Warning: Directory $path does not exist."
            discrepancies=$((discrepancies + 1))
        fi
    done

    yq e '.files[] | [.path, .owner, .group, .permissions] | @tsv' "$CONFIG_FILE" | while IFS=$'\t' read -r path owner group perms; do
        if [ -f "$path" ]; then
            local curr_owner curr_group curr_perms
            curr_owner=$(stat -c '%U' "$path")
            curr_group=$(stat -c '%G' "$path")
            curr_perms=$(stat -c '%a' "$path")

            if [ "$curr_owner" != "$owner" ] || [ "$curr_group" != "$group" ] || [ "$curr_perms" != "$perms" ]; then
                echo "Discrepancy found in $path"
                discrepancies=$((discrepancies + 1))
            fi
        else
            echo "Warning: File $path does not exist."
            discrepancies=$((discrepancies + 1))
        fi
    done

    if [ "$discrepancies" -eq 0 ]; then
        echo "All permissions and ownerships are as per the policy."
    else
        echo "Total discrepancies found: $discrepancies"
        log_action "WARNING" "$discrepancies discrepancies found during audit."
    fi
}

# Fix permissions
fix_permissions() {
    local changes=0

    yq e '.directories[] | [.path, .owner, .group, .permissions] | @tsv' "$CONFIG_FILE" | while IFS=$'\t' read -r path owner group perms; do
        if [ -d "$path" ]; then
            local curr_owner curr_group curr_perms
            curr_owner=$(stat -c '%U' "$path")
            curr_group=$(stat -c '%G' "$path")
            curr_perms=$(stat -c '%a' "$path")

            if [ "$curr_owner" != "$owner" ] || [ "$curr_group" != "$group" ]; then
                sudo chown "$owner:$group" "$path"
                log_action "INFO" "Changed owner/group of $path to $owner:$group"
                changes=$((changes + 1))
            fi            
            if [ "$curr_perms" != "$perms" ]; then
                sudo chmod "$perms" "$path"
                log_action "INFO" "Changed permissions of $path to $perms"
                changes=$((changes + 1))
            fi
        else
            echo "Warning: Directory $path does not exist."
        fi
    done

    yq e '.files[] | [.path, .owner, .group, .permissions] | @tsv' "$CONFIG_FILE" | while IFS=$'\t' read -r path owner group perms; do
        if [ -f "$path" ]; then
            local curr_owner curr_group curr_perms
            curr_owner=$(stat -c '%U' "$path")
            curr_group=$(stat -c '%G' "$path")
            curr_perms=$(stat -c '%a' "$path")

            if [ "$curr_owner" != "$owner" ] || [ "$curr_group" != "$group" ]; then
                sudo chown "$owner:$group" "$path"
                log_action "INFO" "Changed owner/group of $path to $owner:$group"
                changes=$((changes + 1))
            fi
            if [ "$curr_perms" != "$perms" ]; then
                sudo chmod "$perms" "$path"
                log_action "INFO" "Changed permissions of $path to $perms"
                changes=$((changes + 1))
            fi
        else
            echo "Warning: File $path does not exist."
        fi
    done

    if [ "$changes" -eq 0 ]; then
        echo "No changes were necessary."
    else
        echo "Total changes made: $changes"
        log_action "INFO" "Total changes made during fix: $changes"
    fi
}

# Main function
main() {
    # Ensure the script is run as the user 'andro'
    if [ "$(whoami)" != "andro" ]; then
        echo "This script must be run as the user 'andro'."
        exit 1
    fi

    # Parse command-line arguments
    local action="${1:-}"

    case "$action" in
        setup)
            install_dependencies
            setup_directories
            setup_cron
            generate_permissions_policy
            ;;
        backup)
            load_policy
            backup_permissions
            ;;
        audit)
            load_policy
            audit_permissions
            ;;
        fix)
            load_policy
            fix_permissions
            ;;
        *)
            print_help
#            echo "Usage: $0 {setup|backup|audit|fix}"
            exit 1
            ;;
    esac
}

main "$@"
