#!/usr/bin/env bash

# Fail2ban Management Script with Pre-configured Jails
# Author: Adapted by User for Arch Linux

# Define paths
jail_local_file="/etc/fail2ban/jail.local"
apache_jail_file="/etc/fail2ban/jail.d/apache.local"
nginx_jail_file="/etc/fail2ban/jail.d/nginx.local"
postfix_jail_file="/etc/fail2ban/jail.d/postfix.local"

# Define colors for echo
Green_font_prefix="\\033[32m"
Red_font_prefix="\\033[31m"
Font_color_suffix="\\033[0m"
Info="${Green_font_prefix}[Info]${Font_color_suffix}"
Error="${Red_font_prefix}[Error]${Font_color_suffix}"
Tip="${Green_font_prefix}[Tip]${Font_color_suffix}"

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    echo -e "${Error} This script must be run as root."
    exit 1
fi

# Function to install Fail2ban
install_fail2ban() {
    echo -e "${Info} Installing Fail2ban..."
    pacman -Sy fail2ban
}

# Function to update Fail2ban
update_fail2ban() {
    echo -e "${Info} Updating Fail2ban..."
    pacman -Syu fail2ban
}

# Function to uninstall Fail2ban
uninstall_fail2ban() {
    echo -e "${Info} Uninstalling Fail2ban..."
    pacman -Rns fail2ban
}

# Function to start Fail2ban service
start_fail2ban() {
    echo -e "${Info} Starting Fail2ban service..."
    systemctl start fail2ban
    systemctl enable fail2ban
}

# Function to stop Fail2ban service
stop_fail2ban() {
    echo -e "${Info} Stopping Fail2ban service..."
    systemctl stop fail2ban
}

# Function to restart Fail2ban service
restart_fail2ban() {
    echo -e "${Info} Restarting Fail2ban service..."
    systemctl restart fail2ban
}

# Function to enable sshd jail
enable_sshd_jail() {
    echo -e "${Info} Enabling SSHD jail..."
    cat > ${jail_local_file} <<EOF
[sshd]
enabled = true
port    = ssh
filter  = sshd
logpath = /var/log/auth.log
maxretry = 5
EOF
}

# Function to enable Apache jail
enable_apache_jail() {
    echo -e "${Info} Enabling Apache jail..."
    cat > ${apache_jail_file} <<EOF
[apache-auth]
enabled = true
port    = http,https
filter  = apache-auth
logpath = /var/log/apache*/*error.log
maxretry = 5
EOF
}

# Function to enable Nginx jail
enable_nginx_jail() {
    echo -e "${Info} Enabling Nginx jail..."
    cat > ${nginx_jail_file} <<EOF
[nginx-http-auth]
enabled = true
port    = http,https
filter  = nginx-http-auth
logpath = /var/log/nginx/*error.log
maxretry = 5
EOF
}

# Function to enable Postfix jail
enable_postfix_jail() {
    echo -e "${Info} Enabling Postfix jail..."
    cat > ${postfix_jail_file} <<EOF
[postfix]
enabled  = true
port     = smtp,ssmtp
filter   = postfix
logpath  = /var/log/postfix.log
maxretry = 5
EOF
}

# Main menu
echo -e "${Info} Fail2ban Management Script"
echo -e "1. Install Fail2ban\\n2. Update Fail2ban\\n3. Uninstall Fail2ban\\n4. Start Fail2ban Service\\n5. Stop Fail2ban Service\\n6. Restart Fail2ban Service\\n7. Enable SSHD Jail\\n8. Enable Apache Jail\\n9. Enable Nginx Jail\\n10. Enable Postfix Jail"
read -p "Enter choice [1-10]: " choice

case $choice in
    1) install_fail2ban ;;
    2) update_fail2ban ;;
    3) uninstall_fail2ban ;;
    4) start_fail2ban ;;
    5) stop_fail2ban ;;
    6) restart_fail2ban ;;
    7) enable_sshd_jail ;;
    8) enable_apache_jail ;;
    9) enable_nginx_jail ;;
    10) enable_postfix_jail ;;
    *) echo -e "${Error} Invalid choice." ;;
esac
