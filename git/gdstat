#!/usr/bin/env bash
#
# --- // GDSTAT // ========
# Description: This script will recursively traverse all directories under
#              a specified folder and display the names of any dirty files
#              under git control, logging output.
# Version: 2.0
# Usage: gdstat.sh /path/to/root/directory
# Author: 4ndr0666 <github.com/4ndr0666>

# --- //LOG_FILE:
LOG_FILE="/var/log/gdstat.log"

# --- // LOG_WITH_TIMESTAMP:
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# --- // DEFAULT_DIRECTORY (empty for $PWD):
SEARCHPATH=""

# --- // IGNORE_THESE_DIR/FILES:
IGNORE=('Third-Party')

# --- // SOURCE_COLORS.SH:
BASEPATH=$(dirname "$0")
if [[ -f "${BASEPATH}/colors.sh" ]]; then
    . "${BASEPATH}/colors.sh"
else
    heading() {
        echo "---------------------------------------------------------------------"
        echo "  $2"
        echo "---------------------------------------------------------------------"
        echo
    }
fi

clear
heading green "gdstat ${VERSION}"

# Set the search path
if [[ -z "$1" ]]; then
    if [[ -z $SEARCHPATH ]]; then
        SEARCHPATH=$PWD
    fi
else
    if [[ $1 == '-p' ]]; then
        SEARCHPATH=$PWD
    else
        SEARCHPATH="$1"
    fi
fi

if [[ ! -d "$SEARCHPATH" ]]; then
    log_message "The supplied path does not resolve to a valid directory"
    log_message "Aborting..."
    exit 1
fi

cd "$SEARCHPATH"

# Preserve the old input field separator and set new one
OLDIFS=$IFS
IFS=$'\n'

# Find directories with .git
found_dirty=0
dir_count=0
for gitprojpath in `find . -type d -name .git | sort | sed "s/\/\.git//"`; do
    if [ "${#IGNORE}" -gt 0 ]; then
        localpath=${gitprojpath:2}
        pathseg1=$(echo "$localpath" | sed "s/[\/].*//")
        for dir in ${IGNORE[@]}; do
            if [ "$localpath" == "$dir" ] || [ "$pathseg1" == "$dir" ]; then
                continue 2
            fi
        done
    fi

    (( dir_count++))
    pushd . >/dev/null
    cd $gitprojpath

    isdirty=$(git status -s )
    if [ -n "$isdirty" ]; then
        found_dirty=1
        gitstatus=$(git status -s | grep "^.*")
        if [[ $gitprojpath == '.' ]]; then
            log_message "${PWD##*/}"
        else
            log_message "${gitprojpath:2}"
        fi

        for stati in ${gitstatus[@]}; do
            status=${stati:0:2}
            status=${status// /}
            filename=${stati:3}
            filename=${filename// /}
            case $status in
                M)      color="${yellow}"   ;;
                A)      color="${green}"    ;;
                D)      color="${red}"      ;;
                R)      color="${cyan}"     ;;
                C)      color="${mag}"      ;;
                U)      color="${blue}"     ;;
                \?*)    color="${grey}"     ;;
                *)      color="${orange}"   ;;
            esac
            if [ "${#status}" == 1 ]; then padding=" "; else padding=""; fi
            log_message "${color}${status}${padding} ${filename}${reset}"
        done
    fi
    popd >/dev/null
done

log_message "DIRECTORIES CHECKED: $dir_count"

if [[ "$found_dirty" == 0 ]];
then
if [[ $dir_count -eq 1 ]]; then
log_message "${green}Repository is clean!${reset}"
else
log_message "${green}All repositories are clean!${reset}"
fi
else
heading sky "GIT CODES"
log_message " ${yellow}M${reset}  = Modified"
log_message " ${green}A${reset}  = Added"
log_message " ${red}D${reset}  = Deleted"
log_message " ${cyan}R${reset}  = Renamed"
log_message " ${mag}C${reset}  = Copied"
log_message " ${blue}U${reset}  = Updated but unmerged"
log_message " ${orange}XY${reset} = Multi-status"
log_message " ${grey}??${reset} = Untracked"
fi

IFS=$OLDIFS
log_message "gdstat script finished"
