#!/bin/sh -e

usage() {
    printf '%s\n' "Usage: mergebeta [OPTIONS] [files]"
    printf '%s\n' "This script normalizes and merges video files using FFmpeg."
    printf '%s\n\n' "Options:"
    printf '%s\n' "  -o <dir>      Specify output directory for normalized videos (default: ./normalized_videos)."
    printf '%s\n' "  -r <res>      Target resolution for normalization (default: 1920:1080)."
    printf '%s\n' "  -f <fps>      Target frames per second (default: 60)."
    printf '%s\n' "  -c <codec>    Codec for encoding (default: libx264)."
    printf '%s\n' "  -crf <value>  CRF value for video quality (default: 18)."
    printf '%s\n' "  -a <bool>     Remove audio from videos (true/false, default: true)."
    printf '%s\n' "  -p <preset>   Encoding preset for quality and compression efficiency (default: slow)."
    printf '%s\n' "  -h, --help    Display this help message and exit."
    printf '\n%s\n' "Examples:"
    printf '%s\n' "  mergebeta -o ./output -r 1280:720 -f 30 -c libx265 -crf 23 -a false -p veryslow"
    printf '%s\n' "  mergebeta"
}

# Default settings
output_dir="$PWD/merged_video"
target_res="1920:1080"
fps="60"
codec="libx264"
crf="0"
remove_audio=true
preset="fast"

# Parse arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
        -o| --output)
	  output_dir="$1"
	  shift 1 
	  ;;
        -r)
	  target_res="$1"
	  shift 1 
	  ;;
        -f) 
	  fps="$1"
	  shift 1 
	  ;;
        -c) 
	  codec="$1"
	  shift 1
	  ;;
        -crf)
	  crf="$1"
	  shift 1
	  ;;
        -a) 
	  remove_audio="$1"
	  shift 1
	  ;;
        -p) 
	  preset="$1"
	  shift 1
	  ;;
        -h|--help) 
	  usage; 
	  exit 0 
	  ;;
        -*) printf '%s\n' "Unknown option: $1"
	  usage; 
	  exit 1 
	  ;;
         *) 
	  break 
	  ;;  
    esac
    shift
done

# Function to select files if none provided
select_files() {
    if command -v fzf >/dev/null 2>&1; then
        # Print prompt to stderr so it does NOT mix with stdout (which we capture)
        >&2 printf '%s\n' "Please select video files using fzf:"
        selected="$(fzf --multi \
                        --preview 'ffprobe {}' \
                        --preview-window=right:60% \
                        --bind='ctrl-a:select-all+accept' \
                        --height=40%)"
        if [ -z "$selected" ]; then
            printf '%s\n' "No files selected. Exiting."
            exit 1
        fi
        # Output only the selected lines to stdout
        printf '%s\n' "$selected"
    else
        >&2 printf '%s\n' "fzf not found. Please manually specify file paths (space-separated):"
        read -r manual_files
        if [ -z "$manual_files" ]; then
            printf '%s\n' "No files entered. Exiting."
            exit 1
        fi
        # Output exactly what was typed
        printf '%s\n' "$manual_files"
    fi
}

# Gather the files from either arguments or selection
if [ "$#" -eq 0 ]; then
    printf '%s\n' "No files provided. Launching file selection..."
    files="$(select_files)"
else
    # Place each argument on its own line to preserve spacing
    files="$(printf '%s\n' "$@")"
fi

# Verify we actually have something
if [ -z "$files" ]; then
    printf '%s\n' "No files specified or selected. Exiting."
    exit 1
fi

# Validate file existence and generate input list
tmp_list="input.txt"
trap 'rm -f "$tmp_list" 2>/dev/null' EXIT INT TERM
: > "$tmp_list"

valid_files_count=0
while IFS= read -r file; do
    if [ -f "$file" ]; then
        # Quote the file name for FFmpeg's concat demuxer
        printf "file '%s'\n" "$file" >> "$tmp_list"
        valid_files_count=$((valid_files_count + 1))
    else
        printf '%s\n' "Warning: Skipping invalid file - $file"
    fi
done <<EOF
$files
EOF

# Ensure we have at least 1 valid file
if [ "$valid_files_count" -eq 0 ]; then
    printf '%s\n' "Error: No valid input files. Exiting."
    exit 1
fi

# Create the output directory
mkdir -p "$output_dir"
output_file="${output_dir%/}/merged_video.mp4"

# 1) Attempt direct concatenation
# '-safe 0' allows for absolute/relative paths with spaces in concat list
if ffmpeg -safe 0 -f concat -i "$tmp_list" -c copy "$output_file"; then
    printf '%s\n' "Concatenation successful: $output_file"
    exit 0
else
    printf '%s\n' "Direct concatenation failed. Proceeding with normalization..."
fi

# 2) Normalize each file then re-concatenate
normalized_list="input_normalized.txt"
trap 'rm -f "$tmp_list" "$normalized_list" 2>/dev/null' EXIT INT TERM
: > "$normalized_list"

while IFS= read -r file; do
    if [ -f "$file" ]; then
        base_name="$(basename "$file")"
        # e.g. normalized.mp4
        normalized_file="${output_dir%/}/${base_name%.*}_normalized.mp4"

        ffmpeg -i "$file" \
               -vf "scale=$target_res" \
               -r "$fps" \
               -c:v "$codec" \
               -crf "$crf" \
               $( [ "$remove_audio" = true ] && printf '%s' "-an" ) \
               -preset "$preset" \
               "$normalized_file"

        printf "file '%s'\n" "$normalized_file" >> "$normalized_list"
    fi
done <<EOF
$files
EOF

ffmpeg -safe 0 -f concat -i "$normalized_list" \
       -c:v "$codec" \
       -crf "$crf" \
       -preset "$preset" \
       "$output_file"

printf '%s\n' "Files successfuly merged as: $output_file"
exit 0
