#!/usr/bin/env bash
# Author: 4ndr0666
# ffxd — Modular, XDG-compliant, minimal FFmpeg video Swiss Army Knife

set -euo pipefail
IFS=$'\n\t'

# ──────────────────────────────
# XDG & Runtime Setup
# ──────────────────────────────

# Define XDG base directories, with fallbacks
declare -r XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
declare -r XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
declare -r XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/tmp}"

# Ensure base runtime directory exists for temp files
mkdir -p "$XDG_RUNTIME_DIR/ffxd" || {
	echo "Error: Could not create runtime directory $XDG_RUNTIME_DIR/ffxd" >&2
	exit 1
}

# Create a unique temp dir for this run
declare TEMP_DIR
if ! TEMP_DIR=$(mktemp -d "$XDG_RUNTIME_DIR/ffxd/ffxd.XXXXXX"); then
	echo "Error: Could not create temporary directory" >&2
	exit 1
fi
declare -r TEMP_DIR

# Auto-cleanup on exit
trap 'rm -rf -- "$TEMP_DIR"' EXIT

# ──────────────────────────────
# Globals and Defaults
# ──────────────────────────────

declare ADVANCED=false      # Interactive prompt (future)
declare VERBOSE=false       # Verbose logging
declare BULK=false          # Bulk process mode
declare NOAUDIO=false       # Remove audio streams
declare MAX1080=false       # Limit max video height to 1080p
declare OUTPUT_DIR          # Output directory
OUTPUT_DIR=$(pwd)
declare FPS=""              # Target frame rate
declare PTS=""              # Playback speed factor
declare INTERPOLATE=false   # Enable motion interpolation
declare -a COMMAND_ARGS=()  # Holds parsed command and arguments

# ──────────────────────────────
# Logging Functions
# ──────────────────────────────

log_verbose() {
	# Log a verbose message if VERBOSE is set
	if "$VERBOSE"; then
		echo "VERBOSE: $*" >&2
	fi
}

log_error() {
	# Log an error message to stderr
	echo "ERROR: $*" >&2
}

# ──────────────────────────────
# FFmpeg Option Builder
# ──────────────────────────────

build_ffmpeg_options() {
	# Build an array of ffmpeg options from global flags
	local -a ffmpeg_opts=()
	local -a video_filters=()
	local -a audio_filters=()
	local pts_val="$PTS"

	if "$NOAUDIO"; then ffmpeg_opts+=("-an"); fi

	if "$MAX1080"; then
		video_filters+=("scale='min(iw,1920):min(ih,1080):force_original_aspect_ratio=decrease'")
	fi

	if [[ -n "$FPS" ]]; then
		ffmpeg_opts+=("-r" "$FPS")
	fi

	if [[ -n "$pts_val" ]]; then
		video_filters+=("setpts=$pts_val*PTS")
		if ! "$NOAUDIO"; then
			if (($(echo "$pts_val >= 0.5 && $pts_val <= 2.0" | bc -l))); then
				audio_filters+=("atempo=1/$pts_val")
			else
				log_error "Audio speed adjustment (atempo) requires PTS between 0.5 and 2.0. Skipping audio adjustment."
			fi
		fi
	fi

	if "$INTERPOLATE"; then
		if [[ -z "$FPS" ]]; then
			log_error "Motion interpolation requires a target frame rate (-f/--fps)."
			return 1
		fi
		video_filters+=("minterpolate='mi_mode=mci:mc_mode=aobmc:vsbmc=1:fps=$FPS'")
	fi

	# Add video filter(s) if present
	if [[ ${#video_filters[@]} -gt 0 ]]; then
		ffmpeg_opts+=("-vf" "$(IFS=,; echo "${video_filters[*]}")")
	fi
	# Add audio filter(s) if present
	if [[ ${#audio_filters[@]} -gt 0 ]]; then
		ffmpeg_opts+=("-af" "$(IFS=,; echo "${audio_filters[*]}")")
	fi
	# Verbose ffmpeg flag
	if "$VERBOSE"; then
		ffmpeg_opts+=("-v" "info")
	fi
	# Output array with null separation for robust parsing
	printf "%s\n" "${ffmpeg_opts[@]}" | tr '\n' '\0'
	return 0
}

# ──────────────────────────────
# Option Parsing
# ──────────────────────────────

parse_global_options() {
	log_verbose "Parsing global options: $*"
	local -a remaining_args=()
	local arg

	while [[ $# -gt 0 ]]; do
		arg="$1"
		case "$arg" in
		-a|--advanced)   ADVANCED=true ;;
		-v|--verbose)    VERBOSE=true ;;
		-b|--bulk)       BULK=true ;;
		-n|--noaudio)    NOAUDIO=true ;;
		-m|--max1080)    MAX1080=true ;;
		-o|--output-dir)
			if [[ $# -lt 2 || "$2" =~ ^- ]]; then
				log_error "Option '$arg' requires a directory argument."
				show_help; exit 1
			fi
			OUTPUT_DIR="$2"; shift ;;
		-f|--fps)
			if [[ $# -lt 2 || "$2" =~ ^- ]] || ! [[ "$2" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
				log_error "Option '$arg' requires a number." ; show_help ; exit 1
			fi
			FPS="$2"; shift ;;
		-p|--pts)
			if [[ $# -lt 2 || "$2" =~ ^- ]] || ! [[ "$2" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
				log_error "Option '$arg' requires a number." ; show_help ; exit 1
			fi
			PTS="$2"; shift ;;
		-i|--interpolate) INTERPOLATE=true ;;
		--)
			shift ; remaining_args+=("$@"); break ;;
		-*) log_error "Unknown global option: $arg"; show_help; exit 1 ;;
		*)  remaining_args+=("$@"); break ;;
		esac
		shift
	done

	COMMAND_ARGS=("${remaining_args[@]}")
	log_verbose "Remaining arguments: ${COMMAND_ARGS[*]}"
}

# ──────────────────────────────
# Help Message
# ──────────────────────────────

show_help() {
	cat <<EOH
Usage: ffxd [global options] <command> [args]
Commands:
  process <input(s)>   Process video file(s) with global options.
  merge <input(s)>     Merge multiple video files into one.
  composite <input(s)> Composite multiple video files into a grid.
  looperang <input>    Create a boomerang effect video.
  slowmo <input>       Create a slow-motion video.
  fix <input>          Fix common video issues (e.g., VFR to CFR).
  clean                Clean up ffxd temporary/cache files.
  probe <input>        Show media information using ffprobe.
  help                 Show this help message.
Global options:
  -a, --advanced        Interactive advanced prompt (future).
  -v, --verbose         Verbose output.
  -b, --bulk            Process multiple inputs sequentially (for 'process').
  -n, --noaudio         Remove audio streams from output.
  -m, --max1080         Enforce 1080p maximum height for video.
  -o, --output-dir DIR  Output directory (defaults to current directory).
  -f, --fps FPS         Force constant frame rate (e.g., 30, 60). Required for interpolation.
  -p, --pts FACTOR      Adjust playback speed (e.g., 0.5 for half speed, 2.0 for double speed).
  -i, --interpolate     Enable motion interpolation (requires -f/--fps).
EOH
}

# ──────────────────────────────
# Commands
# ──────────────────────────────

cmd_process() {
	log_verbose "process: $*"
	local -a inputs=("$@")
	local input_file output_file base_name ext
	local -a ffmpeg_common_opts

	if [[ ${#inputs[@]} -eq 0 ]]; then
		log_error "Command 'process' requires at least one input file."
		echo "Usage: ffxd process [global options] <input(s)>" >&2
		exit 1
	fi

	mkdir -p "$OUTPUT_DIR" || { log_error "Could not create output directory: $OUTPUT_DIR"; exit 1; }

	local -a common_opts_output
	read -r -d '' -a common_opts_output < <(build_ffmpeg_options; printf '\0') || true

	if [[ ${#common_opts_output[@]} -eq 0 && "$INTERPOLATE" == "true" && -z "$FPS" ]]; then
		exit 1
	fi
	ffmpeg_common_opts=("${common_opts_output[@]}")

	if "$BULK"; then
		for input_file in "${inputs[@]}"; do
			if [[ ! -f "$input_file" ]]; then
				log_error "Input file not found: $input_file. Skipping."; continue
			fi
			base_name=$(basename "$input_file")
			ext="${base_name##*.}"
			base_name="${base_name%.*}"
			output_file="$OUTPUT_DIR/${base_name}_processed.$ext"
			local -a ffmpeg_cmd=(ffmpeg -y -i "$input_file" "${ffmpeg_common_opts[@]}" "$output_file")
			log_verbose "Executing: ${ffmpeg_cmd[*]}"
			if ! "${ffmpeg_cmd[@]}"; then
				log_error "FFmpeg command failed for '$input_file'."; exit 1
			fi
		done
	else
		if [[ ${#inputs[@]} -gt 1 ]]; then
			log_error "Non-bulk mode expects only one input file. Received ${#inputs[@]}."; exit 1
		fi
		input_file="${inputs[0]}"
		if [[ ! -f "$input_file" ]]; then log_error "Input file not found: $input_file."; exit 1; fi
		base_name=$(basename "$input_file")
		ext="${base_name##*.}"
		base_name="${base_name%.*}"
		output_file="$OUTPUT_DIR/${base_name}_processed.$ext"
		local -a ffmpeg_cmd=(ffmpeg -y -i "$input_file" "${ffmpeg_common_opts[@]}" "$output_file")
		log_verbose "Executing: ${ffmpeg_cmd[*]}"
		if ! "${ffmpeg_cmd[@]}"; then log_error "FFmpeg command failed for '$input_file'."; exit 1; fi
	fi
}

cmd_merge() {
	log_verbose "merge: $*"
	local -a inputs=("$@")
	local output_file="$OUTPUT_DIR/merged_output.mp4"
	local concat_list="$TEMP_DIR/concat_list.txt"
	local input_file

	if [[ ${#inputs[@]} -lt 2 ]]; then
		log_error "Command 'merge' requires at least two input files."
		echo "Usage: ffxd merge [global options] <input1> <input2> [input...]" >&2
		exit 1
	fi

	for input_file in "${inputs[@]}"; do
		if [[ ! -f "$input_file" ]]; then log_error "Input file not found: $input_file."; exit 1; fi
	done

	mkdir -p "$OUTPUT_DIR" || { log_error "Could not create output directory: $OUTPUT_DIR"; exit 1; }

	printf "file '%s'\n" "${inputs[@]}" >"$concat_list" || { log_error "Could not create concat list file: $concat_list"; exit 1; }

	local -a ffmpeg_common_opts
	read -r -d '' -a ffmpeg_common_opts < <(build_ffmpeg_options; printf '\0') || true

	# Filter out -vf/-af from options for stream copy
	local -a filtered_common_opts=()
	local skip_next=false
	for opt in "${ffmpeg_common_opts[@]}"; do
		if "$skip_next"; then skip_next=false; continue; fi
		if [[ "$opt" == "-vf" || "$opt" == "-af" ]]; then skip_next=true; continue; fi
		filtered_common_opts+=("$opt")
	done

	local -a ffmpeg_cmd=(
		ffmpeg -y -f concat -safe 0 -i "$concat_list" -c copy "${filtered_common_opts[@]}" "$output_file"
	)
	log_verbose "Executing: ${ffmpeg_cmd[*]}"
	if ! "${ffmpeg_cmd[@]}"; then log_error "FFmpeg command failed for merge operation."; exit 1; fi
}

cmd_composite() {
	log_verbose "composite: $*"
	local -a inputs=("$@")
	local output_file="$OUTPUT_DIR/composite_output.mp4"
	local num_inputs=${#inputs[@]}
	local filter_complex=""
	local output_video_stream_name="outputv"
	local output_audio_stream_name="outputa"
	local input_file

	if [[ "$num_inputs" -eq 0 ]]; then
		log_error "Command 'composite' requires at least one input file."
		echo "Usage: ffxd composite [global options] <input(s)>" >&2
		exit 1
	fi

	for input_file in "${inputs[@]}"; do
		if [[ ! -f "$input_file" ]]; then log_error "Input file not found: $input_file."; exit 1; fi
	done

	mkdir -p "$OUTPUT_DIR" || { log_error "Could not create output directory: $OUTPUT_DIR"; exit 1; }

	local -a ffmpeg_common_opts_raw
	read -r -d '' -a ffmpeg_common_opts_raw < <(build_ffmpeg_options; printf '\0') || true

	local -a video_filters_from_opts=()
	local -a audio_filters_from_opts=()
	local -a remaining_common_opts=()
	local skip_next=false
	for opt in "${ffmpeg_common_opts_raw[@]}"; do
		if "$skip_next"; then skip_next=false; continue; fi
		case "$opt" in
		"-vf") video_filters_from_opts+=("$2"); skip_next=true ;;
		"-af") audio_filters_from_opts+=("$2"); skip_next=true ;;
		*)     remaining_common_opts+=("$opt") ;;
		esac
	done

	case "$num_inputs" in
	1) filter_complex="[0:v]null[${output_video_stream_name}];"; if ! "$NOAUDIO"; then filter_complex+="[0:a]anull[${output_audio_stream_name}]"; fi ;;
	2) filter_complex="[0:v][1:v]hstack=inputs=2[${output_video_stream_name}];"; if ! "$NOAUDIO"; then filter_complex+="[0:a][1:a]amerge=inputs=2[${output_audio_stream_name}]"; fi ;;
	3) filter_complex="[0:v][1:v][2:v]vstack=inputs=3[${output_video_stream_name}];"; if ! "$NOAUDIO"; then filter_complex+="[0:a][1:a][2:a]amerge=inputs=3[${output_audio_stream_name}]"; fi ;;
	4) filter_complex="[0:v][1:v][2:v][3:v]xstack=inputs=4:layout=0_0|w0_0|0_h0|w0_h0[${output_video_stream_name}];"; if ! "$NOAUDIO"; then filter_complex+="[0:a][1:a][2:a][3:a]amerge=inputs=4[${output_audio_stream_name}]"; fi ;;
	*) log_error "Composite currently supports 1–4 input files."; exit 1 ;;
	esac

	local final_video_stream_name="$output_video_stream_name"
	if [[ ${#video_filters_from_opts[@]} -gt 0 ]]; then
		filter_complex+="[${output_video_stream_name}]$(IFS=,; echo "${video_filters_from_opts[*]}")[final_v];"
		final_video_stream_name="final_v"
	fi

	local final_audio_stream_name="$output_audio_stream_name"
	if [[ ${#audio_filters_from_opts[@]} -gt 0 && ! "$NOAUDIO" ]]; then
		filter_complex+="[${output_audio_stream_name}]$(IFS=,; echo "${audio_filters_from_opts[*]}")[final_a]"
		final_audio_stream_name="final_a"
	fi

	local -a ffmpeg_cmd=(ffmpeg -y)
	for input_file in "${inputs[@]}"; do ffmpeg_cmd+=("-i" "$input_file"); done
	ffmpeg_cmd+=(-filter_complex "$filter_complex" -map "[${final_video_stream_name}]")
	if ! "$NOAUDIO"; then ffmpeg_cmd+=("-map" "[${final_audio_stream_name}]"); fi
	ffmpeg_cmd+=("${remaining_common_opts[@]}" "$output_file")
	log_verbose "Executing: ${ffmpeg_cmd[*]}"
	if ! "${ffmpeg_cmd[@]}"; then log_error "FFmpeg command failed for composite operation."; exit 1; fi
}

cmd_looperang() {
	log_verbose "looperang: $*"
	local input_file="$1"
	local output_file="$OUTPUT_DIR/looperang_output.mp4"
	local reversed_temp="$TEMP_DIR/reversed_temp.mp4"
	local -a ffmpeg_common_opts_raw

	if [[ $# -ne 1 ]]; then
		log_error "Command 'looperang' requires exactly one input file."
		echo "Usage: ffxd looperang [global options] <input>" >&2
		exit 1
	fi

	if [[ ! -f "$input_file" ]]; then log_error "Input file not found: $input_file."; exit 1; fi

	mkdir -p "$OUTPUT_DIR" || { log_error "Could not create output directory: $OUTPUT_DIR"; exit 1; }

	read -r -d '' -a ffmpeg_common_opts_raw < <(build_ffmpeg_options; printf '\0') || true

	local -a video_filters_from_opts=()
	local -a audio_filters_from_opts=()
	local -a remaining_common_opts=()
	local skip_next=false
	for opt in "${ffmpeg_common_opts_raw[@]}"; do
		if "$skip_next"; then skip_next=false; continue; fi
		case "$opt" in
		"-vf") video_filters_from_opts+=("$2"); skip_next=true ;;
		"-af") audio_filters_from_opts+=("$2"); skip_next=true ;;
		*)     remaining_common_opts+=("$opt") ;;
		esac
	done

	local -a reverse_cmd=(ffmpeg -y -i "$input_file" -vf reverse)
	if ! "$NOAUDIO"; then
		reverse_cmd+=("-af" "areverse" "-c:a" "aac")
	else
		reverse_cmd+=("-an")
	fi
	reverse_cmd+=(-c:v libx264 -preset fast -crf 23 "$reversed_temp")
	log_verbose "Executing: ${reverse_cmd[*]}"
	if ! "${reverse_cmd[@]}"; then log_error "FFmpeg failed during video reversal."; exit 1; fi

	local concat_filter_complex=""
	local concat_video_stream="concat_v"
	local concat_audio_stream="concat_a"
	if "$NOAUDIO"; then
		concat_filter_complex="[0:v][1:v]concat=n=2:v=1:a=0[${concat_video_stream}]"
	else
		concat_filter_complex="[0:v][0:a][1:v][1:a]concat=n=2:v=1:a=1[${concat_video_stream}][${concat_audio_stream}]"
	fi

	local final_video_stream_name="$concat_video_stream"
	if [[ ${#video_filters_from_opts[@]} -gt 0 ]]; then
		concat_filter_complex+=";[${concat_video_stream}]$(IFS=,; echo "${video_filters_from_opts[*]}")[final_v]"
		final_video_stream_name="final_v"
	fi

	local final_audio_stream_name="$concat_audio_stream"
	if [[ ${#audio_filters_from_opts[@]} -gt 0 && ! "$NOAUDIO" ]]; then
		concat_filter_complex+=";[${concat_audio_stream}]$(IFS=,; echo "${audio_filters_from_opts[*]}")[final_a]"
		final_audio_stream_name="final_a"
	fi

	local -a concat_cmd=(
		ffmpeg -y -i "$input_file" -i "$reversed_temp"
		-filter_complex "$concat_filter_complex"
		-map "[${final_video_stream_name}]"
	)
	if ! "$NOAUDIO"; then concat_cmd+=("-map" "[${final_audio_stream_name}]"); fi
	concat_cmd+=("${remaining_common_opts[@]}" "$output_file")
	log_verbose "Executing: ${concat_cmd[*]}"
	if ! "${concat_cmd[@]}"; then log_error "FFmpeg failed during looperang concat."; exit 1; fi
}

cmd_slowmo() {
	log_verbose "slowmo: $*"
	local input_file="$1"
	if [[ $# -ne 1 ]]; then log_error "Command 'slowmo' requires exactly one input file."; exit 1; fi
	if [[ -z "$PTS" ]]; then log_error "Slow motion requires a playback speed factor (-p/--pts)."; exit 1; fi
	if "$INTERPOLATE" && [[ -z "$FPS" ]]; then log_error "Motion interpolation requires a target frame rate (-f/--fps)."; exit 1; fi
	cmd_process "$input_file"
}

cmd_fix() {
	log_verbose "fix: $*"
	local input_file="$1"
	local output_file="$OUTPUT_DIR/fixed_output.mp4"
	local -a ffmpeg_common_opts_raw

	if [[ $# -ne 1 ]]; then log_error "Command 'fix' requires exactly one input file."; exit 1; fi
	if [[ ! -f "$input_file" ]]; then log_error "Input file not found: $input_file."; exit 1; fi
	mkdir -p "$OUTPUT_DIR" || { log_error "Could not create output directory: $OUTPUT_DIR"; exit 1; }
	read -r -d '' -a ffmpeg_common_opts_raw < <(build_ffmpeg_options; printf '\0') || true
	local target_fps="$FPS"; [[ -z "$target_fps" ]] && target_fps="30"

	local -a ffmpeg_cmd=(ffmpeg -y -i "$input_file" -r "$target_fps" -c:v libx264 -preset medium)
	if ! "$NOAUDIO"; then ffmpeg_cmd+=("-c:a" "aac"); else ffmpeg_cmd+=("-an"); fi

	local -a filtered_common_opts=()
	local skip_next=false
	for opt in "${ffmpeg_common_opts_raw[@]}"; do
		if "$skip_next"; then skip_next=false; continue; fi
		case "$opt" in
		"-f"|"-p"|"-i"|"-vf"|"-af") skip_next=true ;;
		*) filtered_common_opts+=("$opt") ;;
		esac
	done
	ffmpeg_cmd+=("${filtered_common_opts[@]}" "$output_file")
	log_verbose "Executing: ${ffmpeg_cmd[*]}"
	if ! "${ffmpeg_cmd[@]}"; then log_error "FFmpeg command failed for fix operation."; exit 1; fi
}

cmd_clean() {
	log_verbose "clean: $*"
	local ffxd_runtime_dir="$XDG_RUNTIME_DIR/ffxd"
	local ffxd_cache_dir="$XDG_CACHE_HOME/ffxd"
	log_verbose "Cleaning: $ffxd_runtime_dir and $ffxd_cache_dir"
	if [[ -d "$ffxd_runtime_dir" ]]; then
		rm -rf -- "$ffxd_runtime_dir" || log_error "Failed to remove runtime directory: $ffxd_runtime_dir"
	fi
	if [[ -d "$ffxd_cache_dir" ]]; then
		rm -rf -- "$ffxd_cache_dir" || log_error "Failed to remove cache directory: $ffxd_cache_dir"
	fi
}

cmd_probe() {
	log_verbose "probe: $*"
	local input_file="$1"
	if [[ $# -ne 1 ]]; then log_error "Command 'probe' requires exactly one input file."; exit 1; fi
	if [[ ! -f "$input_file" ]]; then log_error "Input file not found: $input_file."; exit 1; fi
	local -a ffprobe_cmd=(ffprobe -hide_banner -show_streams -show_format "$input_file")
	log_verbose "Executing: ${ffprobe_cmd[*]}"
	if ! "${ffprobe_cmd[@]}"; then log_error "ffprobe command failed for '$input_file'."; exit 1; fi
}

# ──────────────────────────────
# Main Execution
# ──────────────────────────────

main() {
	parse_global_options "$@"
	local cmd="${COMMAND_ARGS[0]:-help}"
	local -a cmd_args=("${COMMAND_ARGS[@]:1}")
	log_verbose "Dispatching command: '$cmd' with args: ${cmd_args[*]}"
	case "$cmd" in
	process)    cmd_process "${cmd_args[@]}" ;;
	merge)      cmd_merge "${cmd_args[@]}" ;;
	composite)  cmd_composite "${cmd_args[@]}" ;;
	looperang)  cmd_looperang "${cmd_args[@]}" ;;
	slowmo)     cmd_slowmo "${cmd_args[@]}" ;;
	fix)        cmd_fix "${cmd_args[@]}" ;;
	clean)      cmd_clean "${cmd_args[@]}" ;;
	probe)      cmd_probe "${cmd_args[@]}" ;;
	help|-h|--help) show_help ;;
	*) log_error "Unknown command: $cmd"; show_help; exit 1 ;;
	esac
}

main "$@"
