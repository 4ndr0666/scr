#!/usr/bin/env bash
# Author: 4ndr0666

# ───────────────────────────────
# ffxd — Modular, XDG-compliant, minimal FFmpeg video Swiss Army Knife
# ───────────────────────────────

# Strict mode: exit on error, exit on unset variables, fail on pipe errors.
set -euo pipefail

# Set IFS to newline and tab only to prevent unexpected word splitting.
IFS=$'\n\t'

# ───────────────────────────────
# XDG & Runtime Setup
# ───────────────────────────────

# XDG base directories (readonly)
declare -r XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
declare -r XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
declare -r XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/tmp}"

# Ensure the base runtime directory for ffxd temporary files exists.
if ! mkdir -p "$XDG_RUNTIME_DIR/ffxd"; then
	log_error "Could not create runtime directory $XDG_RUNTIME_DIR/ffxd"
	exit 1
fi

# Create a unique temporary directory for the current script run.
declare TEMP_DIR
if ! TEMP_DIR="$(mktemp -d "$XDG_RUNTIME_DIR/ffxd/ffxd.XXXXXX")"; then
	log_error "Could not create temporary directory"
	exit 1
fi
declare -r TEMP_DIR

# Auto-cleanup on script exit: remove the unique temporary directory and its contents.
trap 'rm -rf -- "$TEMP_DIR"' EXIT

# ───────────────────────────────
# Globals and Defaults
# ───────────────────────────────

declare ADVANCED=false      # Interactive advanced prompt (future feature)
declare VERBOSE=false       # Enable verbose logging
declare BULK=false          # Process multiple inputs sequentially
declare NOAUDIO=false       # Remove audio streams from output
declare MAX1080=false       # Limit maximum video height to 1080p
declare OUTPUT_DIR          # Directory for output files
OUTPUT_DIR="$(pwd)"         # Default output directory to current working directory
declare FPS=""              # Target frame rate (e.g., 30, 60)
declare PTS=""              # Playback speed factor (e.g., 0.5, 2.0)
declare INTERPOLATE=false   # Enable motion interpolation (requires -f/--fps)
declare -a COMMAND_ARGS=()  # Array to hold the parsed command and its arguments

# ───────────────────────────────
# Logging Functions
# ───────────────────────────────

log_verbose() {
	local message="$*"
	if "$VERBOSE"; then
		echo "VERBOSE: $message" >&2
	fi
}

log_error() {
	local message="$*"
	echo "ERROR: $message" >&2
}

# ───────────────────────────────
# FFmpeg Option Builder
# ───────────────────────────────

build_ffmpeg_options() {
	local -a ffmpeg_opts=()
	local -a video_filters=()
	local -a audio_filters=()
	local pts_val="$PTS"
	local return_status=0

	if "$NOAUDIO"; then ffmpeg_opts+=("-an"); fi
	if "$MAX1080"; then
		video_filters+=("scale='min(iw,1920):min(ih,1080):force_original_aspect_ratio=decrease'")
	fi
	if [[ -n "$FPS" ]]; then
		ffmpeg_opts+=("-r" "$FPS")
	fi
	if [[ -n "$pts_val" ]]; then
		video_filters+=("setpts=$pts_val*PTS")
		if ! "$NOAUDIO"; then
			if ! [[ "$pts_val" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
				log_error "Invalid PTS value '$pts_val'. Must be a number. Skipping audio adjustment."
			elif (($(echo "$pts_val >= 0.5 && $pts_val <= 2.0" | bc -l))); then
				audio_filters+=("atempo=1/$pts_val")
			else
				log_error "Audio speed adjustment (atempo) requires PTS between 0.5 and 2.0. Skipping audio adjustment."
			fi
		fi
	fi
	if "$INTERPOLATE"; then
		if [[ -z "$FPS" ]]; then
			log_error "Motion interpolation requires a target frame rate (-f/--fps)."
			return_status=1
		fi
		video_filters+=("minterpolate='mi_mode=mci:mc_mode=aobmc:vsbmc=1:fps=$FPS'")
	fi
	if [[ ${#video_filters[@]} -gt 0 ]]; then
		ffmpeg_opts+=("-vf" "$(IFS=,; echo "${video_filters[*]}")")
	fi
	if [[ ${#audio_filters[@]} -gt 0 ]]; then
		ffmpeg_opts+=("-af" "$(IFS=,; echo "${audio_filters[*]}")")
	fi
	if "$VERBOSE"; then
		ffmpeg_opts+=("-v" "info")
	fi
	printf "%s\n" "${ffmpeg_opts[@]}" | tr '\n' '\0'
	return "$return_status"
}

parse_ffmpeg_options_output() {
	local -n _common_opts_ref="$1"
	local -n _video_filter_str_ref="$2"
	local -n _audio_filter_str_ref="$3"
	local -a raw_options_output
	local current_type="common"
	local opt
	read -r -d '' -a raw_options_output < <(build_ffmpeg_options; printf '\0') || true
	for opt in "${raw_options_output[@]}"; do
		case "$current_type" in
			"common")
				if [[ "$opt" == "-vf" ]]; then current_type="vf"; continue; fi
				if [[ "$opt" == "-af" ]]; then current_type="af"; continue; fi
				_common_opts_ref+=("$opt")
				;;
			"vf")
				_video_filter_str_ref="$opt"
				current_type="common"
				;;
			"af")
				_audio_filter_str_ref="$opt"
				current_type="common"
				;;
		esac
	done
}

# ───────────────────────────────
# Option Parsing
# ───────────────────────────────

parse_global_options() {
	log_verbose "Parsing global options: $*"
	local -a remaining_args=()
	local arg
	while [[ $# -gt 0 ]]; do
		arg="$1"
		case "$arg" in
		-a|--advanced)   ADVANCED=true ;;
		-v|--verbose)    VERBOSE=true ;;
		-b|--bulk)       BULK=true ;;
		-n|--noaudio)    NOAUDIO=true ;;
		-m|--max1080)    MAX1080=true ;;
		-o|--output-dir)
			if [[ $# -lt 2 || "$2" =~ ^- ]]; then
				log_error "Option '$arg' requires a directory argument."; show_help; exit 1
			fi
			OUTPUT_DIR="$2"; shift ;;
		-f|--fps)
			if [[ $# -lt 2 || "$2" =~ ^- ]] || ! [[ "$2" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
				log_error "Option '$arg' requires a numeric value."; show_help; exit 1
			fi
			FPS="$2"; shift ;;
		-p|--pts)
			if [[ $# -lt 2 || "$2" =~ ^- ]] || ! [[ "$2" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
				log_error "Option '$arg' requires a numeric value."; show_help; exit 1
			fi
			PTS="$2"; shift ;;
		-i|--interpolate) INTERPOLATE=true ;;
		--)
			shift; remaining_args+=("$@"); break ;;
		-*) log_error "Unknown global option: $arg"; show_help; exit 1 ;;
		*)  remaining_args+=("$@"); break ;;
		esac
		shift
	done
	COMMAND_ARGS=("${remaining_args[@]}")
	log_verbose "Remaining arguments: ${COMMAND_ARGS[*]}"
}

# ───────────────────────────────
# Help Message
# ───────────────────────────────

show_help() {
	cat <<EOH
Usage: ffxd [global options] <command> [args]
Commands:
  process <input(s)>   Process video file(s) with global options.
  merge <input(s)>     Merge multiple video files into one.
  composite <input(s)> Composite multiple video files into a grid.
  looperang <input>    Create a boomerang effect video.
  slowmo <input>       Create a slow-motion video.
  fix <input>          Fix common video issues (e.g., VFR to CFR).
  clean                Clean up ffxd temporary/cache files.
  probe <input>        Show media information using ffprobe.
  help                 Show this help message.
Global options:
  -a, --advanced        Interactive advanced prompt (future).
  -v, --verbose         Verbose output.
  -b, --bulk            Process multiple inputs sequentially (for 'process').
  -n, --noaudio         Remove audio streams from output.
  -m, --max1080         Enforce 1080p maximum height for video.
  -o, --output-dir DIR  Output directory (defaults to current directory).
  -f, --fps FPS         Force constant frame rate (e.g., 30, 60). Required for interpolation.
  -p, --pts FACTOR      Adjust playback speed (e.g., 0.5 for half speed, 2.0 for double speed).
  -i, --interpolate     Enable motion interpolation (requires -f/--fps).
EOH
}

# ───────────────────────────────
# Commands Helper Functions
# ───────────────────────────────

ensure_output_directory() {
	local dir_path="$1"
	if ! mkdir -p "$dir_path"; then
		log_error "Could not create output directory: $dir_path"
		exit 1
	fi
}

validate_input_files() {
	local -a files=("$@")
	local file_path
	for file_path in "${files[@]}"; do
		if [[ ! -f "$file_path" ]]; then
			log_error "Input file not found: $file_path."
			return 1
		fi
	done
	return 0
}

# ───────────────────────────────
# Commands (No naked logic below!)
# ───────────────────────────────

# ... [Unchanged: your cmd_process, cmd_merge, cmd_composite, cmd_looperang, cmd_slowmo, cmd_fix, cmd_clean, cmd_probe functions, as above] ...

# [For brevity in this reply, they are left as-is—**but in your final file, include all, properly commented, exactly as above!**]

# ───────────────────────────────
# Main Execution
# ───────────────────────────────

main() {
	parse_global_options "$@"
	local cmd="${COMMAND_ARGS[0]:-help}"
	local -a cmd_args=("${COMMAND_ARGS[@]:1}")
	log_verbose "Dispatching command: '$cmd' with args: ${cmd_args[*]}"
	case "$cmd" in
	process)    cmd_process "${cmd_args[@]}" ;;
	merge)      cmd_merge "${cmd_args[@]}" ;;
	composite)  cmd_composite "${cmd_args[@]}" ;;
	looperang)  cmd_looperang "${cmd_args[@]}" ;;
	slowmo)     cmd_slowmo "${cmd_args[@]}" ;;
	fix)        cmd_fix "${cmd_args[@]}" ;;
	clean)      cmd_clean "${cmd_args[@]}" ;;
	probe)      cmd_probe "${cmd_args[@]}" ;;
	help|-h|--help) show_help ;;
	*) log_error "Unknown command: $cmd"; show_help; exit 1 ;;
	esac
}

main "$@"
