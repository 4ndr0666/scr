#!/usr/bin/env bash
# Author: 4ndr0666
set -euo pipefail
IFS=$'\n\t'
# ====================== // FFXD-BETA //
## Description: A wrapper script for ffmpeg/ffprobe
#               with common video processing commands.
# ---------------------------------------------------

declare -r XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
declare -r XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
declare -r XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/tmp}" # Fallback for XDG_RUNTIME_DIR
declare -r FFXD_RUNTIME_DIR="$XDG_RUNTIME_DIR/ffxd"
mkdir -p "$FFXD_RUNTIME_DIR" || {
	echo "Error: Could not create runtime directory $FFXD_RUNTIME_DIR" >&2
	exit 1
}

declare TEMP_DIR="" # Declare first, assign later to check return status
if ! TEMP_DIR=$(mktemp -d "$FFXD_RUNTIME_DIR/ffxd.XXXXXX"); then
	echo "Error: Could not create temporary directory" >&2
	exit 1
fi
declare -r TEMP_DIR # Make it read-only after successful creation

trap 'rm -rf -- "$TEMP_DIR"' EXIT

declare ADVANCED=false
declare VERBOSE=false
declare BULK=false
declare NOAUDIO=false
declare MAX1080=false
declare OUTPUT_DIR # Declare first, assign default later
OUTPUT_DIR=$(pwd)  # Default to current directory
declare FPS=""
declare PTS=""
declare INTERPOLATE=false
declare -a COMMAND_ARGS=() # Array to hold command and its arguments

log_verbose() {
	if "$VERBOSE"; then
		echo "VERBOSE: $*" >&2
	fi
}

log_error() {
	echo "ERROR: $*" >&2
}

build_ffmpeg_options() {
	local -a common_opts=()
	local -a video_filters=()
	local -a audio_filters=()
	local return_status=0 # Assume success initially

	log_verbose "Building ffmpeg options..."

	if "$NOAUDIO"; then
		common_opts+=("-an")
		log_verbose "Added -an (no audio)."
	fi

	if "$MAX1080"; then
		# Scale video to max 1920x1080 while maintaining aspect ratio.
		# Use 'scale' filter. 'min(iw,1920)' and 'min(ih,1080)' ensures we don't upscale.
		# 'force_original_aspect_ratio=decrease' handles cases where one dimension is already over limit.
		video_filters+=("scale='min(iw,1920):min(ih,1080):force_original_aspect_ratio=decrease'")
		log_verbose "Added max 1080p scaling filter."
	fi

	# Handle FPS and INTERPOLATE logic.
	# If INTERPOLATE is true, FPS is required for the minterpolate filter.
	# If INTERPOLATE is false and FPS is set, use the -r flag for CFR.
	local final_fps_filter=""
	if "$INTERPOLATE"; then
		if [[ -z "$FPS" ]]; then
			log_error "Motion interpolation requires a target frame rate. Please specify with -f/--fps."
			return_status=1 # Indicate failure
		else
			# minterpolate filter includes the target FPS.
			# Example filter string; actual parameters might need tuning.
			final_fps_filter="minterpolate='mi_mode=mci:mc_mode=aobmc:vsbmc=1:fps=$FPS'"
			log_verbose "Added minterpolate filter with fps=$FPS."
		fi
	elif [[ -n "$FPS" ]]; then
		# If not interpolating but FPS is set, use -r flag for CFR.
		common_opts+=("-r" "$FPS")
		log_verbose "Added -r $FPS (force constant frame rate)."
	fi

	if [[ -n "$PTS" ]]; then
		# Adjust playback speed using setpts (video) and atempo (audio).
		# atempo filter only supports factors between 0.5 and 2.0.
		# For factors outside this range, multiple atempo filters or other methods are needed.
		# This simplified version assumes PTS is within the 0.5-2.0 range for audio.
		# A more robust implementation would chain atempo filters or use rubberband/rubberpitch.
		video_filters+=("setpts=$PTS*PTS")
		log_verbose "Added setpts=$PTS*PTS filter."
		if ! "$NOAUDIO"; then
			# Check if PTS is within atempo's supported range (0.5 to 2.0)
			# Use bc for floating-point comparison.
			if (($(echo "$PTS >= 0.5" | bc -l))) && (($(echo "$PTS <= 2.0" | bc -l))); then
				audio_filters+=("atempo=1/$PTS")
				log_verbose "Added atempo=1/$PTS filter."
			else
				log_error "Audio speed adjustment (atempo) requires PTS factor between 0.5 and 2.0. Audio speed will not be adjusted."
				# Do not add the atempo filter if outside range.
			fi
		fi
	fi

	# Add verbose flag for ffmpeg if script is verbose.
	if "$VERBOSE"; then
		common_opts+=("-v" "info") # Use 'info' for standard verbose output from ffmpeg
		log_verbose "Added -v info for ffmpeg."
	fi

	# Combine video filters. If INTERPOLATE added a filter, prepend it.
	local combined_video_filters=""
	if [[ -n "$final_fps_filter" ]]; then
		combined_video_filters="$final_fps_filter"
		if [[ ${#video_filters[@]} -gt 0 ]]; then
			combined_video_filters+="," # Add comma if more filters follow
		fi
	fi
	if [[ ${#video_filters[@]} -gt 0 ]]; then
		combined_video_filters+="$(
			IFS=,
			echo "${video_filters[*]}"
		)"
	fi

	# Combine audio filters.
	local combined_audio_filters=""
	if [[ ${#audio_filters[@]} -gt 0 ]]; then
		combined_audio_filters="$(
			IFS=,
			echo "${audio_filters[*]}"
		)"
	fi

	# Print the results, each on a new line.
	# This structure allows the caller to capture common options, vf string, and af string separately.
	# Using printf "%s" and then echo ensures no trailing spaces/newlines from array expansion before the final newline.
	(
		IFS=" " # Use space as separator for common options
		printf "%s" "${common_opts[*]}"
	)
	echo # Newline after common options

	(
		IFS="," # Use comma as separator for video filters
		printf "%s" "$combined_video_filters"
	)
	echo # Newline after video filters

	(
		IFS="," # Use comma as separator for audio filters
		printf "%s" "$combined_audio_filters"
	)
	echo # Newline after audio filters

	log_verbose "Finished building ffmpeg options (status: $return_status)."
	return "$return_status"
}

parse_global_options() {
	log_verbose "Parsing global options: $*"
	local -a remaining_args=()
	local arg

	# Loop through all provided arguments.
	while [[ $# -gt 0 ]]; do
		arg="$1"
		case "$arg" in
		-a | --advanced)
			ADVANCED=true
			log_verbose "Flag set: ADVANCED"
			;;
		-v | --verbose)
			VERBOSE=true
			log_verbose "Flag set: VERBOSE" # This will print for subsequent verbose calls
			;;
		-b | --bulk)
			BULK=true
			log_verbose "Flag set: BULK"
			;;
		-n | --noaudio)
			NOAUDIO=true
			log_verbose "Flag set: NOAUDIO"
			;;
		-m | --max1080)
			MAX1080=true
			log_verbose "Flag set: MAX1080"
			;;
		-o | --output-dir)
			# Check if argument is missing or starts with a hyphen.
			if [[ $# -lt 2 || "$2" =~ ^- ]]; then
				log_error "Option '$arg' requires a directory argument."
				show_help
				exit 1
			fi
			OUTPUT_DIR="$2"
			log_verbose "Option set: OUTPUT_DIR=$OUTPUT_DIR"
			shift # Consume the argument
			;;
		-f | --fps)
			# Check if argument is missing or starts with a hyphen.
			if [[ $# -lt 2 || "$2" =~ ^- ]]; then
				log_error "Option '$arg' requires a frame rate value."
				show_help
				exit 1
			fi
			# Basic validation: check if it looks like a non-negative number (integer or float).
			if ! [[ "$2" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
				log_error "Invalid value for '$arg': '$2'. Must be a non-negative number."
				show_help
				exit 1
			fi
			FPS="$2"
			log_verbose "Option set: FPS=$FPS"
			shift # Consume the argument
			;;
		-p | --pts)
			# Check if argument is missing or starts with a hyphen.
			if [[ $# -lt 2 || "$2" =~ ^- ]]; then
				log_error "Option '$arg' requires a playback speed factor."
				show_help
				exit 1
			fi
			# Basic validation: check if it looks like a non-negative number (integer or float).
			if ! [[ "$2" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
				log_error "Invalid value for '$arg': '$2'. Must be a non-negative number."
				show_help
				exit 1
			fi
			PTS="$2"
			log_verbose "Option set: PTS=$PTS"
			shift # Consume the argument
			;;
		-i | --interpolate)
			INTERPOLATE=true
			log_verbose "Flag set: INTERPOLATE"
			;;
		--)
			# End of options marker. Add all remaining arguments to remaining_args.
			shift                  # Consume '--'
			remaining_args+=("$@") # Add all remaining arguments
			break                  # Stop parsing options
			;;
		-*)
			# Unknown option.
			log_error "Unknown global option: $arg"
			show_help
			exit 1
			;;
		*)
			# First non-option argument is the command. Add it and all subsequent
			# arguments to remaining_args.
			remaining_args+=("$@")
			break # Stop parsing options
			;;
		esac
		shift # Consume the current option
	done

	# Store the remaining arguments (command and its args) globally.
	COMMAND_ARGS=("${remaining_args[@]}")
	log_verbose "Remaining arguments (command and args): ${COMMAND_ARGS[*]}"
}

show_help() {
	cat <<EOH
Usage: ffxd [global options] <command> [args]

Commands:
  process <input(s)>   Process video file(s) with global options.
  merge <input(s)>     Merge multiple video files into one.
  composite <input(s)> Composite multiple video files into a grid.
  looperang <input>    Create a boomerang effect video.
  slowmo <input>       Create a slow-motion video.
  fix <input>          Fix common video issues (e.g., VFR to CFR).
  clean                Clean up ffxd temporary/cache files.
  probe <input>        Show media information using ffprobe.
  help                 Show this help message.

Global options:
  -a, --advanced        Interactive advanced prompt (currently not implemented).
  -v, --verbose         Verbose output.
  -b, --bulk            Process multiple inputs sequentially (for 'process').
  -n, --noaudio         Remove audio streams from output.
  -m, --max1080         Enforce 1080p maximum height for video.
  -o, --output-dir DIR  Output directory (defaults to current directory).
  -f, --fps FPS         Force constant frame rate (e.g., 30, 60). Required for interpolation.
  -p, --pts FACTOR      Adjust playback speed (e.g., 0.5 for half speed, 2.0 for double speed).
  -i, --interpolate     Enable motion interpolation (requires -f/--fps).

Note: Not all global options are applicable to all commands.
EOH
}

cmd_process() {
	log_verbose "Executing command: process with args: $*"
	local -a inputs=("$@")
	local input_file output_file base_name ext
	local -a ffmpeg_common_opts=()
	local video_filters_str=""
	local audio_filters_str=""

	if [[ ${#inputs[@]} -eq 0 ]]; then
		log_error "Command 'process' requires at least one input file."
		echo "Usage: ffxd process [global options] <input(s)>" >&2
		return 1 # Indicate command failure
	fi

	# Ensure output directory exists.
	mkdir -p "$OUTPUT_DIR" || {
		log_error "Could not create output directory: $OUTPUT_DIR"
		return 1 # Indicate command failure
	}

	# Build common ffmpeg options and filter strings.
	local -a ffmpeg_opts_output
	mapfile -t ffmpeg_opts_output < <(build_ffmpeg_options)
	local build_status=$? # Capture exit status of build_ffmpeg_options

	if [[ "$build_status" -ne 0 ]]; then
		log_error "Failed to build ffmpeg options. Aborting process command."
		return 1 # Indicate command failure
	fi

	# Parse the output lines into variables.
	local common_opts_str="${ffmpeg_opts_output[0]}"
	video_filters_str="${ffmpeg_opts_output[1]}"
	audio_filters_str="${ffmpeg_opts_output[2]}"

	# Convert space-separated common options string back to an array.
	if [[ -n "$common_opts_str" ]]; then
		IFS=' ' read -r -a ffmpeg_common_opts <<<"$common_opts_str"
	fi

	# Determine which inputs to process based on BULK flag.
	local -a files_to_process=()
	if "$BULK"; then
		files_to_process=("${inputs[@]}")
		log_verbose "Bulk mode enabled. Processing ${#files_to_process[@]} file(s)."
	else
		# Non-bulk mode: Process only the first input file.
		if [[ ${#inputs[@]} -gt 1 ]]; then
			log_verbose "Non-bulk mode expects only one input file. Using the first one: '${inputs[0]}'."
		fi
		files_to_process+=("${inputs[0]}")
	fi

	# Process each file.
	for input_file in "${files_to_process[@]}"; do
		if [[ ! -f "$input_file" ]]; then
			log_error "Input file not found: $input_file. Skipping."
			continue # Skip to next file in bulk mode, exit in non-bulk (handled by files_to_process size)
		fi

		# Construct output filename. Simple naming: original_processed.ext
		base_name=$(basename "$input_file")
		ext="${base_name##*.}"
		base_name="${base_name%.*}"
		output_file="$OUTPUT_DIR/${base_name}_processed.$ext"

		log_verbose "Processing '$input_file' -> '$output_file'"

		# Construct the ffmpeg command.
		local -a ffmpeg_cmd=(
			ffmpeg -y # Overwrite output files without asking
			-i "$input_file"
			"${ffmpeg_common_opts[@]}" # Add common options like -an, -r, -v info
		)

		# Add video and audio filters if they exist.
		if [[ -n "$video_filters_str" ]]; then
			ffmpeg_cmd+=("-vf" "$video_filters_str")
		fi
		if [[ -n "$audio_filters_str" ]]; then
			ffmpeg_cmd+=("-af" "$audio_filters_str")
		fi

		ffmpeg_cmd+=("$output_file")

		log_verbose "Executing: ${ffmpeg_cmd[*]}"

		# Execute the command and check its exit status explicitly.
		if ! "${ffmpeg_cmd[@]}"; then
			log_error "ffmpeg failed while processing '$input_file'."
			# In bulk mode, continue to the next file. In non-bulk, set -e will exit.
			if "$BULK"; then continue; else return 1; fi
		fi

		log_verbose "Finished processing '$input_file'."
	done

	log_verbose "Process command finished."
	return 0 # Indicate command success
}

cmd_merge() {
	log_verbose "Executing command: merge with args: $*"
	local -a inputs=("$@")
	local output_file="$OUTPUT_DIR/merged_output.mp4" # Simple output naming
	local concat_list="$TEMP_DIR/concat_list.txt"
	local -a ffmpeg_common_opts=()
	local video_filters_str=""
	local audio_filters_str=""

	if [[ ${#inputs[@]} -lt 2 ]]; then
		log_error "Command 'merge' requires at least two input files."
		echo "Usage: ffxd merge [global options] <input1> <input2> [input...]" >&2
		return 1 # Indicate command failure
	fi

	# Ensure all input files exist.
	for input_file in "${inputs[@]}"; do
		if [[ ! -f "$input_file" ]]; then
			log_error "Input file not found: $input_file."
			return 1 # Indicate command failure
		fi
	done

	# Ensure output directory exists.
	mkdir -p "$OUTPUT_DIR" || {
		log_error "Could not create output directory: $OUTPUT_DIR"
		return 1 # Indicate command failure
	}

	# Create a file list for the concat demuxer.
	# Use printf to correctly handle filenames with spaces or special characters.
	printf "file '%s'\n" "${inputs[@]}" >"$concat_list" || {
		log_error "Could not create concat list file: $concat_list"
		return 1 # Indicate command failure
	}
	log_verbose "Created concat list: $concat_list"

	# Build common ffmpeg options and filter strings.
	local -a ffmpeg_opts_output
	mapfile -t ffmpeg_opts_output < <(build_ffmpeg_options)
	local build_status=$? # Capture exit status

	if [[ "$build_status" -ne 0 ]]; then
		log_error "Failed to build ffmpeg options. Aborting merge command."
		return 1 # Indicate command failure
	fi

	local common_opts_str="${ffmpeg_opts_output[0]}"
	video_filters_str="${ffmpeg_opts_output[1]}"
	audio_filters_str="${ffmpeg_opts_output[2]}"

	if [[ -n "$common_opts_str" ]]; then
		IFS=' ' read -r -a ffmpeg_common_opts <<<"$common_opts_str"
	fi

	# Concat demuxer is fastest with stream copy (-c copy).
	# However, filters (-vf, -af) require re-encoding.
	# If any filters are requested, we must re-encode.
	local -a reencode_opts=()
	if [[ -n "$video_filters_str" || -n "$audio_filters_str" ]]; then
		log_verbose "Filters requested. Re-encoding is required for merge."
		reencode_opts+=("-c:v" "libx264" "-preset" "medium") # Default video re-encode
		if ! "$NOAUDIO"; then
			reencode_opts+=("-c:a" "aac") # Default audio re-encode
		fi
		# Add filters to re-encode options
		if [[ -n "$video_filters_str" ]]; then
			reencode_opts+=("-vf" "$video_filters_str")
		fi
		if [[ -n "$audio_filters_str" ]]; then
			reencode_opts+=("-af" "$audio_filters_str")
		fi
	else
		log_verbose "No filters requested. Using stream copy for merge."
		reencode_opts+=("-c" "copy") # Use stream copy if no filters
	fi

	# Construct the ffmpeg command using the concat demuxer.
	local -a ffmpeg_cmd=(
		ffmpeg -y # Overwrite output files without asking
		-f concat
		-safe 0 # Required for file paths that are not relative or in current dir
		-i "$concat_list"
		"${reencode_opts[@]}"      # Add re-encode options or stream copy
		"${ffmpeg_common_opts[@]}" # Add other common options like -an (already handled by reencode_opts)
		"$output_file"
	)

	log_verbose "Executing: ${ffmpeg_cmd[*]}"
	# Execute the command and check its exit status explicitly.
	if ! "${ffmpeg_cmd[@]}"; then
		log_error "ffmpeg failed while merging files."
		return 1 # Indicate command failure
	fi

	log_verbose "Finished merging files to '$output_file'."
	return 0 # Indicate command success
}

cmd_composite() {
	log_verbose "Executing command: composite with args: $*"
	local -a inputs=("$@")
	local output_file="$OUTPUT_DIR/composite_output.mp4" # Simple output naming
	local num_inputs=${#inputs[@]}
	local base_filter_complex="" # Filtergraph for stacking/compositing
	local final_v_stream=""      # Name of the final video stream pad
	local final_a_stream=""      # Name of the final audio stream pad
	local -a ffmpeg_common_opts=()
	local video_filters_str=""
	local audio_filters_str=""

	if [[ "$num_inputs" -eq 0 ]]; then
		log_error "Command 'composite' requires at least one input file."
		echo "Usage: ffxd composite [global options] <input(s)>" >&2
		return 1 # Indicate command failure
	fi

	# Ensure all input files exist.
	for input_file in "${inputs[@]}"; do
		if [[ ! -f "$input_file" ]]; then
			log_error "Input file not found: $input_file."
			return 1 # Indicate command failure
		fi
	done

	# Ensure output directory exists.
	mkdir -p "$OUTPUT_DIR" || {
		log_error "Could not create output directory: $OUTPUT_DIR"
		return 1 # Indicate command failure
	}

	# Build common ffmpeg options and filter strings.
	local -a ffmpeg_opts_output
	mapfile -t ffmpeg_opts_output < <(build_ffmpeg_options)
	local build_status=$? # Capture exit status

	if [[ "$build_status" -ne 0 ]]; then
		log_error "Failed to build ffmpeg options. Aborting composite command."
		return 1 # Indicate command failure
	fi

	local common_opts_str="${ffmpeg_opts_output[0]}"
	video_filters_str="${ffmpeg_opts_output[1]}"
	audio_filters_str="${ffmpeg_opts_output[2]}"

	if [[ -n "$common_opts_str" ]]; then
		IFS=' ' read -r -a ffmpeg_common_opts <<<"$common_opts_str"
	fi

	# Construct the base filter_complex for compositing based on input count.
	# Assign output streams to named pads (e.g., [base_v], [base_a]).
	case "$num_inputs" in
	1)
		# Just pass through the single video/audio stream.
		base_filter_complex="[0:v]null[base_v];"
		final_v_stream="[base_v]"
		if ! "$NOAUDIO"; then
			base_filter_complex+="[0:a]anull[base_a]"
			final_a_stream="[base_a]"
		fi
		;;
	2)
		# Horizontal stack (hstack).
		base_filter_complex="[0:v][1:v]hstack=inputs=2[base_v];"
		final_v_stream="[base_v]"
		if ! "$NOAUDIO"; then
			base_filter_complex+="[0:a][1:a]amerge=inputs=2[base_a]"
			final_a_stream="[base_a]"
		fi
		;;
	3)
		# Vertical stack (vstack) - Example layout.
		base_filter_complex="[0:v][1:v][2:v]vstack=inputs=3[base_v];"
		final_v_stream="[base_v]"
		if ! "$NOAUDIO"; then
			base_filter_complex+="[0:a][1:a][2:a]amerge=inputs=3[base_a]"
			final_a_stream="[base_a]"
		fi
		;;
	4)
		# 2x2 grid (xstack).
		# Example layout: [0][1]
		#                 [2][3]
		base_filter_complex="[0:v][1:v][2:v][3:v]xstack=inputs=4:layout=0_0|w0_0|0_h0|w0_h0[base_v];"
		final_v_stream="[base_v]"
		if ! "$NOAUDIO"; then
			base_filter_complex+="[0:a][1:a][2:a][3:a]amerge=inputs=4[base_a]"
			final_a_stream="[base_a]"
		fi
		;;
	*)
		log_error "Composite command currently supports 1, 2, 3, or 4 input files for basic layouts."
		return 1 # Indicate command failure
		;;
	esac

	# Append global video/audio filter chains to the base filtergraph if they exist.
	local full_filter_complex="$base_filter_complex"
	local current_v_stream="$final_v_stream"
	local current_a_stream="$final_a_stream"

	if [[ -n "$video_filters_str" ]]; then
		full_filter_complex+=";${current_v_stream}${video_filters_str}[final_v]"
		final_v_stream="[final_v]" # Update final stream name
	fi

	if [[ -n "$audio_filters_str" && ! "$NOAUDIO" ]]; then
		# If video filters were added, append to the new filter_complex string.
		# Otherwise, append to the original base_filter_complex string.
		if [[ -n "$video_filters_str" ]]; then
			full_filter_complex+=";${current_a_stream}${audio_filters_str}[final_a]"
		else
			# Need to handle the semicolon placement carefully if base_filter_complex ended without one
			# This logic assumes base_filter_complex ends with a stream name like [base_a]
			# A safer way is to always end base_filter_complex with a semicolon if audio exists
			# Let's refine base_filter_complex building to ensure a trailing semicolon if needed.
			# Rebuilding base_filter_complex logic slightly:
			base_filter_complex=""
			case "$num_inputs" in
			1)
				base_filter_complex="[0:v]null[base_v]"
				if ! "$NOAUDIO"; then base_filter_complex+=";[0:a]anull[base_a]"; fi
				;;
			2)
				base_filter_complex="[0:v][1:v]hstack=inputs=2[base_v]"
				if ! "$NOAUDIO"; then base_filter_complex+=";[0:a][1:a]amerge=inputs=2[base_a]"; fi
				;;
			3)
				base_filter_complex="[0:v][1:v][2:v]vstack=inputs=3[base_v]"
				if ! "$NOAUDIO"; then base_filter_complex+=";[0:a][1:a][2:a]amerge=inputs=3[base_a]"; fi
				;;
			4)
				base_filter_complex="[0:v][1:v][2:v][3:v]xstack=inputs=4:layout=0_0|w0_0|0_h0|w0_h0[base_v]"
				if ! "$NOAUDIO"; then base_filter_complex+=";[0:a][1:a][2:a][3:a]amerge=inputs=4[base_a]"; fi
				;;
			esac
			# Now rebuild full_filter_complex with the corrected base
			full_filter_complex="$base_filter_complex"
			current_v_stream="[base_v]"
			current_a_stream="[base_a]"

			if [[ -n "$video_filters_str" ]]; then
				full_filter_complex+=";${current_v_stream}${video_filters_str}[final_v]"
				final_v_stream="[final_v]"
			else
				final_v_stream="[base_v]" # No video filters, final is base
			fi

			if [[ -n "$audio_filters_str" && ! "$NOAUDIO" ]]; then
				# Append audio filters to the audio stream from the previous step (base or video-filtered)
				# The audio stream name doesn't change based on video filters, it's always [base_a] here
				full_filter_complex+=";${current_a_stream}${audio_filters_str}[final_a]"
				final_a_stream="[final_a]" # Update final stream name
			else
				final_a_stream="[base_a]" # No audio filters, final is base (if audio exists)
			fi
		fi
	fi

	# Construct the ffmpeg command.
	local -a ffmpeg_cmd=(
		ffmpeg -y # Overwrite output files without asking
	)
	# Add input files.
	for input_file in "${inputs[@]}"; do
		ffmpeg_cmd+=("-i" "$input_file")
	done

	ffmpeg_cmd+=(
		-filter_complex "$full_filter_complex"
		-map "$final_v_stream" # Map the final video output stream
	)
	if ! "$NOAUDIO"; then
		ffmpeg_cmd+=("-map" "$final_a_stream") # Map the final audio output stream
	fi

	ffmpeg_cmd+=(
		# Add default re-encode options as filter_complex requires re-encoding
		-c:v libx264 -preset medium
	)
	if ! "$NOAUDIO"; then
		ffmpeg_cmd+=("-c:a" "aac")
	fi

	ffmpeg_cmd+=(
		"${ffmpeg_common_opts[@]}" # Add other common options like -v info
		"$output_file"
	)

	log_verbose "Executing: ${ffmpeg_cmd[*]}"
	# Execute the command and check its exit status explicitly.
	if ! "${ffmpeg_cmd[@]}"; then
		log_error "ffmpeg failed while compositing files."
		return 1 # Indicate command failure
	fi

	log_verbose "Finished compositing files to '$output_file'."
	return 0 # Indicate command success
}

cmd_looperang() {
	log_verbose "Executing command: looperang with args: $*"
	local input_file="$1"
	local output_file="$OUTPUT_DIR/looperang_output.mp4" # Simple output naming
	local reversed_temp="$TEMP_DIR/reversed_temp.mp4"
	local -a ffmpeg_common_opts=()
	local video_filters_str=""
	local audio_filters_str=""

	if [[ $# -ne 1 ]]; then
		log_error "Command 'looperang' requires exactly one input file."
		echo "Usage: ffxd looperang [global options] <input>" >&2
		return 1 # Indicate command failure
	fi

	if [[ ! -f "$input_file" ]]; then
		log_error "Input file not found: $input_file."
		return 1 # Indicate command failure
	fi

	# Ensure output directory exists.
	mkdir -p "$OUTPUT_DIR" || {
		log_error "Could not create output directory: $OUTPUT_DIR"
		return 1 # Indicate command failure
	}

	# Build common ffmpeg options and filter strings.
	local -a ffmpeg_opts_output
	mapfile -t ffmpeg_opts_output < <(build_ffmpeg_options)
	local build_status=$? # Capture exit status

	if [[ "$build_status" -ne 0 ]]; then
		log_error "Failed to build ffmpeg options. Aborting looperang command."
		return 1 # Indicate command failure
	fi

	local common_opts_str="${ffmpeg_opts_output[0]}"
	video_filters_str="${ffmpeg_opts_output[1]}"
	audio_filters_str="${ffmpeg_opts_output[2]}"

	if [[ -n "$common_opts_str" ]]; then
		IFS=' ' read -r -a ffmpeg_common_opts <<<"$common_opts_str"
	fi

	# Step 1: Create reversed video.
	log_verbose "Creating reversed video: '$input_file' -> '$reversed_temp'"
	local -a reverse_cmd=(
		ffmpeg -y # Overwrite temp file
		-i "$input_file"
		-vf reverse # Reverse video filter
	)
	if ! "$NOAUDIO"; then
		reverse_cmd+=("-af" "areverse") # Reverse audio filter
		reverse_cmd+=("-c:a" "aac")     # Re-encode audio
	else
		reverse_cmd+=("-an") # Ensure no audio in reversed temp if NOAUDIO is set
	fi
	# Reverse filter requires re-encoding. Use a fast preset.
	reverse_cmd+=(
		-c:v libx264 -preset fast
		"$reversed_temp"
	)

	log_verbose "Executing: ${reverse_cmd[*]}"
	if ! "${reverse_cmd[@]}"; then
		log_error "ffmpeg failed while creating reversed video."
		return 1 # Indicate command failure
	fi

	# Step 2: Concatenate original and reversed videos using filter_complex.
	log_verbose "Concatenating '$input_file' and '$reversed_temp' -> '$output_file'"

	# Base filter_complex for concatenation.
	local base_filter_complex=""
	local base_v_stream="[concat_v]"
	local base_a_stream="[concat_a]"

	if ! "$NOAUDIO"; then
		base_filter_complex="[0:v][0:a][1:v][1:a]concat=n=2:v=1:a=1[concat_v][concat_a]"
	else
		base_filter_complex="[0:v][1:v]concat=n=2:v=1:a=0[concat_v]"
		base_a_stream="" # No audio stream to map
	fi

	# Append global video/audio filter chains to the base filtergraph if they exist.
	local full_filter_complex="$base_filter_complex"
	local final_v_stream="$base_v_stream"
	local final_a_stream="$base_a_stream"

	if [[ -n "$video_filters_str" ]]; then
		full_filter_complex+=";${final_v_stream}${video_filters_str}[final_v]"
		final_v_stream="[final_v]" # Update final stream name
	fi

	if [[ -n "$audio_filters_str" && ! "$NOAUDIO" ]]; then
		# Append audio filters to the audio stream from the previous step (base or video-filtered)
		# The audio stream name doesn't change based on video filters, it's always [base_a] here
		full_filter_complex+=";${base_a_stream}${audio_filters_str}[final_a]"
		final_a_stream="[final_a]" # Update final stream name
	fi

	local -a concat_cmd=(
		ffmpeg -y           # Overwrite output file
		-i "$input_file"    # Input 0 (original)
		-i "$reversed_temp" # Input 1 (reversed)
		-filter_complex "$full_filter_complex"
		-map "$final_v_stream" # Map concatenated video stream
	)
	if ! "$NOAUDIO"; then
		concat_cmd+=("-map" "$final_a_stream") # Map concatenated audio stream
	fi

	# Add default re-encode options as filter_complex requires re-encoding.
	concat_cmd+=(
		-c:v libx264 -preset medium
	)
	if ! "$NOAUDIO"; then
		concat_cmd+=("-c:a" "aac")
	fi

	concat_cmd+=(
		"${ffmpeg_common_opts[@]}" # Add other common options like -v info
		"$output_file"
	)

	log_verbose "Executing: ${concat_cmd[*]}"
	# Execute the command and check its exit status explicitly.
	if ! "${concat_cmd[@]}"; then
		log_error "ffmpeg failed while concatenating videos for looperang."
		return 1 # Indicate command failure
	fi

	log_verbose "Finished creating looperang video '$output_file'."
	# Temp file is cleaned by trap on exit.
	return 0 # Indicate command success
}

cmd_slowmo() {
	log_verbose "Executing command: slowmo with args: $*"
	local input_file="$1"

	if [[ $# -ne 1 ]]; then
		log_error "Command 'slowmo' requires exactly one input file."
		echo "Usage: ffxd slowmo [global options] <input>" >&2
		return 1 # Indicate command failure
	fi

	# Slow motion implies a PTS factor < 1.0. Require -p to be set.
	if [[ -z "$PTS" ]]; then
		log_error "Slow motion requires a playback speed factor. Please specify with -p/--pts (e.g., -p 0.5)."
		return 1 # Indicate command failure
	fi

	# If interpolation is requested, FPS must also be set.
	if "$INTERPOLATE" && [[ -z "$FPS" ]]; then
		log_error "Motion interpolation requires a target frame rate. Please specify with -f/--fps."
		return 1 # Indicate command failure
	fi

	# Call cmd_process with the input file.
	# cmd_process will use the global flags (PTS, INTERPOLATE, FPS, etc.)
	log_verbose "Calling cmd_process with input '$input_file' and current global options for slowmo."
	cmd_process "$input_file" # Pass the single input file to process

	local process_status=$? # Capture the exit status of cmd_process

	if [[ "$process_status" -ne 0 ]]; then
		log_error "Slow motion processing failed."
		return 1 # Indicate command failure
	fi

	log_verbose "Finished creating slow-motion video."
	return 0 # Indicate command success
}

cmd_fix() {
	log_verbose "Executing command: fix with args: $*"
	local input_file="$1"
	local output_file="$OUTPUT_DIR/fixed_output.mp4" # Simple output naming
	local -a ffmpeg_common_opts=()
	local video_filters_str=""
	local audio_filters_str=""

	if [[ $# -ne 1 ]]; then
		log_error "Command 'fix' requires exactly one input file."
		echo "Usage: ffxd fix [global options] <input>" >&2
		return 1 # Indicate command failure
	fi

	if [[ ! -f "$input_file" ]]; then
		log_error "Input file not found: $input_file."
		return 1 # Indicate command failure
	fi

	# Ensure output directory exists.
	mkdir -p "$OUTPUT_DIR" || {
		log_error "Could not create output directory: $OUTPUT_DIR"
		return 1 # Indicate command failure
	}

	# Build common ffmpeg options and filter strings.
	local -a ffmpeg_opts_output
	mapfile -t ffmpeg_opts_output < <(build_ffmpeg_options)
	local build_status=$? # Capture exit status

	if [[ "$build_status" -ne 0 ]]; then
		log_error "Failed to build ffmpeg options. Aborting fix command."
		return 1 # Indicate command failure
	fi

	local common_opts_str="${ffmpeg_opts_output[0]}"
	video_filters_str="${ffmpeg_opts_output[1]}"
	audio_filters_str="${ffmpeg_opts_output[2]}"

	if [[ -n "$common_opts_str" ]]; then
		IFS=' ' read -r -a ffmpeg_common_opts <<<"$common_opts_str"
	fi

	# Determine the target FPS for the fix. Use -f if provided, otherwise default to 30.
	local target_fps="$FPS"
	if [[ -z "$target_fps" ]]; then
		log_verbose "No target FPS specified for fix command, defaulting to 30."
		target_fps="30"
	fi

	# Construct the ffmpeg command to fix VFR to CFR and apply other options.
	# Re-encoding is necessary to enforce CFR.
	local -a ffmpeg_cmd=(
		ffmpeg -y # Overwrite output file
		-i "$input_file"
		-r "$target_fps"            # Force constant frame rate
		-c:v libx264 -preset medium # Re-encode video
	)
	if ! "$NOAUDIO"; then
		ffmpeg_cmd+=("-c:a" "aac") # Re-encode audio
	else
		ffmpeg_cmd+=("-an") # Remove audio
	fi

	# Add video and audio filters if they exist.
	# These filters will be applied after the -r and codec options.
	if [[ -n "$video_filters_str" ]]; then
		ffmpeg_cmd+=("-vf" "$video_filters_str")
	fi
	if [[ -n "$audio_filters_str" ]]; then
		ffmpeg_cmd+=("-af" "$audio_filters_str")
	fi

	# Add other relevant common options (like max1080, verbose, etc.).
	# Note: -r, -an are already handled above. -f, -p, -i are not relevant as flags here.
	# build_ffmpeg_options already filtered out -r if INTERPOLATE was used,
	# and handles -an. The other flags (-f, -p, -i) don't produce common options,
	# only filters, which are handled by video_filters_str/audio_filters_str.
	# So we can just add the common_opts array directly.
	ffmpeg_cmd+=("${ffmpeg_common_opts[@]}")

	ffmpeg_cmd+=("$output_file")

	log_verbose "Executing: ${ffmpeg_cmd[*]}"
	# Execute the command and check its exit status explicitly.
	if ! "${ffmpeg_cmd[@]}"; then
		log_error "ffmpeg failed while fixing video."
		return 1 # Indicate command failure
	fi

	log_verbose "Finished fixing video '$input_file' to '$output_file'."
	return 0 # Indicate command success
}

cmd_clean() {
	log_verbose "Executing command: clean"
	local ffxd_cache_dir="$XDG_CACHE_HOME/ffxd" # Assuming a cache dir might be used later

	log_verbose "Attempting to clean: $FFXD_RUNTIME_DIR and $ffxd_cache_dir"

	# Remove the ffxd runtime directory.
	if [[ -d "$FFXD_RUNTIME_DIR" ]]; then
		log_verbose "Removing runtime directory: $FFXD_RUNTIME_DIR"
		# Use explicit check instead of relying solely on set -e for user feedback
		if rm -rf -- "$FFXD_RUNTIME_DIR"; then
			log_verbose "Successfully removed runtime directory."
		else
			log_error "Failed to remove runtime directory: $FFXD_RUNTIME_DIR"
			# Continue attempting to remove cache, but indicate overall failure
			local clean_status=1
		fi
	else
		log_verbose "Runtime directory not found: $FFXD_RUNTIME_DIR"
	fi

	# Remove the ffxd cache directory (if it exists).
	if [[ -d "$ffxd_cache_dir" ]]; then
		log_verbose "Removing cache directory: $ffxd_cache_dir"
		# Use explicit check
		if rm -rf -- "$ffxd_cache_dir"; then
			log_verbose "Successfully removed cache directory."
		else
			log_error "Failed to remove cache directory: $ffxd_cache_dir"
			local clean_status=1 # Indicate overall failure
		fi
	else
		log_verbose "Cache directory not found: $ffxd_cache_dir"
	fi

	log_verbose "Clean command finished."
	# Note: The current run's TEMP_DIR is handled by the trap, not by this command.
	return "${clean_status:-0}" # Return 0 if no failures, 1 otherwise
}

cmd_probe() {
	log_verbose "Executing command: probe with args: $*"
	local input_file="$1"

	if [[ $# -ne 1 ]]; then
		log_error "Command 'probe' requires exactly one input file."
		echo "Usage: ffxd probe <input>" >&2
		return 1 # Indicate command failure
	fi

	if [[ ! -f "$input_file" ]]; then
		log_error "Input file not found: $input_file."
		return 1 # Indicate command failure
	fi

	log_verbose "Probing file: '$input_file'"

	# Construct the ffprobe command.
	local -a ffprobe_cmd=(
		ffprobe
		-hide_banner  # Hide ffprobe version info
		-show_streams # Show stream information
		-show_format  # Show format information
		"$input_file"
	)

	log_verbose "Executing: ${ffprobe_cmd[*]}"
	# Execute the command and check its exit status explicitly.
	# Output goes to stdout by default, which is desired for this command.
	if ! "${ffprobe_cmd[@]}"; then
		log_error "ffprobe failed for file '$input_file'."
		return 1 # Indicate command failure
	fi

	log_verbose "Probe command finished."
	return 0 # Indicate command success
}

main() {
	# Parse global options from the initial arguments.
	# This populates global flags and the COMMAND_ARGS array.
	parse_global_options "$@"

	# The command name is the first element in COMMAND_ARGS.
	# Default to 'help' if no command is provided.
	local cmd="${COMMAND_ARGS[0]:-help}"

	# The arguments for the command are the rest of the elements in COMMAND_ARGS.
	local -a cmd_args=("${COMMAND_ARGS[@]:1}")

	log_verbose "Dispatching command: '$cmd' with arguments: ${cmd_args[*]}"

	# Dispatch to the appropriate command function.
	# Use a case statement for clarity.
	case "$cmd" in
	process) cmd_process "${cmd_args[@]}" ;;
	merge) cmd_merge "${cmd_args[@]}" ;;
	composite) cmd_composite "${cmd_args[@]}" ;;
	looperang) cmd_looperang "${cmd_args[@]}" ;;
	slowmo) cmd_slowmo "${cmd_args[@]}" ;;
	fix) cmd_fix "${cmd_args[@]}" ;;
	clean) cmd_clean "${cmd_args[@]}" ;;
	probe) cmd_probe "${cmd_args[@]}" ;;
	help | -h | --help) show_help ;;
	*)
		log_error "Unknown command: $cmd"
		show_help
		exit 1 # Exit with error status for unknown command
		;;
	esac

	# The script will exit here. The trap will clean up TEMP_DIR.
	# If any command function returned a non-zero status, set -e would have already exited.
}

main "$@"
