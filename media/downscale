#!/usr/bin/env sh
# Author: 4ndr0666
set -eu
# ======================= // DOWNSCALE.SH //
## USAGE: downscale.sh <input_file> [output_file] [quality] [keep_audio]
# -----------------------------------------------
print_usage() {
  echo "Usage: $(basename "$0") <input_file> [output_file] [quality] [keep_audio]"
  echo "  <input_file>  : Required. Path to source video."
  echo "  [output_file] : Optional. Output file name (default: downscaled_1080p.mp4)."
  echo "  [quality]     : Optional. CRF value (default: 18). Lower is better quality (0-51)."
  echo "  [keep_audio]  : Optional. \"true\" (default) or \"false\" to keep or remove audio."
}

if [ $# -lt 1 ]; then
  print_usage
  exit 1
fi

input_file="$1"
output_file="${2:-downscaled_1080p.mp4}"
quality="${3:-18}"
keep_audio="${4:-true}"

if [ ! -f "$input_file" ]; then
  echo "Error: Input file '$input_file' does not exist." >&2 # Redirect error to stderr
  exit 1
fi

if ! command -v ffmpeg >/dev/null 2>&1 || ! command -v ffprobe >/dev/null 2>&1; then
  echo "Error: FFmpeg (including ffprobe) is not installed or not in PATH." >&2 # Redirect error to stderr
  exit 1
fi

case "$quality" in
  ''|[!0-9])
    echo "Error: Quality (CRF) must be an integer." >&2 # Redirect error to stderr
    exit 1
    ;;
esac

if [ "$quality" -lt 0 ] || [ "$quality" -gt 51 ]; then
  echo "Warning: Quality (CRF) value '$quality' is outside the typical range (0-51). Proceeding anyway." >&2 # Redirect warning to stderr
fi

width="$(ffprobe -v error -select_streams v:0 -show_entries stream=width -of csv=p=0 "$input_file" 2>/dev/null || echo "")"
height="$(ffprobe -v error -select_streams v:0 -show_entries stream=height -of csv=p=0 "$input_file" 2>/dev/null || echo "")"

if [ -z "$width" ] || [ -z "$height" ]; then
  echo "Warning: Could not detect resolution for '$input_file'. Proceeding without resolution check." >&2 # Redirect warning to stderr
else
  # Use arithmetic comparison (Shellcheck SC2086)
  # If width <=1920 AND height <=1080, skip re-encoding
  if [ "$width" -le 1920 ] && [ "$height" -le 1080 ]; then
    echo "Video is already ${width}x${height} (â‰¤1080p). Skipping downscale."
    exit 0
  fi
  echo "Source resolution detected: ${width}x${height}."
fi

base_name="${output_file%.*}"
extension="${output_file##*.}"
counter=1

while [ -f "$output_file" ]; do
  output_file="${base_name}_${counter}.${extension}"
  counter=$((counter + 1)) # Use arithmetic expansion (Shellcheck SC2003)
done
echo "Output file set to: '$output_file'."

colorspace="$(ffprobe -v error -select_streams v:0 \
  -show_entries stream=color_space -of default=nw=1:nk=1 "$input_file" 2>/dev/null || echo "")"

detected_colorspace_msg="Detected color space: "
if [ -z "$colorspace" ]; then
  detected_colorspace_msg="${detected_colorspace_msg}(unknown or not specified)"
else
  detected_colorspace_msg="${detected_colorspace_msg}$colorspace"
fi
echo "$detected_colorspace_msg"

case "$colorspace" in
  bt709|"")
    # If bt709 or unknown/not specified, assume bt709 behavior
    # Simple scale and format conversion
    filters="scale=1920:1080:flags=lanczos,format=yuv420p"
    echo "Applying standard Rec.709 downscale filters."
    ;;
  *)
    # For any other detected color space (e.g., bt2020nc), apply an advanced chain
    # This chain attempts a conversion from wider gamut/HDR to Rec.709 SDR
    # Note: This is a generic conversion and may not be optimal for all sources.
    # The original script's bt2020nc and default (*) cases were identical,
    # so we consolidate them here.
    filters="zscale=t=linear:npl=100,format=gbrpf32le,zscale=p=bt709,tonemap=tonemap=reinhard,zscale=t=bt709:m=bt709:r=tv,scale=1920:1080:flags=lanczos,format=yuv420p"
    echo "Applying advanced downscale filters for non-Rec.709 color space."
    ;;
esac

if [ "$keep_audio" = "true" ]; then
  audio_params="-c:a copy"
  echo "Keeping audio stream."
else
  audio_params="-an"
  echo "Discarding audio stream."
fi

echo "Starting high-quality downscale to 1080p for '$input_file'..."
echo "FFmpeg command:"

ffmpeg -i "$input_file" \
  -vf "$filters" \
  -colorspace bt709 -color_primaries bt709 -color_trc bt709 \
  -c:v libx264 -crf "$quality" -preset slow \
  $audio_params \
  "$output_file"

if [ $? -eq 0 ]; then
  echo "Downscale complete. Output saved to '$output_file'."
else
  echo "Error: Downscale process failed for '$input_file'." >&2 # Redirect error to stderr
  exit 1
fi
