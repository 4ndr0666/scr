#!/usr/bin/env sh
# Author: 4ndr0666
set -eu
# ======================= // DOWNSCALE.SH //
## USAGE: downscale.sh <input_file> [output_file] [quality] [keep_audio]
# -----------------------------------------------
keep_audio="true"
output_file=""
input_file=""

# --- Functions ---
print_usage() {
  echo "Usage: $(basename "$0") [options] <input_file> [output_file]"
  echo
  echo "Prepares a video for services with a 1080p resolution limit (like TensorPix)."
  echo "It downscales videos larger than 1080p using lossless quality. If the video is already compliant, it exits."
  echo
  echo "Options:"
  echo "      --no-audio   Remove the audio stream from the output."
  echo "  -h, --help       Display this help menu and exit."
  echo
  echo "Arguments:"
  echo "  <input_file>     Required. Path to the source video."
  echo "  [output_file]    Optional. Output name (default: <input>_1080p.mp4)."
}

# --- Argument Parsing ---
while [ $# -gt 0 ]; do
  case "$1" in
    -h|--help)
      print_usage
      exit 0
      ;;
    --no-audio)
      keep_audio="false"
      shift
      ;;
    -*)
      echo "Error: Unknown option: $1" >&2
      print_usage
      exit 1
      ;;
    *)
      if [ -z "$input_file" ]; then
        input_file="$1"
      elif [ -z "$output_file" ]; then
        output_file="$1"
      else
        echo "Error: Too many arguments provided." >&2; print_usage; exit 1
      fi
      shift
      ;;
  esac
done

# --- Validation and Dependency Check ---
if [ -z "$input_file" ]; then
  echo "Error: Input file is required." >&2; print_usage; exit 1
fi
if [ ! -f "$input_file" ]; then
  echo "Error: Input file '$input_file' does not exist." >&2; exit 1
fi
if ! command -v ffmpeg >/dev/null 2>&1 || ! command -v ffprobe >/dev/null 2>&1; then
  echo "Error: FFmpeg (including ffprobe) is not installed or not in PATH." >&2; exit 1
fi

# --- Main Logic ---
height="$(ffprobe -v error -select_streams v:0 -show_entries stream=height -of csv=p=0 "$input_file" 2>/dev/null || echo "")"

if [ -z "$height" ]; then
  echo "Warning: Could not detect video height. Proceeding with conversion." >&2
else
  echo "Source video height detected: ${height}p."
  if [ "$height" -le 1080 ]; then
    echo "Video is already 1080p or smaller and is compliant. Skipping."
    exit 0
  fi
  echo "Source is >1080p. Downscaling to 1080p."
fi

# --- Output File Naming ---
if [ -z "$output_file" ]; then
  input_basename="${input_file%.*}"
  output_file="${input_basename}_1080p.mp4"
fi

# Handle existing files by creating numbered copies (_1, _2, etc.)
base_name="${output_file%.*}"
extension="${output_file##*.}"
counter=1
while [ -f "$output_file" ]; do
  output_file="${base_name}_${counter}.${extension}"
  counter=$((counter + 1))
done
echo "Output file set to: '$output_file'."

# --- FFmpeg Parameter Setup ---
filters="scale=-2:1080:flags=lanczos,format=yuv420p"

if [ "$keep_audio" = "true" ]; then
  audio_params="-c:a copy"
  echo "Keeping original audio stream."
else
  audio_params="-an"
  echo "Discarding audio stream."
fi

# --- FFmpeg Execution ---
echo "Starting lossless downscale for '$input_file'..."
echo "FFmpeg command:"
echo "ffmpeg -i \"$input_file\" -vf \"$filters\" -c:v libx264 -qp 0 -preset ultrafast $audio_params \"$output_file\""

ffmpeg -i "$input_file" \
  -vf "$filters" \
  -c:v libx264 -qp 0 -preset ultrafast \
  $audio_params \
  "$output_file"

if [ $? -eq 0 ]; then
  echo "Downscale complete. Output saved to '$output_file'."
else
  echo "Error: Downscale process failed for '$input_file'." >&2
  exit 1
fi
