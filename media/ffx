#!/usr/bin/env bash
# ffx — simple ffmpeg wrapper
# Author: 4ndr0666 • Licence: MIT
#─────────────────────────────────────────────────────────────────────────────
set -euo pipefail

# ── XDG dirs ───────────────────────────────────────────────────────────────
: "${XDG_CONFIG_HOME:=$HOME/.config}"
: "${XDG_CACHE_HOME:=$HOME/.cache}"
: "${XDG_DATA_HOME:=$HOME/.local/share}"
FFX_CACHE_DIR="$XDG_CACHE_HOME/ffx"
FFX_LOG_DIR="$XDG_DATA_HOME/ffx"
mkdir -p -- "$FFX_CACHE_DIR" "$FFX_LOG_DIR"

# ── Global toggles ─────────────────────────────────────────────────────────
ADVANCED=false VERBOSE=false DRY_RUN=false KEEP_AUDIO=false INTERP=false

# ── Advanced defaults ──────────────────────────────────────────────────────
ADV_CONTAINER="mp4"   ADV_RES="1920x1080" ADV_FPS="60"
ADV_CODEC="libx264"   ADV_PIX_FMT="yuv420p" ADV_CRF="18"

# ── Helpers ────────────────────────────────────────────────────────────────
log() { "$VERBOSE" && printf '%s\n' "$*"; }
run() {
  if "$DRY_RUN"; then printf '[dry-run] %q ' "$@"; printf '\n'; else "$@"; fi
}
command_exists() { command -v "$1" &>/dev/null; }
absolute_path()  { readlink -f -- "$1" 2>/dev/null || printf '%s' "$1"; }
error() { printf '%s\n' "$*" >&2; exit 1; }

check_deps() { for c in ffmpeg ffprobe; do command_exists "$c" || error "$c missing"; done; }

get_default_filename() {
  local base=${1:-out} suf=${2:-tmp} ext=${3:-mp4} n=1 f
  f="${base}_${suf}.${ext}"
  while [[ -e $f ]]; do f="${base}_${suf}_$((n++)).${ext}"; done
  printf '%s' "$f"
}

audio_opts() {
  # Returns an array description via printf '%s\0'
  if "$KEEP_AUDIO"; then
    printf '%s\0' -c:a copy
  else
    printf '%s\0' -an
  fi
}

advanced_prompt() {
  "$ADVANCED" || return 0
  read -r -p "Container (mp4/mkv) [${ADV_CONTAINER}]: " ADV_CONTAINER; ADV_CONTAINER=${ADV_CONTAINER:-mp4}
  read -r -p "Resolution [${ADV_RES}]: " ADV_RES; ADV_RES=${ADV_RES:-1920x1080}
  read -r -p "Frame-rate [${ADV_FPS}]: " ADV_FPS; ADV_FPS=${ADV_FPS:-60}
  read -r -p "Codec [${ADV_CODEC}]: " ADV_CODEC; ADV_CODEC=${ADV_CODEC:-libx264}
  read -r -p "Pixel-fmt [${ADV_PIX_FMT}]: " ADV_PIX_FMT; ADV_PIX_FMT=${ADV_PIX_FMT:-yuv420p}
  read -r -p "CRF [${ADV_CRF}]: " ADV_CRF; ADV_CRF=${ADV_CRF:-18}
}

# ── probe ──────────────────────────────────────────────────────────────────
cmd_probe() {
  advanced_prompt
  local input=
  while (($#)); do case $1 in -i|--input) input=$2; shift 2;; *) input=$1; shift;; esac; done
  [[ $input ]] || error "probe needs <file>"; [[ -f $input ]] || error "file not found: $input"

  local fmt res fps dur size
  fmt=$(ffprobe -v0 -show_entries format=format_name -of default=nw=1:nk=1 "$input")
  res=$(ffprobe -v0 -select_streams v:0 -show_entries stream=width,height -of csv=p=0:s=x "$input")
  fps=$(ffprobe -v0 -select_streams v:0 -show_entries stream=avg_frame_rate -of default=nw=1:nk=1 "$input")
  dur=$(ffprobe -v0 -show_entries format=duration        -of default=nw=1:nk=1 "$input")
  size=$(stat -c '%s' "$input")
  printf 'File: %s\nContainer: %s\nResolution: %s\nFPS: %s\nDuration: %ss\nSize: %sB\n' \
    "$input" "$fmt" "$res" "$fps" "${dur%%.*}" "$size"
}

# ── process ────────────────────────────────────────────────────────────────
cmd_process() {
  advanced_prompt
  local input="" output="" forced_fps="$ADV_FPS"
  while (($#)); do
    case $1 in
      -i|--input)  input=$2; shift 2;;
      -o|--output) output=$2; shift 2;;
      -s|--fps)    forced_fps=$2; shift 2;;
      *)           input=${input:-$1}; shift;;
    esac
  done
  [[ $input ]] || error "process needs <input>"; [[ -f $input ]] || error "file not found: $input"
  [[ $output ]] || output=$(get_default_filename "${input%.*}" processed "$ADV_CONTAINER")

  local height vf
  height=$(ffprobe -v0 -select_streams v:0 -show_entries stream=height -of default=nw=1:nk=1 "$input") || height=0
  vf="fps=$forced_fps"; [[ $height -gt 1080 ]] && vf="scale=-2:1080,$vf"

  # convert audio args into array
  IFS= read -r -d '' -a aopts < <(audio_opts)
  run ffmpeg -y -fflags +genpts -i "$input" -vf "$vf" \
      -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium "${aopts[@]}" \
      -pix_fmt "$ADV_PIX_FMT" -movflags +faststart "$output"
  log "Processed → $output"
}

# ── merge ──────────────────────────────────────────────────────────────────
cmd_merge() {
  advanced_prompt
  local output="" forced_fps="$ADV_FPS" files=()
  while (($#)); do
    case $1 in
      -o|--output) output=$2; shift 2;;
      -s|--fps)    forced_fps=$2; shift 2;;
      -i|--input)  files+=("$2"); shift 2;;
      *)           files+=("$1"); shift;;
    esac
  done
  [[ ${#files[@]} -ge 2 ]] || error "merge needs ≥2 files"
  [[ $output ]] || output=$(get_default_filename output merged "$ADV_CONTAINER")

  local tmpdir; tmpdir=$(mktemp -d)
  local tmplist=$tmpdir/list.txt
  for f in "${files[@]}"; do
    [[ -f $f ]] || { rm -rf "$tmpdir"; error "file not found: $f"; }
    local temp; temp="$tmpdir/$(basename "$f").mp4"
    run ffmpeg -y -fflags +genpts -i "$f" -r "$forced_fps" -c copy "$temp" ||
      run ffmpeg -y -i "$f" -r "$forced_fps" -c:v "$ADV_CODEC" -qp 0 -preset medium -pix_fmt "$ADV_PIX_FMT" -an "$temp"
    printf "file '%s'\n" "$(absolute_path "$temp")" >>"$tmplist"
  done
  run ffmpeg -y -f concat -safe 0 -i "$tmplist" -c copy "$output" ||
    run ffmpeg -y -f concat -safe 0 -i "$tmplist" -c:v "$ADV_CODEC" -qp 0 -preset medium -pix_fmt "$ADV_PIX_FMT" -an "$output"
  rm -rf "$tmpdir"; log "Merged → $output"
}

# ── looperang ──────────────────────────────────────────────────────────────
cmd_looperang() {
  advanced_prompt
  local input="" output=""
  while (($#)); do
    case $1 in -i|--input) input=$2; shift 2;; -o|--output) output=$2; shift 2;; *) input=${input:-$1}; shift;; esac
  done
  [[ $input ]] || error "looperang needs <input>"; [[ -f $input ]] || error "file not found: $input"
  [[ $output ]] || output=$(get_default_filename "${input%.*}" looperang "$ADV_CONTAINER")

  local tmpdir; tmpdir=$(mktemp -d)
  local fwd=$tmpdir/fwd.mp4 rev=$tmpdir/rev.mp4 list=$tmpdir/list.txt
  IFS= read -r -d '' -a aopts < <(audio_opts)
  run ffmpeg -y -i "$input" -c:v "$ADV_CODEC" -qp 0 -preset medium -pix_fmt "$ADV_PIX_FMT" "${aopts[@]}" "$fwd"
  run ffmpeg -y -i "$input" -vf reverse -c:v "$ADV_CODEC" -qp 0 -preset medium -pix_fmt "$ADV_PIX_FMT" "${aopts[@]}" "$rev"
  printf "file '%s'\nfile '%s'\n" "$fwd" "$rev" >"$list"
  run ffmpeg -y -f concat -safe 0 -i "$list" -c copy "$output" ||
    run ffmpeg -y -f concat -safe 0 -i "$list" -c:v "$ADV_CODEC" -qp 0 -preset medium -pix_fmt "$ADV_PIX_FMT" "${aopts[@]}" "$output"
  rm -rf "$tmpdir"; log "Looperang → $output"
}

# ── speed ──────────────────────────────────────────────────────────────────
cmd_speed() {
  advanced_prompt
  local input="" output="" factor="2" fps="$ADV_FPS"
  while (($#)); do
    case $1 in
      -i|--input)  input=$2; shift 2;;
      -o|--output) output=$2; shift 2;;
      -f|--factor) factor=$2; shift 2;;
      -s|--fps)    fps=$2; shift 2;;
      *)           input=${input:-$1}; shift;;
    esac
  done
  [[ $input ]] || error "speed needs <input>"; [[ -f $input ]] || error "file not found: $input"
  [[ $output ]] || output=$(get_default_filename "${input%.*}" speed "$ADV_CONTAINER")
  [[ $(bc -l <<<"$factor > 0") -eq 1 ]] || error "factor must be >0"

  local vf="setpts=${factor}*PTS"
  $INTERP && vf="minterpolate=fps=$fps,$vf"
  IFS= read -r -d '' -a aopts < <(audio_opts)
  run ffmpeg -y -i "$input" -filter:v "$vf" -r "$fps" -c:v "$ADV_CODEC" \
      -crf "$ADV_CRF" -preset medium "${aopts[@]}" -pix_fmt "$ADV_PIX_FMT" "$output"
  log "Speed → $output"
}

# ── Help ───────────────────────────────────────────────────────────────────
show_help() {
  cat <<EOF
Usage: ffx [global opts] <command> [args]

Global options
  -A|--advanced        Prompt for codec/CRF overrides
  -v|--verbose         Verbose logging
  --dry-run            Print ffmpeg commands, don't execute
  -a|--keep-audio      Copy audio instead of stripping
  -i|--interpolate     Use motion interpolation in speed
  -h|--help            This message

Commands (each accepts -i/--input, see below)
  probe        -i <file>
  process      -i <in>  [-o <out>] [-s <fps>]
  merge        [-o <out>] [-s <fps>] -i <f1> -i <f2> [...]
  looperang    -i <in>  [-o <out>]
  speed        -i <in>  [-o <out>] [-f <factor>] [-s <fps>]
EOF
}

# ── Main ───────────────────────────────────────────────────────────────────
main() {
  (($#)) || { show_help; exit 1; }
  check_deps

  # global opts
  while (($#)); do
    case $1 in
      -A|--advanced)   ADVANCED=true;   shift;;
      -v|--verbose)    VERBOSE=true;    shift;;
      --dry-run)       DRY_RUN=true;    shift;;
      -a|--keep-audio) KEEP_AUDIO=true; shift;;
      -i|--interpolate)INTERP=true;     shift;;
      -h|--help)       show_help; exit 0;;
      --) shift; break;;
      -*) error "Unknown option $1";;
      *)  break;;
    esac
  done

  (($#)) || error "No command specified"
  local cmd=$1; shift || true
  case $cmd in
    probe)     cmd_probe   "$@";;
    process)   cmd_process "$@";;
    merge)     cmd_merge   "$@";;
    looperang) cmd_looperang "$@";;
    speed)     cmd_speed   "$@";;
    help)      show_help   ;;
    *)         error "Unknown command: $cmd" ;;
  esac
}

main "$@"
