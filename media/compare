#!/usr/bin/env bash
# Author: 4ndr0666
set -euo pipefail
# ================== // FFX-VIDLINE //
## Description: A script to apply ffmpeg filters and
#              operations via CLI or interactive menu.
# ---------------------------------------

declare -r GREEN='\033[0;32m'
declare -r CYAN='\033[36m'
declare -r RED='\033[0;31m'
declare -r RESET='\033[0m'

declare LOGDIR="${XDG_DATA_HOME:-$HOME/.local/share}/vidline"
mkdir -p -- "$LOGDIR"
declare LOGFILE="$LOGDIR/ffmpeg_operations.log"

declare -i DRY_RUN=0          # Flag for dry run mode (integer)
declare -a filters=()         # Array to hold individual filter tokens (array)
declare format="mp4"          # Output container format (string)
declare INPUT_FILE=""         # Path to input video file (string)

error_exit() {
  local ts # Declare variable locally
  ts="$(date '+%F %T')" # Get timestamp
  # Print error message to stderr and log file using tee
  # Use printf for color codes and variable expansion safety
  printf '%b[%s] ERROR: %s%b\n' "$RED" "$ts" "$1" "$RESET" | tee -a "$LOGFILE" >&2
  exit 1 # Exit with a non-zero status
}

trap 'error_exit "Script error at line ${LINENO} (exit status $?)"' ERR

check_deps() {
  # Print status message to stderr
  printf '%bChecking dependencies...%b\n' "$CYAN" "$RESET" >&2
  local cmd # Declare variable locally
  # List of required commands
  local -a required_cmds=(ffmpeg ffprobe fzf bc)
  # Loop through the list
  for cmd in "${required_cmds[@]}"; do
    # Check if command exists using command -v
    # Redirect stdout and stderr to /dev/null explicitly
    command -v "$cmd" > /dev/null 2>&1 || error_exit "Dependency missing: '$cmd'"
  done
  # Print success message to stderr
  printf '%bDependencies OK.%b\n' "$GREEN" "$RESET" >&2
}

unique_output_name() {
  local dir="$1" base="$2" ext="$3" counter=1 cand # Declare variables locally
  cand="${dir}/${base}.${ext}" # Initial candidate filename
  # Loop while the candidate file exists
  while [[ -e "$cand" ]]; do
    cand="${dir}/${base}_${counter}.${ext}" # Append counter
    ((counter++)) # Increment counter
  done
  # Print the unique filename to stdout
  printf '%s\n' "$cand"
}

choose_file() {
  # Prompt to stderr so stdout carries only the selected path
  printf '%bSelect input video:%b\n' "$CYAN" "$RESET" >&2
  local f # Declare variable locally
  # Use fzf, capture output. If fzf fails (e.g., user cancels), return 1.
  # Use --prompt to customize fzf prompt
  f="$(fzf --prompt="Select video: ")" || return 1
  # Validate that the selected path is a regular file
  # Use -f for regular file check
  [[ -f "$f" ]] || error_exit "Invalid selection: '$f'"
  # Print the selected file path to stdout
  printf '%s\n' "$f"
}

display_help() {
  # Use cat with EOF marker for multi-line output
  cat <<EOF
Usage: ${0##*/} [--dry-run] [operations] [file]

Apply ffmpeg filters and operations to a video file.
If no operations are specified, an interactive menu is shown.
If no file is specified, fzf is used to select one.

Options:
  --dry-run          Print the ffmpeg command without executing it.
  -h, --help         Display this help message.

Operations:
  --fps <int>        Set output frame rate.
  --deflicker        Apply deflicker filter.
  --dedot          Apply removegrain=1 filter.
  --dehalo         Apply unsharp filter for dehaloing.
  --removegrain <type> Apply removegrain filter with specified type.
  --deband <params>  Apply deband filter with specified parameters.
  --sharpen        Apply default unsharp filter.
  --scale          Scale video to 2x resolution using spline.
  --deshake        Apply deshake filter.
  --edge-detect    Apply edgedetect filter.
  --slo-mo <factor>  Slow down video by factor (e.g., 2 for half speed).
  --speed-up <factor> Speed up video by factor (e.g., 1.5 for 1.5x speed).
  --convert <fmt>    Convert output to specified format (e.g., mp4, mkv, webm).
  --color-correct  Apply basic color correction (gamma, contrast, brightness, saturation).
  --crop-resize <crop> <scale> Apply crop and then scale filters.
  --rotate <deg>     Rotate video by 90, 180, or -90 degrees.
  --flip <h|v>       Flip video horizontally (h) or vertically (v).

Examples:
  ${0##*/} --fps 30 --scale --slo-mo 2 input.mp4
  ${0##*/} --deband "range=16:r=4:d=4" --convert mkv video.avi
  ${0##*/} # Run interactively
EOF
}

run_ffmpeg() {
  local infile="$1" outfile="$2" # Declare and assign input/output files
  shift 2 # Remove the first two arguments (input/output files)
  local -a flt=("$@") # Capture remaining arguments as the filter array
  # Start building the ffmpeg command array
  # Use -y to overwrite output file without asking
  local -a cmd=(ffmpeg -y -i "$infile")

  # Add video filtergraph if filters are present
  if ((${#flt[@]} > 0)); then
    local IFS=, # Set IFS locally to join array elements with a comma
    local filter_chain="${flt[*]}" # Join filter tokens into a single string
    cmd+=(-vf "$filter_chain") # Add the video filter option to the command array
  fi

  # Add progress output (to stdout) and the output file
  cmd+=(-progress pipe:1 "$outfile")

  # Execute dry run if enabled
  if ((DRY_RUN)); then
    # Print command to stderr using %q for safe quoting
    printf '%bDRY-RUN:%b %q\n' "$CYAN" "$RESET" "${cmd[@]}" >&2
    return 0 # Exit function successfully in dry run mode
  fi

  # Print status message to stderr
  printf '%bRunning ffmpeg...%b\n' "$CYAN" "$RESET" >&2
  # Execute the ffmpeg command.
  # Redirect stdout and stderr to tee, which appends to logfile.
  # Explicitly redirect stderr to stdout before piping to tee.
  # The pipefail option ensures that if ffmpeg fails, the pipe's exit status is non-zero.
  "${cmd[@]}" 2>&1 | tee -a "$LOGFILE"
  # Get the exit status of the first command in the pipe (ffmpeg)
  local rv=${PIPESTATUS[0]}
  # Check ffmpeg's exit status
  ((rv == 0)) || error_exit "ffmpeg failed with status $rv. See $LOGFILE for details."
  # Print success message to stderr
  printf '%bffmpeg completed successfully.%b\n' "$GREEN" "$RESET" >&2
}

parse_args() {
  # Loop while there are arguments left
  while (($# > 0)); do
    case "$1" in
      --dry-run)
        DRY_RUN=1
        ;;
      -h|--help)
        display_help
        exit 0
        ;;
      --fps)
        # Check if argument exists and is a positive integer
        if [ $# -lt 2 ] || ! [[ "$2" =~ ^[1-9][0-9]*$ ]]; then
          error_exit "--fps requires a positive integer value."
        fi
        filters+=("fps=$2")
        shift # Consume argument value
        ;;
      --deflicker)
        filters+=("deflicker")
        ;;
      --dedot)
        filters+=("removegrain=1")
        ;;
      --dehalo)
        filters+=("unsharp=5:5:-1.5:5:5:-1.5")
        ;;
      --removegrain)
        # Check if argument exists and is an integer
        if [ $# -lt 2 ] || ! [[ "$2" =~ ^[0-9]+$ ]]; then
          error_exit "--removegrain requires an integer type."
        fi
        filters+=("removegrain=$2")
        shift # Consume argument value
        ;;
      --deband)
        # Check if argument exists and is not empty
        if [ $# -lt 2 ] || [ -z "$2" ]; then
          error_exit "--deband requires parameters."
        fi
        filters+=("deband=$2")
        shift # Consume argument value
        ;;
      --sharpen)
        filters+=("unsharp")
        ;;
      --scale)
        filters+=("scale=iw2:ih2:flags=spline") # Corrected scale filter
        ;;
      --deshake)
        filters+=("deshake")
        ;;
      --edge-detect)
        filters+=("edgedetect")
        ;;
      --slo-mo)
        # Check if argument exists and is a positive float/integer
        if [ $# -lt 2 ] || ! [[ "$2" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
          error_exit "--slo-mo requires a positive numeric factor."
        fi
        # Use bc for floating-point comparison
        # Use (( )) with bc output for arithmetic evaluation
        if (( $(bc -l <<<"$2 <= 0") )); then
          error_exit "--slo-mo factor must be greater than 0."
        fi
        filters+=("setpts=$2*PTS")
        shift # Consume argument value
        ;;
      --speed-up)
        # Check if argument exists and is a positive float/integer
        if [ $# -lt 2 ] || ! [[ "$2" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
          error_exit "--speed-up requires a positive numeric factor."
        fi
        # Use bc for floating-point comparison
        if (( $(bc -l <<<"$2 <= 0") )); then
          error_exit "--speed-up factor must be greater than 0."
        fi
        # Calculate reciprocal using bc
        local reciprocal_factor
        reciprocal_factor=$(bc -l <<<"1/$2")
        filters+=("setpts=${reciprocal_factor}*PTS")
        shift # Consume argument value
        ;;
      --convert)
        # Check if argument exists and is a valid format string (alphanumeric)
        if [ $# -lt 2 ] || ! [[ "$2" =~ ^[A-Za-z0-9]+$ ]]; then
          error_exit "--convert requires a format string (e.g., mp4, mkv)."
        fi
        format="$2"
        shift # Consume argument value
        ;;
      --color-correct)
        filters+=("eq=gamma=1.5:contrast=1.2:brightness=0.3:saturation=0.7")
        ;;
      --crop-resize)
        # Check if both crop and scale arguments exist and are not empty
        if [ $# -lt 3 ] || [ -z "$2" ] || [ -z "$3" ]; then
          error_exit "--crop-resize requires <crop_params> and <scale_params>."
        fi
        # Combine crop and scale filters with a comma
        filters+=("crop=$2,scale=$3")
        shift 2 # Consume both argument values
        ;;
      --rotate)
        # Check if argument exists and is a valid rotation degree
        if [ $# -lt 2 ]; then
          error_exit "--rotate requires degrees (90, 180, or -90)."
        fi
        case "$2" in
          90)  filters+=("transpose=1") ;;
          180) filters+=("transpose=2,transpose=2") ;; # Rotate 180 by applying 90 twice
          -90) filters+=("transpose=2") ;; # -90 is equivalent to 270, which is transpose=2
          *)   error_exit "--rotate must be 90, 180, or -90." ;;
        esac
        shift # Consume argument value
        ;;
      --flip)
        # Check if argument exists and is 'h' or 'v'
        if [ $# -lt 2 ]; then
          error_exit "--flip requires 'h' (horizontal) or 'v' (vertical)."
        fi
        case "$2" in
          h) filters+=("hflip") ;;
          v) filters+=("vflip") ;;
          *) error_exit "--flip must be 'h' or 'v'." ;;
        esac
        shift # Consume argument value
        ;;
      --*) # Catch-all for unknown options
        error_exit "Unknown option: '$1'. Use --help for usage."
        ;;
      *)   # Positional argument: Assume it's the input file
        # Check if an input file has already been specified
        if [[ -n "$INPUT_FILE" ]]; then
          error_exit "Multiple input files specified. Only one is allowed."
        fi
        INPUT_FILE="$1"
        ;;
    esac
    shift # Consume the option itself
  done
}

show_menu() {
  # Print menu options to stderr
  {
    printf '%bMenu (d=done, q=quit)%b\n' "$CYAN" "$RESET"
    printf ' 1) fps         6) deband        11) slo-mo      16) rotate\n'
    printf ' 2) deflicker   7) sharpen       12) speed-up    17) flip\n'
    printf ' 3) dedot       8) scale         13) convert\n'
    printf ' 4) dehalo      9) deshake       14) color-correct\n'
    printf ' 5) removegrain 10) edge-detect  15) crop-resize\n'
  } >&2

  local choice # Variable to store user's menu choice
  local -a out=() # Array to store the selected options as tokens

  while true; do
    # Read user input, prompt to stderr
    read -r -p "Choice: " choice >&2
    case "$choice" in
      d) # Done
        break
        ;;
      q) # Quit
        exit 0
        ;;
      1)  # fps
          local v # Declare variable locally
          read -r -p "  FPS value: " v >&2
          if [[ "$v" =~ ^[1-9][0-9]*$ ]]; then
              out+=(--fps "$v")
          else
              printf '%bInvalid FPS value. Must be a positive integer.%b\n' "$RED" "$RESET" >&2
          fi
          ;;
      2)  # deflicker
          out+=(--deflicker)
          ;;
      3)  # dedot
          out+=(--dedot)
          ;;
      4)  # dehalo
          out+=(--dehalo)
          ;;
      5)  # removegrain
          local t # Declare variable locally
          read -r -p "  removegrain type (integer): " t >&2
          if [[ "$t" =~ ^[0-9]+$ ]]; then
              out+=(--removegrain "$t")
          else
              printf '%bInvalid type. Must be an integer.%b\n' "$RED" "$RESET" >&2
          fi
          ;;
      6)  # deband
          local p # Declare variable locally
          read -r -p "  deband params: " p >&2
          if [[ -n "$p" ]]; then
              out+=(--deband "$p")
          else
              printf '%bParameters required for deband.%b\n' "$RED" "$RESET" >&2
          fi
          ;;
      7)  # sharpen
          out+=(--sharpen)
          ;;
      8)  # scale
          out+=(--scale)
          ;;
      9)  # deshake
          out+=(--deshake)
          ;;
      10) # edge-detect
          out+=(--edge-detect)
          ;;
      11) # slo-mo
          local f # Declare variable locally
          read -r -p "  slo-mo factor (e.g., 2 for half speed): " f >&2
          # Check if it's a positive number using regex and bc
          if [[ "$f" =~ ^[0-9]+(\.[0-9]+)?$ ]] && (( $(bc -l <<<"$f > 0") )); then
              out+=(--slo-mo "$f")
          else
              printf '%bInvalid factor. Must be a positive number.%b\n' "$RED" "$RESET" >&2
          fi
          ;;
      12) # speed-up
          local f # Declare variable locally
          read -r -p "  speed-up factor (e.g., 1.5 for 1.5x speed): " f >&2
          # Check if it's a positive number using regex and bc
          if [[ "$f" =~ ^[0-9]+(\.[0-9]+)?$ ]] && (( $(bc -l <<<"$f > 0") )); then
              out+=(--speed-up "$f")
          else
              printf '%bInvalid factor. Must be a positive number.%b\n' "$RED" "$RESET" >&2
          fi
          ;;
      13) # convert
          local fmt # Declare variable locally
          read -r -p "  format (e.g., mp4, mkv): " fmt >&2
          if [[ "$fmt" =~ ^[A-Za-z0-9]+$ ]]; then
              out+=(--convert "$fmt")
          else
              printf '%bInvalid format. Use alphanumeric characters.%b\n' "$RED" "$RESET" >&2
          fi
          ;;
      14) # color-correct
          out+=(--color-correct)
          ;;
      15) # crop-resize
          local c s # Declare variables locally
          read -r -p "  crop params: " c >&2
          read -r -p "  scale params: " s >&2
          if [[ -n "$c" ]] && [[ -n "$s" ]]; then
              out+=(--crop-resize "$c" "$s")
          else
              printf '%bBoth crop and scale parameters are required.%b\n' "$RED" "$RESET" >&2
          fi
          ;;
      16) # rotate
          local d # Declare variable locally
          read -r -p "  degrees (90/180/-90): " d >&2
          case "$d" in
              90|180|-90) out+=(--rotate "$d") ;;
              *) printf '%bInvalid degrees. Must be 90, 180, or -90.%b\n' "$RED" "$RESET" >&2 ;;
          esac
          ;;
      17) # flip
          local f_dir # Use a different variable name to avoid conflict with slo-mo/speed-up factor 'f'
          read -r -p "  flip h|v: " f_dir >&2
          case "$f_dir" in
              h|v) out+=(--flip "$f_dir") ;;
              *) printf '%bInvalid flip direction. Must be 'h' or 'v'.%b\n' "$RED" "$RESET" >&2 ;;
          esac
          ;;
      *)  # Unknown choice
          printf '%bUnknown choice: %s%b\n' "$RED" "$choice" "$RESET" >&2
          ;;
    esac
  done
  # Print the collected options, one per line, to stdout for mapfile
  # Use printf '%s\n' "${out[@]}" to handle potential spaces in arguments correctly
  printf '%s\n' "${out[@]}"
}

main() {
  # 1. Check dependencies
  check_deps

  # 2. Parse initial command-line arguments
  # Pass all arguments received by main
  parse_args "$@"

  # 3. If no filters were specified on the command line, show the interactive menu
  if ((${#filters[@]} == 0)); then
    printf '%bNo operations specified. Entering interactive menu.%b\n' "$CYAN" "$RESET" >&2
    local -a menu_args # Declare array locally
    # Capture the output of show_menu (which are CLI-like tokens) into an array
    # mapfile -t reads lines into array elements, -t removes trailing newlines
    # Use process substitution <(...) to feed stdout of show_menu to mapfile
    mapfile -t menu_args < <(show_menu)

    # Construct a new argument list starting with the menu output
    local -a new_cli=("${menu_args[@]}")

    # If an input file was already specified on the CLI, add it to the new list
    # Otherwise, the file will be prompted for later
    if [[ -n "$INPUT_FILE" ]]; then
      new_cli+=("$INPUT_FILE")
    fi

    # Reset filters and INPUT_FILE globals before re-parsing
    # This prevents menu options from being added to existing CLI filters
    filters=()
    INPUT_FILE=""
    format="mp4" # Reset format as well, as it can be set by --convert

    # Re-parse the arguments using the combined menu output and original file (if any)
    # Pass the new argument list to parse_args
    parse_args "${new_cli[@]}"
  fi

  # 4. If INPUT_FILE is still not set (wasn't on CLI and wasn't added from menu args), prompt using fzf
  if [[ -z "$INPUT_FILE" ]]; then
    # Capture stdout of choose_file into INPUT_FILE
    INPUT_FILE=$(choose_file) || error_exit "No input file selected."
  fi

  # 5. Validate that the selected input file is readable
  # Use -r for readable check
  [[ -r "$INPUT_FILE" ]] || error_exit "Cannot read input file: '$INPUT_FILE'"

  # 6. Determine the output filename
  local dir base outfile # Declare variables locally
  # Get directory name, use -- for safety with paths starting with -
  dir=$(dirname -- "$INPUT_FILE")
  # Get base name (filename with extension)
  base=${INPUT_FILE##*/}
  # Remove extension and append _out
  base=${base%.*}_out
  # Generate unique name with chosen format by calling the function
  outfile=$(unique_output_name "$dir" "$base" "$format")

  # 7. Run ffmpeg with the collected filters
  # Pass the input file, output file, and the elements of the filters array as separate arguments
  run_ffmpeg "$INPUT_FILE" "$outfile" "${filters[@]}"

  # 8. Print success message with output file path to stderr
  printf '%bOutput saved to:%b %s\n' "$GREEN" "$RESET" "$outfile" >&2
}

main "$@"
