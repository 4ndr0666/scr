#!/bin/sh
# Author: 4ndr0666
# ========================================= // mpv-current.sh //
# Description:
#   - Discover the newest mpv IPC socket.
#   - Query MPV for the current fileâ€™s path.
#   - Escape spaces with backslashes so the output is verbatim escaped.
#   - Print that escaped path to stdout.
#   - Copy the escaped path to wl-copy if available.
# Usage: mpv-current.sh [socket_dir]

set -eu

# 1) Determine socket directory
if [ $# -ge 1 ]; then
    SOCKET_DIR=$1
elif [ -n "${XDG_RUNTIME_DIR:-}" ] && [ -d "$XDG_RUNTIME_DIR/mpvSockets" ]; then
    SOCKET_DIR="$XDG_RUNTIME_DIR/mpvSockets"
else
    SOCKET_DIR=${MPV_SOCKET_DIR:-/tmp/mpvSockets}
fi

# 2) Validate socket directory
[ -d "$SOCKET_DIR" ] || {
    printf 'Error: socket directory not found: %s\n' "$SOCKET_DIR" >&2
    exit 1
}

# 3) Pick the most recent socket
SOCKET=$(ls -1t "$SOCKET_DIR"/* 2>/dev/null | head -n1 || true)
[ -n "$SOCKET" ] && [ -S "$SOCKET" ] || {
    printf 'Error: no mpv socket found in: %s\n' "$SOCKET_DIR" >&2
    exit 1
}

# 4) Ensure dependencies
for cmd in socat jq; do
    command -v "$cmd" >/dev/null 2>&1 || {
        printf 'Error: required command not found: %s\n' "$cmd" >&2
        exit 1
    }
done

# 5) Query MPV for the path
JSON='{"command":["get_property","path"]}'
RESPONSE=$(printf '%s\n' "$JSON" | socat STDIO UNIX-CONNECT:"$SOCKET")

# 6) Extract unescaped file path
FILEPATH=$(printf '%s' "$RESPONSE" | jq -er '.data // empty') || {
    printf 'Error: no file is currently playing\n' >&2
    exit 1
}

# 7) Escape spaces (and tabs) with backslashes
ESCAPED=$(printf '%s' "$FILEPATH" | sed -e 's/\\/\\\\/g' -e 's/ /\\ /g')

# 8) Print and copy
printf '%s\n' "$ESCAPED"
command -v wl-copy >/dev/null 2>&1 && printf '%s' "$ESCAPED" | wl-copy
