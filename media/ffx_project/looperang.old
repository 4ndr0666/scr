#!/usr/bin/env sh
##############################################################################
# looperang_fzf.sh
#
# A POSIX-compliant shell script that uses FFmpeg + fzf to create a "looperang"
# (forward + reverse) effect by converting a video to two separate segments and
# concatenating them. Leverages the image-sequence method for maximum reliability,
# but FIXES the reversed naming problem by renaming frames in descending order.
#
# REQUIREMENTS:
#   - ffmpeg (with libx264 support)
#   - fzf
#   - POSIX shell (dash, ash, bash in POSIX mode, etc.)
#
# USAGE:
#   1) Make this script executable: chmod +x looperang_fzf.sh
#   2) Run: ./looperang_fzf.sh
#   3) Select your video in the fzf menu
#   4) Wait for frames extraction, reversing, final concatenation
#   5) Enjoy your truly reversed looperang.mov
##############################################################################

set -u
# Uncomment for debugging:
# set -x

# Trap signals to handle unexpected exits
trap 'echo "Script interrupted! Cleaning up..."; cleanup_and_exit 1' INT TERM HUP

##############################################################################
# Helper Functions
##############################################################################

cleanup_and_exit() {
  code="$1"
  # Perform any immediate cleanup here if needed
  exit "$code"
}

prompt_continue() {
  printf "%s [y/N]: " "$1"
  read -r ans
  case "$ans" in
    [yY]) return 0 ;;
    *)    return 1 ;;
  esac
}

##############################################################################
# Main Script Logic
##############################################################################

# 1) Use fzf to pick an input file from the current directory:
#    Adjust patterns (*.mov *.mp4) as needed.
INPUT_FILE="$(ls -1 ./*.mov ./*.mp4 2>/dev/null | fzf --prompt="Select a video to looperang: ")"
if [ -z "${INPUT_FILE:-}" ]; then
  echo "No file selected. Exiting..."
  exit 1
fi

# Derive a simple base name for output
BASENAME="$(basename "$INPUT_FILE" | sed 's/\.[^.]*$//')"
FORWARD_FRAMES_DIR="forward_frames"
REVERSED_FRAMES_DIR="reversed_frames"
FORWARD_VIDEO="forward_${BASENAME}.mov"
REVERSED_VIDEO="reversed_${BASENAME}.mov"
LOOPERANG_VIDEO="${BASENAME}_looperang.mov"
CONCAT_LIST="concat_list_${BASENAME}.txt"

echo "Selected file: $INPUT_FILE"
echo "Will generate frames in: $FORWARD_FRAMES_DIR and $REVERSED_FRAMES_DIR"
echo "Final output: $LOOPERANG_VIDEO"
echo

# Confirm with user before proceeding
if ! prompt_continue "Proceed with image-sequence looperang creation?"; then
  echo "Aborting."
  exit 0
fi

# 2) Prepare directories
mkdir -p "$FORWARD_FRAMES_DIR" "$REVERSED_FRAMES_DIR"

##############################################################################
# STEP A: Extract Forward Frames
##############################################################################
echo "Extracting frames to $FORWARD_FRAMES_DIR..."
ffmpeg -i "$INPUT_FILE" -qscale:v 2 "${FORWARD_FRAMES_DIR}/frame-%06d.jpg"
echo "Forward frames extraction complete."
echo

##############################################################################
# STEP B: Copy into reversed_frames in True Reversed Order
##############################################################################
echo "Generating reversed frames..."

# Count how many frames we extracted
TOTAL_FRAMES="$(ls -1 "${FORWARD_FRAMES_DIR}"/*.jpg 2>/dev/null | wc -l)"

# We'll iterate in descending order, but rename them with ascending numbers
# so that ffmpeg sees them in reversed motion when scanning in ascending order.
i=1
# sort -r ensures we read from largest file number to smallest
ls -1 "${FORWARD_FRAMES_DIR}"/*.jpg | sort -r | while read -r fwd_file; do
  # Generate a new name in ascending order for reversed_frames
  newname=$(printf "frame-%06d.jpg" "$i")
  cp "$fwd_file" "${REVERSED_FRAMES_DIR}/${newname}"
  i=$(( i + 1 ))
done

echo "Reversed frames done. (Total frames: $TOTAL_FRAMES)"
echo

##############################################################################
# STEP C: Rebuild Forward Video
##############################################################################
echo "Building forward video: $FORWARD_VIDEO"
ffmpeg -framerate 30 \
  -i "${FORWARD_FRAMES_DIR}/frame-%06d.jpg" \
  -c:v libx264 -pix_fmt yuv420p -movflags +faststart \
  "$FORWARD_VIDEO"
echo

##############################################################################
# STEP D: Rebuild Reversed Video
##############################################################################
echo "Building reversed video: $REVERSED_VIDEO"
ffmpeg -framerate 30 \
  -i "${REVERSED_FRAMES_DIR}/frame-%06d.jpg" \
  -c:v libx264 -pix_fmt yuv420p -movflags +faststart \
  "$REVERSED_VIDEO"
echo

##############################################################################
# STEP E: Concatenate Forward + Reversed
##############################################################################
echo "Creating concat list: $CONCAT_LIST"
cat <<EOF > "$CONCAT_LIST"
file '$FORWARD_VIDEO'
file '$REVERSED_VIDEO'
EOF

echo "Concatenating to final: $LOOPERANG_VIDEO"
ffmpeg -f concat -safe 0 -i "$CONCAT_LIST" -c copy "$LOOPERANG_VIDEO"
echo

##############################################################################
# Optional Cleanup
##############################################################################
if prompt_continue "Cleanup intermediate frames/videos?"; then
  echo "Removing temporary files..."
  rm -rf "$FORWARD_FRAMES_DIR" "$REVERSED_FRAMES_DIR" "$FORWARD_VIDEO" "$REVERSED_VIDEO" "$CONCAT_LIST"
  echo "Cleanup complete."
fi

echo "Looperang creation finished. Output is: $LOOPERANG_VIDEO"

exit 0
