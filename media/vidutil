#!/bin/bash
# --- // 4ndr0666_Video_Utility_Script // ========

# Enable strict error handling
set -euo pipefail

# --- // BANNER:
echo -e "\033[34m"
cat << "EOF"
  ____   ____.__    .___      __  .__.__              .__
  \   \ /   /|__| __| _/_ ___/  |_|__|  |        _____|  |__
   \   Y   / |  |/ __ |  |  \   __\  |  |       /  ___/  |  \
    \     /  |  / /_/ |  |  /|  | |  |  |__     \___ \|   Y  \
     \___/   |__\____ |____/ |__| |__|____/ /\ /____  >___|  /
                     \/                     \/      \/     \/
EOF
echo -e "\033[0m"

# --- // Constants and Definitions
DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/vidutil"
LOG_DIR="$DATA_HOME/logs"
mkdir -p "$LOG_DIR" || { echo -e "\033[31mError: Failed to create log directory at '$LOG_DIR'.\033[0m"; exit 1; }

# --- // Dependency Management
DEPENDENCIES=(ffmpeg ffprobe fzf bc)
MISSING_DEPS=()
for cmd in "${DEPENDENCIES[@]}"; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
        MISSING_DEPS+=("$cmd")
    fi
done

if [ "${#MISSING_DEPS[@]}" -ne 0 ]; then
    echo "The following dependencies are missing:"
    for dep in "${MISSING_DEPS[@]}"; do
        echo "  - $dep"
    done
    if command -v yay >/dev/null 2>&1; then
        read -rp "Would you like to attempt to install the missing dependencies using 'yay'? (y/n): " install_choice
        if [[ "$install_choice" =~ ^[Yy]$ ]]; then
            for dep in "${MISSING_DEPS[@]}"; do
                echo "Installing $dep..."
                yay -S --noconfirm "$dep" || {
                    echo -e "\033[31mError: Failed to install $dep. Please install it manually.\033[0m"
                    exit 1
                }
            done
            echo "All dependencies installed successfully."
        else
            echo "Please install the missing dependencies and try again."
            exit 1
        fi
    else
        echo -e "\033[31mError: 'yay' is not installed. Please install 'yay' and rerun the script.\033[0m"
        echo "You can install 'yay' by following the instructions at https://github.com/Jguer/yay"
        exit 1
    fi
fi

# --- // Utility Functions

# Logging Function
log_command() {
    local logfile="$LOG_DIR/$1.log"
    shift
    local cmd=("$@")
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Executing: ${cmd[*]}" | tee -a "$logfile"
    "${cmd[@]}" 2>&1 | tee -a "$logfile"
    local exit_code=${PIPESTATUS[0]}
    if [ "$exit_code" -ne 0 ]; then
        echo -e "\033[31mError: Command '${cmd[*]}' failed with exit code $exit_code. Check '$logfile' for details.\033[0m"
    fi
    return "$exit_code"
}

# Error Handling Function
error_exit() {
    local message="$1"
    echo -e "\033[31mError: $message\033[0m" | tee -a "$LOG_DIR/error.log"
    exit 1
}

# Validate Frame Rate Function
validate_frame_rate() {
    local framerate="$1"
    if [[ ! "$framerate" =~ ^[0-9]+$ ]]; then
        echo -e "\033[31mError: Frame rate must be a numerical value.\033[0m"
        return 1
    fi
    if (( framerate < 15 )) || (( framerate > 240 )); then
        echo -e "\033[31mError: Frame rate must be between 15 and 240 FPS.\033[0m"
        return 1
    fi
    return 0
}

# Sanitize Filename Function
sanitize_filename() {
    local filename="$1"
    # Remove or replace invalid characters
    sanitized=$(echo "$filename" | sed 's/[<>:"/\\|?*]/_/g')
    echo "$sanitized"
}

# Check if GIF is Animated
is_animated_gif() {
    local gif="$1"
    local frame_count
    frame_count=$(ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_read_frames -of default=noprint_wrappers=1:nokey=1 "$gif")
    if [ "$frame_count" -gt 1 ]; then
        return 0
    else
        return 1
    fi
}

# --- // Video Processing Functions

# Verify Video Format Function
verify_video_format() {
    local video="$1"
    if [[ ! "$video" =~ \.(mp4|avi|mkv|mov|flv|wmv|webm|m4v|gif)$ ]]; then
        echo -e "\033[31mError: Unsupported video format. Supported formats are MP4, AVI, MKV, MOV, FLV, WMV, WEBM, M4V, and GIF.\033[0m"
        return 1
    fi
    return 0
}

# Extract Frames Function
extract_frames() {
    local video="$1"
    local fps="$2"
    local output_dir="${3:-frames}"

    verify_video_format "$video" || return 1

    # Check if GIF is animated
    if [[ "$video" =~ \.gif$ ]]; then
        if is_animated_gif "$video"; then
            echo -e "\033[33mWarning: Animated GIF detected. Frame extraction may result in large numbers of frames.\033[0m"
        else
            echo -e "\033[33mInfo: Static GIF detected. Proceeding with single frame extraction.\033[0m"
            fps=1
        fi
    fi

    mkdir -p "$output_dir" || error_exit "Failed to create directory '$output_dir'."

    fps=${fps:-30}

    if ! validate_frame_rate "$fps"; then
        return 1
    fi

    log_command "extract_frames" ffmpeg -i "$video" -vf "fps=$fps" "$output_dir/frame_%04d.png" || {
        echo -e "\033[31mError: Failed to extract frames. Check '$LOG_DIR/extract_frames.log' for details.\033[0m"
        return 1
    }

    echo -e "\033[32mFrames have been extracted to the '$output_dir' directory.\033[0m"
}

# Trim Video Function
trim_video() {
    local video="$1"
    local start_time="$2"
    local end_time="$3"
    local output_file="${4:-trimmed_video}"

    verify_video_format "$video" || return 1
    [[ -f "$video" ]] || { echo -e "\033[31mError: Video file not found.\033[0m"; return 1; }

    # Extract file extension
    local extension="${video##*.}"
    if [[ -z "$output_file" ]]; then
        output_file="trimmed_video.$extension"
    elif [[ "$output_file" != *.* ]]; then
        output_file="$output_file.$extension"
    fi
    output_file=$(sanitize_filename "$output_file")

    log_command "trim_video" ffmpeg -i "$video" -ss "$start_time" -to "$end_time" -c copy "$output_file" || {
        echo -e "\033[31mError: Failed to trim video. Check '$LOG_DIR/trim_video.log' for details.\033[0m"
        return 1
    }

    echo -e "\033[32mVideo has been trimmed and saved as '$output_file'.\033[0m"
}

# Merge Videos Function
merge_videos() {
    local output_file="${1:-merged_video}"
    shift
    local input_files=("$@")
    local temp_dir
    temp_dir="$(mktemp -d "$LOG_DIR/tmp_XXXXXX")" || error_exit "Failed to create temporary directory."

    # Function to clean up temporary files
    cleanup() {
        if [ -d "$temp_dir" ]; then
            rm -rf "$temp_dir"
            echo -e "\033[34mTemporary files cleaned up successfully.\033[0m"
        fi
    }
    # Expanded trap to handle additional signals
    trap cleanup EXIT INT TERM HUP

    local input_list="$temp_dir/input_list.txt"
    touch "$input_list" || error_exit "Failed to create input list file."

    echo -e "\033[34mProcessing videos for merging...\033[0m"

    # Prompt user for target resolution
    echo "Select target resolution:"
    PS3="Enter your choice (default 1080p): "
    options=("720p" "1080p" "1440p" "2160p")
    select opt in "${options[@]}"; do
        case "$opt" in
            "720p")
                target_resolution="1280x720"
                break
                ;;
            "1080p")
                target_resolution="1920x1080"
                break
                ;;
            "1440p")
                target_resolution="2560x1440"
                break
                ;;
            "2160p")
                target_resolution="3840x2160"
                break
                ;;
            *)
                target_resolution="1920x1080"
                echo "Defaulting to 1080p."
                break
                ;;
        esac
    done

    # Prompt user for target frame rate
    echo "Select target frame rate:"
    PS3="Enter your choice (default 60fps): "
    options_fps=("30" "60" "120")
    select opt_fps in "${options_fps[@]}"; do
        case "$opt_fps" in
            "30"|"60"|"120")
                target_framerate="$opt_fps"
                break
                ;;
            *)
                target_framerate=60
                echo "Defaulting to 60fps."
                break
                ;;
        esac
    done

    for file in "${input_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            echo -e "\033[31mError: File '$file' does not exist.\033[0m"
            continue
        fi

        verify_video_format "$file" || continue

        local normalized_file
        normalized_file="$temp_dir/$(basename "${file%.*}")_normalized.mp4"

        # Check if video has audio
        has_audio=$(ffprobe -v error -select_streams a:0 -show_entries stream=codec_type -of csv=p=0 "$file" || true)
        if [[ "$has_audio" == "audio" ]]; then
            audio_option=( -c:a aac -b:a 320k )
        else
            audio_option=( -an )
        fi

        # Correct pad filter syntax by replacing 'x' with ':' in pad dimensions
        # Extract width and height from target_resolution
        IFS='x' read -r pad_width pad_height <<< "$target_resolution"

        log_command "normalize_video" ffmpeg -y -i "$file" -c:v libx264 -crf 18 -preset slow "${audio_option[@]}" -vf "scale=${target_resolution}:force_original_aspect_ratio=decrease,pad=${pad_width}:${pad_height}:(ow-iw)/2:(oh-ih)/2" -r "$target_framerate" "$normalized_file" || {
            echo -e "\033[31mError: Failed to normalize '$file'.\033[0m"
            continue
        }

        echo "file '$normalized_file'" >> "$input_list"
    done

    if [[ ! -s "$input_list" ]]; then
        error_exit "No valid videos to merge."
    fi

    # Generate a timestamp for standardized naming if no name is provided
    if [[ -z "$output_file" ]]; then
        timestamp=$(date +"%Y%m%d_%H%M%S")
        output_file="merged_video_$timestamp.mp4"
    else
        # If output_file is provided without extension, append .mp4
        if [[ "$output_file" != *.* ]]; then
            output_file="$output_file.mp4"
        fi
    fi
    output_file=$(sanitize_filename "$output_file")

    # Ensure idempotency by appending a number if the file already exists
    if [[ -f "$output_file" ]]; then
        base="${output_file%.*}"
        ext="${output_file##*.}"
        i=1
        while [[ -f "${base}_$i.$ext" ]]; do
            ((i++))
        done
        output_file="${base}_$i.$ext"
        echo -e "\033[33mOutput file already exists. Saving as '$output_file'.\033[0m"
    fi

    echo -e "\033[34mMerging videos into '$output_file'...\033[0m"
    log_command "merge_videos" ffmpeg -y -f concat -safe 0 -i "$input_list" -c copy "$output_file" || {
        echo -e "\033[31mError: Failed to merge videos. Check '$LOG_DIR/merge_videos.log' for details.\033[0m"
        return 1
    }

    echo -e "\033[32mVideos have been merged into '$output_file'.\033[0m"
}

# --- // Main Menu for User Interaction
main_menu() {
    while true; do
        echo -e "\n# === // Vidutil // ===\n"
        echo "1. Screencaps"
        echo "2. Clip"
        echo "3. Merge Videos"
        echo "4. Exit"
        echo ""
        read -rp "By your command: " option

        case "$option" in
            1)
                # Screencaps: Select a single video file using fzf
                video_file=$(find "$(pwd)" -type f \( -iname "*.mp4" -o -iname "*.avi" -o -iname "*.mkv" -o -iname "*.mov" -o -iname "*.flv" -o -iname "*.wmv" -o -iname "*.webm" -o -iname "*.m4v" -o -iname "*.gif" \) ! -iname "*_normalized.*" | fzf --prompt="Select video file to capture frames> " \
                    --preview='ffprobe -v error -show_entries stream=width,height,r_frame_rate,codec_name -of default=noprint_wrappers=1 "{}"') || { echo -e "\033[31mError: fzf selection failed.\033[0m"; continue; }
                if [[ -z "$video_file" ]]; then
                    echo -e "\033[31mNo video file selected. Returning to menu.\033[0m"
                    continue
                fi
                echo -e "\033[32mSelected video: $video_file\033[0m"

                read -rp "Enter FPS (leave blank for default 30): " fps
                read -rp "Enter output directory (optional): " output_dir
                extract_frames "$video_file" "$fps" "${output_dir:-frames}"
                ;;
            2)
                # Clip: Select a single video file using fzf
                video_file=$(find "$(pwd)" -type f \( -iname "*.mp4" -o -iname "*.avi" -o -iname "*.mkv" -o -iname "*.mov" -o -iname "*.flv" -o -iname "*.wmv" -o -iname "*.webm" -o -iname "*.m4v" -o -iname "*.gif" \) ! -iname "*_normalized.*" | fzf --prompt="Select video file to clip> " \
                    --preview='ffprobe -v error -show_entries stream=width,height,r_frame_rate,codec_name -of default=noprint_wrappers=1 "{}"') || { echo -e "\033[31mError: fzf selection failed.\033[0m"; continue; }
                if [[ -z "$video_file" ]]; then
                    echo -e "\033[31mNo video file selected. Returning to menu.\033[0m"
                    continue
                fi
                echo -e "\033[32mSelected video: $video_file\033[0m"

                read -rp "Enter start time (format HH:MM:SS): " start_time
                read -rp "Enter end time (format HH:MM:SS): " end_time
                read -rp "Enter output file name (optional): " output_file
                trim_video "$video_file" "$start_time" "$end_time" "$output_file"
                ;;
            3)
                # Merge Videos: Select multiple video files using fzf
                mapfile -t videos < <(find "$(pwd)" -type f \( -iname "*.mp4" -o -iname "*.avi" -o -iname "*.mkv" -o -iname "*.mov" -o -iname "*.flv" -o -iname "*.wmv" -o -iname "*.webm" -o -iname "*.m4v" -o -iname "*.gif" \) ! -iname "*_normalized.*" | fzf --multi --prompt="Select videos to merge> " \
                    --preview='ffprobe -v error -show_entries stream=width,height,r_frame_rate,codec_name -of default=noprint_wrappers=1 "{}"') || { echo -e "\033[31mError: fzf selection failed.\033[0m"; continue; }
                if [ ${#videos[@]} -eq 0 ]; then
                    echo -e "\033[31mNo videos selected. Returning to menu.\033[0m"
                    continue
                fi
                echo -e "\033[32mSelected videos:\033[0m"
                for video in "${videos[@]}"; do
                    echo "$video"
                done

                read -rp "Enter output file name (optional): " output_file
                merge_videos "$output_file" "${videos[@]}"
                ;;
            4)
                echo "Exiting..."
                exit 0
                ;;
            *)
                echo -e "\033[31mInvalid option. Please try again.\033[0m"
                ;;
        esac
    done
}

# --- // Entry Point
main_menu

