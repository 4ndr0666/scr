#!/usr/bin/env python3
import os
import sys
import subprocess
import json
import logging
from concurrent.futures import ThreadPoolExecutor, TimeoutError
from typing import List, Dict, Any
from fractions import Fraction
import shutil
import tempfile
from tqdm import tqdm


# --- // Ensure custom_ffmpeg_build on path:
os.environ['PATH'] = f"{os.path.expanduser('~/bin')}:{os.environ.get('PATH', '')}"

# --- // Constants
SUPPORTED_CODECS = ['avc', 'h264', 'hev1', 'h265', 'hevc']
DEFAULT_VIDEO_CODEC = 'libx264'
DEFAULT_AUDIO_CODECS = ['aac', 'libopus', 'libmp3lame']
REQUIRED_TOOLS = ['ffmpeg', 'mediainfo', 'fzf']
GREEN = "\033[38;2;57;255;20m"
BOLD = "\033[1m"
RED = "\033[0;31m"
NC = "\033[0m"  # No Color
MAX_WORKERS = os.cpu_count()

logging.basicConfig(
    filename='video_processing.log',
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s'
)

def print_warning(message: str):
    """Print a warning message."""
    print(f"{RED}⚠️  {message}{NC}")
    logging.warning(message)

def print_status(message: str, status: str = "OK"):
    """Print a status message with a symbol."""
    status_symbol = f"{GREEN}✓{NC}" if status == "OK" else f"{RED}❌{NC}"
    print(f"{message} [{status_symbol}]\n")
    logging.info(f"{message} [{status}]")
    
def check_dependencies():
    """Check if required dependencies are installed."""
    import shutil

    ffmpeg_path = shutil.which('ffmpeg')
    if not ffmpeg_path:
        print_warning("FFmpeg is not found in your PATH.")
        sys.exit(1)

    print_status(f"Using FFmpeg at {ffmpeg_path}")

    # Check if required dependencies are installed
    missing_commands = [cmd for cmd in REQUIRED_TOOLS if not shutil.which(cmd)]
    if missing_commands:
        print_warning(f"The following required commands are missing: {', '.join(missing_commands)}")
        print_warning("Please install them using your package manager and try again.")
        sys.exit(1)

    # Check if ffmpeg has libx264 encoder
    try:
        result = subprocess.run([ffmpeg_path, '-encoders'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if 'libx264' not in result.stdout:
            print_warning(f"FFmpeg at {ffmpeg_path} does not have 'libx264' encoder support.")
            print_warning("Please install FFmpeg with 'libx264' support and try again.")
            sys.exit(1)
    except Exception as e:
        logging.error(f"Error checking FFmpeg encoders: {e}")
        print_warning("An error occurred while checking FFmpeg encoders. Check the logs for more details.")
        sys.exit(1)
    logging.info("All dependencies are satisfied.")

def run_command(command: List[str], description: str = "", display_output: bool = False) -> str:
    """Run a system command and optionally display its output in real-time."""
    try:
        logging.info(f"Running command: {' '.join(command)}")
        if display_output:
            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
            output = ''
            for line in process.stdout:
                print(line, end='')  # Display output in real-time
                output += line
            process.wait()
            return_code = process.returncode
            if return_code != 0:
                raise subprocess.CalledProcessError(return_code, command)
            logging.info(f"{description} - Command executed successfully: {' '.join(command)}")
            return output
        else:
            result = subprocess.run(command, check=True, capture_output=True, text=True)
            logging.info(f"{description} - Command executed successfully: {' '.join(command)}")
            return result.stdout
    except subprocess.CalledProcessError as e:
        logging.error(f"{description} - Command '{' '.join(command)}' failed with exit code {e.returncode}")
        print_warning(f"An error occurred while executing a command. Check the logs for more details.")
        raise
    except Exception as e:
        logging.error(f"{description} - An unexpected error occurred: {e}")
        print_warning(f"An unexpected error occurred. Check the logs for more details.")
        raise
        
class VideoFile:
    """Represents a video file and its properties."""

    def __init__(self, filepath: str):
        self.filepath = filepath
        self.basename = os.path.basename(filepath)
        self.width = 0
        self.height = 0
        self.frame_rate = 0.0
        self.codec = ''
        self.audio_codec = ''
        self.duration = 0.0
        self.bitrate = 0
        self.has_audio = False
        self.issues = []
        self._get_properties()

    def _get_properties(self):
        """Extract properties using ffprobe."""
        try:
            # Get video properties
            command = [
                'ffprobe', '-v', 'error',
                '-select_streams', 'v:0',
                '-show_entries', 'stream=width,height,r_frame_rate,codec_name,duration,bit_rate',
                '-of', 'json', self.filepath
            ]
            result_stdout = run_command(command, description=f"Getting video properties for {self.basename}")
            data = json.loads(result_stdout)
            stream = data['streams'][0]
            self.width = int(stream.get('width', 0))
            self.height = int(stream.get('height', 0))
            self.codec = stream.get('codec_name', '')
            fps_str = stream.get('r_frame_rate', '0/1')
            self.frame_rate = float(Fraction(fps_str))
            self.duration = float(stream.get('duration', 0.0))
            self.bitrate = int(stream.get('bit_rate', 0))
            logging.info(f"Video properties for {self.filepath}: {self.width}x{self.height}, {self.frame_rate}fps, codec={self.codec}")

            # Check for audio stream
            command = [
                'ffprobe', '-v', 'error',
                '-select_streams', 'a:0',
                '-show_entries', 'stream=codec_name',
                '-of', 'json', self.filepath
            ]
            result_stdout = run_command(command, description=f"Checking audio properties for {self.basename}")
            data = json.loads(result_stdout)
            if data.get('streams'):
                self.has_audio = True
                self.audio_codec = data['streams'][0].get('codec_name', '')
                logging.info(f"Audio codec for {self.filepath}: {self.audio_codec}")
            else:
                self.has_audio = False
                logging.info(f"No audio stream in {self.filepath}")
        except Exception as e:
            logging.error(f"Error getting properties for {self.filepath}: {e}")
            raise

    def detect_issues(self, fix_issues=False):
        """Detect potential issues with the video file and attempt mitigation."""
        logging.info(f"Detecting issues for video {self.filepath}")
        if self.width == 0 or self.height == 0:
            self.issues.append('Resolution not detected.')
        if self.frame_rate == 0.0:
            self.issues.append('Frame rate not detected.')
        if self.codec.lower() not in SUPPORTED_CODECS:
            self.issues.append(f'Unsupported codec: {self.codec}')
        if not os.path.exists(self.filepath):
            self.issues.append('File does not exist.')
        if self.duration == 0.0:
            self.issues.append('Duration not detected.')

        # Attempt to fix issues
        if self.issues:
            print_warning(f"Issues detected in {self.basename}:")
            for issue in self.issues:
                print_warning(f" - {issue}")
            if fix_issues:
                self.attempt_fix()
            else:
                fix = input("Would you like to attempt to fix these issues? (y/n): ").lower()
                if fix == 'y':
                    self.attempt_fix()
        else:
            print_status(f"No issues detected in {self.basename}")

    def attempt_fix(self, output_dir='.'):
        """Attempt to fix detected issues."""
        logging.info(f"Attempting to fix issues for video {self.filepath}")
        output_file = os.path.join(output_dir, f"fixed_{self.basename}")
        try:
            command = ['ffmpeg', '-y', '-i', self.filepath]
            # Adjust video codec and quality settings based on the codec
            if self.codec.lower() in ['vp8', 'vp9']:
                command += ['-c:v', 'libvpx', '-b:v', '1M', '-c:a', 'libvorbis']
            else:
                command += ['-c:v', DEFAULT_VIDEO_CODEC, '-preset', 'fast', '-b:v', '1M']
                if self.has_audio:
                    command += ['-c:a', DEFAULT_AUDIO_CODECS[0], '-b:a', '256k']
                else:
                    command += ['-an']
            command += [output_file]
            run_command(command, description=f"Fixing issues for {self.basename}")
            print_status(f"Issues fixed for {self.basename}. Saved as {output_file}")
            # Update filepath to the fixed file
            self.filepath = output_file
            self.basename = os.path.basename(self.filepath)
            self._get_properties()  # Refresh properties
            self.issues = []  # Clear issues after fixing
        except Exception as e:
            logging.error(f"Error fixing issues for {self.basename}: {e}")
            print_warning(f"Failed to fix issues for {self.basename}")

class VideoProcessor:
    """Processes video files based on user commands."""
    def __init__(self, max_workers=None):
        self.executor = ThreadPoolExecutor(max_workers=max_workers or MAX_WORKERS)

    def analyze_video(self, video: VideoFile):
        """Analyze a video file using MediaInfo."""
        logging.info(f"Analyzing video {video.filepath}")
        try:
            command = ['mediainfo', video.filepath]
            output = run_command(command, description=f"Analyzing video {video.basename}")
            print(output)
        except Exception as e:
            logging.error(f"Error analyzing video {video.filepath}: {e}")
            print_warning(f"Error analyzing video {video.basename}")

    def normalize_videos(self, videos: List[VideoFile], output_dir: str):
        """Normalize videos to common properties."""
        logging.info("Starting normalization of videos")
        target_props = self.determine_common_properties(videos)
        normalized_files = []
        futures = []
        for video in videos:
            futures.append(self.executor.submit(self._normalize_video, video, target_props, output_dir))

        for future in tqdm(futures, desc="Normalizing videos"):
            try:
                result = future.result(timeout=1200)  # Increased timeout for larger files
                if result:
                    normalized_files.append(result)
            except TimeoutError:
                logging.error("Normalization task timed out.")
                print_warning("A normalization task timed out.")
            except Exception as e:
                logging.error(f"Error during normalization: {e}")
                print_warning("An error occurred during normalization.")
        return normalized_files

    def _normalize_video(self, video: VideoFile, target_props: Dict[str, Any], output_dir: str):
        """Normalize a single video."""
        output_file = os.path.join(output_dir, f"normalized_{video.basename}")
        need_reencode = (
            (video.width, video.height) != target_props['resolution'] or
            abs(video.frame_rate - target_props['frame_rate']) > 0.1 or
            video.codec.lower() not in SUPPORTED_CODECS
        )
        try:
            command = ['ffmpeg', '-y', '-i', video.filepath]
            if not need_reencode:
                logging.info(f"{video.basename} matches target properties, copying streams")
                if video.has_audio:
                    command += ['-c:v', 'copy', '-c:a', 'copy']
                else:
                    command += ['-c:v', 'copy', '-an']
                command += [output_file]
            else:
                logging.info(f"Re-encoding {video.basename} to match target properties")
                width, height = target_props['resolution']
                command += ['-vf', f"scale={width}:{height},fps={target_props['frame_rate']}"]
                command += ['-c:v', DEFAULT_VIDEO_CODEC, '-preset', 'fast', '-b:v', '1M']
                if video.has_audio:
                    command += ['-c:a', DEFAULT_AUDIO_CODECS[0], '-b:a', '256k']
                else:
                    command += ['-an']
                command += [output_file]
            run_command(command, description=f"Normalizing video {video.basename}")
            logging.info(f"Normalization complete for {video.basename}")
            print_status(f"Normalization complete for {video.basename}")
            return output_file
        except Exception as e:
            logging.error(f"Error normalizing video {video.basename}: {e}")
            print_warning(f"Error normalizing video {video.basename}")
            return None

    def determine_common_properties(self, videos: List[VideoFile]) -> Dict[str, Any]:
        """Determine common properties among videos."""
        logging.info("Determining common properties for normalization")
        # Collect resolutions and frame rates
        resolutions = [(video.width, video.height) for video in videos]
        frame_rates = [video.frame_rate for video in videos]

        # Determine the most common resolution and frame rate
        target_resolution = max(set(resolutions), key=resolutions.count)
        target_frame_rate = max(set(frame_rates), key=frame_rates.count)

        logging.info(f"Target resolution: {target_resolution}, frame rate: {target_frame_rate}")
        return {'resolution': target_resolution, 'frame_rate': target_frame_rate}

    def change_speed(self, video: VideoFile, output_file: str, speed_factor: float, smooth_motion: bool = False):
        """
        Change the speed of a video.
    
        :param video: VideoFile object.
        :param output_file: Output file name.
        :param speed_factor: Speed factor (e.g., 0.5 for slow-motion, 2 for fast-motion).
        :param smooth_motion: If True, apply motion interpolation for smoother slow-motion.
        """
        logging.info(f"Changing speed of {video.filepath} by factor {speed_factor}")
        try:
            if speed_factor <= 0:
                print_warning("Speed factor must be greater than 0.")
                return
    
            command = ['ffmpeg', '-y', '-i', video.filepath]
    
            # Adjust video speed
            video_filter = f"setpts={1/speed_factor}*PTS"
    
            if smooth_motion and speed_factor < 1.0:
                logging.info(f"Applying smooth slow-motion interpolation for {video.filepath}")
                print_status("Applying smooth slow-motion interpolation. This may take a while...")
                video_filter += f",minterpolate=mi_mode=mci:mc_mode=aobmc:vsbmc=1:fps={video.frame_rate}"
    
            logging.info(f"Video filter: {video_filter}")
    
            if video.has_audio:
                # Adjust audio speed
                atempo_filters = []
                temp_speed = speed_factor
                # atempo supports between 0.5 and 2.0, so chain filters as needed
                while temp_speed < 0.5 or temp_speed > 2.0:
                    if temp_speed < 0.5:
                        atempo_filters.append('atempo=0.5')
                        temp_speed /= 0.5
                    else:
                        atempo_filters.append('atempo=2.0')
                        temp_speed /= 2.0
                atempo_filters.append(f"atempo={temp_speed}")
                audio_filter = ','.join(atempo_filters)
                logging.info(f"Audio filter: {audio_filter}")
    
                # Combine filters in filter_complex
                filter_complex = f"[0:v]{video_filter}[v];[0:a]{audio_filter}[a]"
                command += [
                    '-filter_complex', filter_complex,
                    '-map', '[v]', '-map', '[a]'
                ]
            else:
                # No audio stream, apply video filter directly
                command += [
                    '-vf', video_filter
                ]
    
            command += [
                '-c:v', DEFAULT_VIDEO_CODEC, '-preset', 'fast', '-b:v', '1M'
            ]
    
            if video.has_audio:
                command += ['-c:a', DEFAULT_AUDIO_CODECS[0], '-b:a', '256k']
            else:
                command += ['-an']
    
            command += [output_file]
    
            # Run the command with real-time output display
            run_command(command, description=f"Changing speed for {video.basename}", display_output=True)
    
            print_status(f"Speed change applied to {video.basename}. Saved as {output_file}")
        except Exception as e:
            logging.error(f"Error changing speed of {video.filepath}: {e}")
            print_warning(f"Failed to change speed for {video.basename}")
    
    def adjust_resolution(self, video: VideoFile, output_file: str, resolution: str):
        """Adjust the resolution of a video."""
        logging.info(f"Adjusting resolution of {video.filepath} to {resolution}")
        try:
            command = ['ffmpeg', '-y', '-i', video.filepath, '-vf', f"scale={resolution}", '-c:v', DEFAULT_VIDEO_CODEC,
                       '-preset', 'fast', '-b:v', '1M']
            if video.has_audio:
                command += ['-c:a', DEFAULT_AUDIO_CODECS[0], '-b:a', '256k']
            else:
                command += ['-an']
            command += [output_file]
            run_command(command, description=f"Adjusting resolution for {video.basename}")
            print_status(f"Resolution adjusted for {video.basename}. Saved as {output_file}")
        except Exception as e:
            logging.error(f"Error adjusting resolution of {video.filepath}: {e}")
            print_warning(f"Failed to adjust resolution for {video.basename}")

    def convert_video_format(self, video: VideoFile, output_file: str, new_format: str):
        """
        Convert the video format to a different container.

        :param video: VideoFile object.
        :param output_file: Output file name with new format.
        :param new_format: Desired format (e.g., 'mp4', 'mkv').
        """
        logging.info(f"Converting format of {video.filepath} to {new_format}")
        try:
            command = ['ffmpeg', '-y', '-i', video.filepath]
            if video.has_audio:
                command += ['-c:v', 'copy', '-c:a', 'copy']
            else:
                command += ['-c:v', 'copy', '-an']
            command += [output_file]
            run_command(command, description=f"Converting video format for {video.basename}")
            print_status(f"Format conversion completed for {video.basename}. Saved as {output_file}")
        except Exception as e:
            logging.error(f"Error converting format of {video.filepath}: {e}")
            print_warning(f"Failed to convert format for {video.basename}")

    def apply_filters(self, video: VideoFile, output_file: str, filters: str):
        """
        Apply specified video filters to the video.

        :param video: VideoFile object.
        :param output_file: Output file name.
        :param filters: Filters to apply (e.g., 'grayscale, negate').
        """
        logging.info(f"Applying filters to {video.filepath}: {filters}")
        try:
            command = ['ffmpeg', '-y', '-i', video.filepath, '-vf', filters, '-c:v', DEFAULT_VIDEO_CODEC, '-preset', 'fast',
                       '-b:v', '1M']
            if video.has_audio:
                command += ['-c:a', DEFAULT_AUDIO_CODECS[0], '-b:a', '256k']
            else:
                command += ['-an']
            command += [output_file]
            run_command(command, description=f"Applying filters to {video.basename}")
            print_status(f"Filters applied to {video.basename}. Saved as {output_file}")
        except Exception as e:
            logging.error(f"Error applying filters to {video.filepath}: {e}")
            print_warning(f"Failed to apply filters to {video.basename}")

    def extract_frames(self, video: VideoFile, output_dir: str):
        """
        Extract frames from the video and save them as images.

        :param video: VideoFile object.
        :param output_dir: Directory to save the extracted frames.
        """
        logging.info(f"Extracting frames from {video.filepath}")
        try:
            if not os.path.exists(output_dir):
                os.makedirs(output_dir)
            command = ['ffmpeg', '-y', '-i', video.filepath, f'{os.path.join(output_dir, "frame_%04d.png")}']
            run_command(command, description=f"Extracting frames from {video.basename}")
            print_status(f"Frames extracted from {video.basename}. Saved in {output_dir}")
        except Exception as e:
            logging.error(f"Error extracting frames from {video.filepath}: {e}")
            print_warning(f"Failed to extract frames from {video.basename}")

    def concatenate_videos(self, videos: List[VideoFile], output_file: str):
        """Concatenate multiple video files using ffmpeg."""
        logging.info("Starting concatenation process")
        normalized_files = self.normalize_videos(videos, os.path.dirname(output_file))
        if not normalized_files:
            print_warning("No videos were successfully normalized. Cannot proceed with concatenation.")
            return

        # Use tempfile to safely create a temporary file for concatenation
        with tempfile.NamedTemporaryFile(mode='w', delete=False) as temp_file:
            temp_file_name = temp_file.name
            for file in normalized_files:
                # Write absolute paths to the concat list
                temp_file.write(f"file '{os.path.abspath(file)}'\n")
            temp_file.flush()

        try:
            # First attempt: Concatenate without re-encoding
            command = ['ffmpeg', '-y', '-f', 'concat', '-safe', '0', '-i', temp_file_name]
            if videos[0].has_audio:
                command += ['-c', 'copy']
            else:
                command += ['-c:v', 'copy', '-an']
            command += [output_file]
            logging.info(f"Running ffmpeg concat command: {' '.join(command)}")
            run_command(command, description="Concatenating videos without re-encoding")
            logging.info(f"Concatenation successful. Output saved to {output_file}.")
            print_status(f"Concatenation successful. Output saved to {output_file}.")
        except subprocess.CalledProcessError as e:
            logging.warning(f"Concatenation failed: {e}. Attempting re-encoding.")
            try:
                # Fallback: Re-encode if copy mode fails
                command = ['ffmpeg', '-y', '-f', 'concat', '-safe', '0', '-i', temp_file_name]
                command += ['-c:v', DEFAULT_VIDEO_CODEC, '-preset', 'fast', '-b:v', '1M']
                if videos[0].has_audio:
                    command += ['-c:a', DEFAULT_AUDIO_CODECS[0], '-b:a', '256k']
                else:
                    command += ['-an']
                command += [output_file]
                logging.info(f"Running ffmpeg re-encoding command: {' '.join(command)}")
                run_command(command, description="Concatenating videos with re-encoding")
                logging.info(f"Concatenation (re-encoding) successful. Output saved to {output_file}.")
                print_status(f"Concatenation (re-encoding) successful. Output saved to {output_file}.")
            except Exception as e:
                logging.error(f"Error during re-encoded concatenation: {e}")
                print_warning("Error during concatenation even after re-encoding.")
                if os.path.exists(output_file):
                    os.remove(output_file)
        finally:
            # Ensure the temp file is deleted after use
            try:
                os.unlink(temp_file_name)
                logging.info(f"Temporary file {temp_file_name} deleted.")
            except FileNotFoundError:
                logging.warning(f"Temporary file {temp_file_name} was already removed.")

    def extract_audio(self, video: VideoFile, output_file: str, format_choice: str):
        """
        Extract the audio track from the video file.

        :param video: VideoFile object.
        :param output_file: Output file name for the extracted audio.
        :param format_choice: Audio format (e.g., 'opus', 'mp3').
        """
        logging.info(f"Extracting audio from {video.filepath} in format {format_choice}")
        try:
            if not video.has_audio:
                print_warning(f"No audio stream found in {video.basename}.")
                return
            # Map format choices to codecs
            format_codecs = {
                'mp3': 'libmp3lame',
                'opus': 'libopus',
                'aac': 'aac'
            }
            audio_codec = format_codecs.get(format_choice.lower())
            if not audio_codec:
                print_warning(f"Unsupported audio format: {format_choice}")
                return
            command = ['ffmpeg', '-y', '-i', video.filepath, '-vn', '-c:a', audio_codec, '-b:a', '256k', output_file]
            run_command(command, description=f"Extracting audio from {video.basename}")
            print_status(f"Audio extracted from {video.basename}. Saved as {output_file}")
        except Exception as e:
            logging.error(f"Error extracting audio from {video.filepath}: {e}")
            print_warning(f"Failed to extract audio from {video.basename}")

    def merge_audio_with_video(self, video: VideoFile, audio_file: str, output_file: str):
        """
        Merge an external audio file with a video.

        :param video: VideoFile object.
        :param audio_file: Path to the external audio file.
        :param output_file: Output file name for the merged video.
        """
        logging.info(f"Merging {audio_file} with {video.filepath}")
        try:
            if not os.path.exists(audio_file):
                print_warning(f"Audio file does not exist: {audio_file}")
                return
            command = ['ffmpeg', '-y', '-i', video.filepath, '-i', audio_file, '-c:v', 'copy', '-c:a', DEFAULT_AUDIO_CODECS[0], '-b:a', '256k', output_file]
            run_command(command, description=f"Merging audio with {video.basename}")
            print_status(f"Audio merged with {video.basename}. Saved as {output_file}")
        except Exception as e:
            logging.error(f"Error merging audio with {video.filepath}: {e}")
            print_warning(f"Failed to merge audio with {video.basename}")

    def handle_metadata(self, video: VideoFile, output_file: str, keep_metadata: bool = True):
        """
        Handle metadata retention or removal in the video file.

        :param video: VideoFile object.
        :param output_file: Output file name with the metadata modifications.
        :param keep_metadata: Whether to retain or remove metadata.
        """
        logging.info(f"Handling metadata for {video.filepath}. Keep metadata: {keep_metadata}")
        try:
            command = ['ffmpeg', '-y', '-i', video.filepath]
            if keep_metadata:
                command += ['-map_metadata', '0']
            else:
                command += ['-map_metadata', '-1']
            command += ['-c:v', 'copy', '-c:a', 'copy', output_file]
            run_command(command, description=f"Handling metadata for {video.basename}")
            print_status(f"Metadata handling complete for {video.basename}. Saved as {output_file}")
        except Exception as e:
            logging.error(f"Error handling metadata for {video.filepath}: {e}")
            print_warning(f"Failed to handle metadata for {video.basename}")

    def generate_video_report(self, video: VideoFile, output_file: str):
        """
        Generate a detailed report for the video file.

        :param video: VideoFile object.
        :param output_file: Output file name for the report.
        """
        logging.info(f"Generating video report for {video.filepath}")
        try:
            command = ['ffprobe', '-v', 'error', '-show_format', '-show_streams', '-of', 'json', video.filepath]
            report = run_command(command, description=f"Generating video report for {video.basename}")
            with open(output_file, 'w') as f:
                f.write(report)
            print_status(f"Video report generated for {video.basename}. Saved as {output_file}")
        except Exception as e:
            logging.error(f"Error generating report for {video.filepath}: {e}")
            print_warning(f"Failed to generate report for {video.basename}")

class UserInterface:
    """Handles user interactions."""

    def __init__(self):
        self.processor = VideoProcessor()

    def main_menu(self):
        """Display the main menu and handle user selection."""
        while True:
            print(f"{GREEN}#{NC} ========= {GREEN}// DMX //{NC}")
            print(f"{GREEN}1.{NC}) Analyze         {GREEN}9.{NC}) Extract Frames")
            print(f"{GREEN}2.{NC}) Autofix         {GREEN}10.{NC}) Concatenate")
            print(f"{GREEN}3.{NC}) Normalize       {GREEN}11.{NC}) Extract Audio")
            print(f"{GREEN}4.{NC}) Change Speed    {GREEN}12.{NC}) Merge Audio")
            print(f"{GREEN}5.{NC}) Adjust Resolution{GREEN}13.{NC}) Metadata")
            print(f"{GREEN}6.{NC}) Convert Format  {GREEN}14.{NC}) Report")
            print(f"{GREEN}7.{NC}) Apply Filters   {GREEN}Q{NC}) Quit")
            print(f"{GREEN}8.{NC}) Help")
            print("")
            choice = input(f"{GREEN}By your command: {NC}").strip().lower()

            try:
                # Option 1: Analyze Video with MediaInfo
                if choice == '1':
                    video = self.select_single_video()
                    if video:
                        self.processor.analyze_video(video)

                # Option 2: Detect and Autofix Issues
                elif choice == '2':
                    video = self.select_single_video()
                    if video:
                        video.detect_issues(fix_issues=True)

                # Option 3: Normalize Videos
                elif choice == '3':
                    videos = self.select_multiple_videos()
                    if videos:
                        output_dir = input("Enter the output directory (default is current directory): ").strip()
                        if not output_dir:
                            output_dir = "."
                        self.processor.normalize_videos(videos, output_dir)

                # Option 4: Change Video Speed (Fast/Slow)
                elif choice == '4':
                    video = self.select_single_video()
                    if video:
                        speed_factor_input = input("Enter speed factor (e.g., 0.5 for slow motion, 3 for fast motion): ")
                        try:
                            speed_factor = float(speed_factor_input)
                            if speed_factor <= 0:
                                print_warning("Speed factor must be greater than 0.")
                                continue
                        except ValueError:
                            print_warning("Invalid speed factor.")
                            continue
                        smooth_motion_input = input("Enable smooth slow motion with interpolation? (y/n): ").lower()
                        smooth_motion = smooth_motion_input == 'y'
                        output_file = input("Enter the output file name (e.g., speed_change_output.mp4): ")
                        if not output_file.strip():
                            output_file = f"{os.path.splitext(video.basename)[0]}_speed_change.mp4"
                        self.processor.change_speed(video, output_file, speed_factor, smooth_motion)

                # Option 5: Adjust Video Resolution
                elif choice == '5':
                    video = self.select_single_video()
                    if video:
                        resolution = input("Enter new resolution (e.g., 1920x1080): ")
                        output_file = input("Enter the output file name (e.g., resolution_adjusted.mp4): ")
                        if not output_file.strip():
                            output_file = f"{os.path.splitext(video.basename)[0]}_resolution.mp4"
                        self.processor.adjust_resolution(video, output_file, resolution)

                # Option 6: Convert Video Format
                elif choice == '6':
                    video = self.select_single_video()
                    if video:
                        new_format = input("Enter the target format (e.g., mp4, mkv): ")
                        output_file = input("Enter the output file name: ")
                        if not output_file.strip():
                            output_file = f"{os.path.splitext(video.basename)[0]}.{new_format}"
                        self.processor.convert_video_format(video, output_file, new_format)

                # Option 7: Apply Video Filters
                elif choice == '7':
                    video = self.select_single_video()
                    if video:
                        filters = input("Enter the video filters to apply (e.g., grayscale, negate): ")
                        output_file = input("Enter the output file name: ")
                        if not output_file.strip():
                            output_file = f"{os.path.splitext(video.basename)[0]}_filtered.mp4"
                        self.processor.apply_filters(video, output_file, filters)

                # Option 8: Help
                elif choice == '8':
                    self.print_help()

                # Option 9: Extract Frames as Images
                elif choice == '9':
                    video = self.select_single_video()
                    if video:
                        output_dir = input("Enter the output directory for frames (default: $HOME/Pictures/dmx/): ")
                        if not output_dir.strip():
                            output_dir = os.path.expanduser('~/Pictures/dmx/')
                        self.processor.extract_frames(video, output_dir)

                # Option 10: Concatenate Videos
                elif choice == '10':
                    videos = self.select_multiple_videos()
                    if videos:
                        output_file = input("Enter the output file name (e.g., concatenated_output.mp4): ")
                        if not output_file.strip():
                            output_file = f"concatenated_{self.generate_timestamp()}.mp4"
                        self.processor.concatenate_videos(videos, output_file)

                # Option 11: Extract Audio from Video
                elif choice == '11':
                    video = self.select_single_video()
                    if video:
                        format_choice = input("Select audio format (opus/mp3/aac): ").lower()
                        output_file = input("Enter the base name for the output audio file (without extension): ")
                        if not output_file.strip():
                            output_file = f"{os.path.splitext(video.basename)[0]}_audio.{format_choice}"
                        else:
                            output_file += f".{format_choice}"
                        self.processor.extract_audio(video, output_file, format_choice)

                # Option 12: Merge Audio with Video
                elif choice == '12':
                    video = self.select_single_video()
                    if video:
                        audio_file = input("Enter the path to the audio file to merge: ")
                        output_file = input("Enter the output file name (e.g., merged_output.mp4): ")
                        if not output_file.strip():
                            output_file = f"merged_{self.generate_timestamp()}.mp4"
                        self.processor.merge_audio_with_video(video, audio_file, output_file)

                # Option 13: Handle Metadata
                elif choice == '13':
                    video = self.select_single_video()
                    if video:
                        output_file = input("Enter the output file name (e.g., output.mp4): ")
                        if not output_file.strip():
                            output_file = f"{os.path.splitext(video.basename)[0]}_metadata.mp4"
                        keep_metadata = input("Would you like to retain metadata? (y/n): ").lower() == 'y'
                        self.processor.handle_metadata(video, output_file, keep_metadata)

                # Option 14: Generate Video Report
                elif choice == '14':
                    video = self.select_single_video()
                    if video:
                        output_file = input("Enter the output file name (e.g., video_report.txt): ")
                        if not output_file.strip():
                            output_file = f"{os.path.splitext(video.basename)[0]}_report.txt"
                        self.processor.generate_video_report(video, output_file)

                # Quit the program
                elif choice == 'q':
                    print("Exiting program. Goodbye!")
                    break

                # Invalid option
                else:
                    print_warning(f"Unrecognized option: {choice}")

            except Exception as e:
                logging.error(f"Error in main menu: {e}")
                print_warning(f"An error occurred: {e}")

    def generate_timestamp(self):
        """Generate a simple timestamp string for use in filenames."""
        from datetime import datetime
        return datetime.now().strftime("%Y%m%d_%H%M%S")

    def select_single_video(self) -> VideoFile:
        """Select a single video file."""
        files = self.use_fzf_to_select_files()
        if files:
            return VideoFile(files[0])
        print_warning("No file selected.")
        return None

    def select_multiple_videos(self) -> List[VideoFile]:
        """Select multiple video files."""
        files = self.use_fzf_to_select_files(multiple=True)
        if files:
            return [VideoFile(f) for f in files]
        print_warning("No files selected.")
        return []

    @staticmethod
    def use_fzf_to_select_files(multiple=False) -> List[str]:
        """Use fzf to select files."""
        fzf_command = ['fzf']
        if multiple:
            fzf_command.append('--multi')
        try:
            result = subprocess.run(fzf_command, capture_output=True, text=True, check=True)
            return result.stdout.strip().split('\n')
        except subprocess.CalledProcessError:
            print_warning("No files selected or error with fzf.")
            return []

    @staticmethod
    def print_help():
        """Display help information."""
        help_message = f"""
{GREEN}Available Commands:{NC}
1. Analyze Video with MediaInfo
2. Detect and Auto-fix Video Issues
3. Normalize Videos
4. Change Video Speed (Fast/Slow)
5. Adjust Video Resolution
6. Convert Video Format
7. Apply Video Filters
8. Help
9. Extract Frames as Images
10. Concatenate Videos
11. Extract Audio from Video
12. Merge Audio with Video
13. Edit or Remove Metadata
14. Generate Video Report
Q. Quit

Instructions:
- Use the number keys to select an option.
- Use 'Q' to quit the program.
"""
        print(help_message)

# Entry point
if __name__ == "__main__":
    check_dependencies()
    ui = UserInterface()
    ui.main_menu()
