#!/usr/bin/env bash
# Author: 4ndr0666
set -euo pipefail
# ================== // FFX-VIDLINE //
## Description: A script to apply ffmpeg filters and
#              operations via CLI or interactive menu.
# ---------------------------------------

declare -r GREEN='\033[0;32m'
declare -r CYAN='\033[36m'
declare -r RED='\033[0;31m'
declare -r RESET='\033[0m'
declare LOGDIR="${XDG_DATA_HOME:-$HOME/.local/share}/vidline"
mkdir -p -- "$LOGDIR"
declare LOGFILE="$LOGDIR/ffmpeg_operations.log"
declare DRY_RUN=0
declare -a filters=() # individual filter tokens
declare format="mp4"  # output container
declare INPUT_FILE="" # path to input video

error_exit() {
	local ts              # Declare variable
	ts="$(date '+%F %T')" # Assign value
	# Print error message to stderr and log file
	printf '%b[%s] ERROR: %s%b\n' "$RED" "$ts" "$1" "$RESET" | tee -a "$LOGFILE" >&2
	exit 1
}

trap 'error_exit "Unexpected script failure near line ${LINENO}"' ERR

check_deps() {
	printf '%bChecking dependencies...%b\n' "$CYAN" "$RESET" >&2 # Output to stderr
	local cmd                                                    # Declare variable
	for cmd in ffmpeg ffprobe fzf bc; do
		# Use &>/dev/null for silent redirect of stdout and stderr
		command -v "$cmd" &>/dev/null || error_exit "Dependency missing: '$cmd'"
	done
	printf '%bDependencies OK.%b\n' "$GREEN" "$RESET" >&2 # Output to stderr
}

unique_output_name() {
	local dir=$1 base=$2 ext=$3  # Parameters can be declared and assigned directly
	local counter=1              # Declare variable
	local cand                   # Declare variable
	cand="${dir}/${base}.${ext}" # Assign value
	while [[ -e "$cand" ]]; do   # Quote variable in test
		cand="${dir}/${base}_${counter}.${ext}"
		((counter++))
	done
	printf '%s\n' "$cand" # Output the unique name to stdout
}

choose_file() {
	# Prompt to stderr so stdout carries only the selected path
	printf '%bSelect input video:%b\n' "$CYAN" "$RESET" >&2
	local f                # Declare variable
	f="$(fzf)" || return 1 # Assign value, return 1 if fzf fails (e.g., user cancels)
	# Basic check if the selection is a file (more robust checks happen later)
	[[ -f "$f" ]] || error_exit "Invalid selection: '$f'" # Quote variable
	printf '%s\n' "$f"                                    # Output selected file path to stdout
}

display_help() {
	cat <<EOF
Usage: ${0##*/} [--dry-run] [operations] [file]

Examples
  --fps 30             --scale             --slo-mo 2
  --deflicker          --edge-detect       --speed-up 1.5
  --removegrain 22     --deband "range=16:r=4:d=4"
  --convert mp4        --rotate 90         --flip v
  --crop-resize "640:480" "320:240"

Run without arguments for an interactive menu.
EOF
}

run_ffmpeg() {
	local infile=$1 outfile=$2
	shift 2                               # Parameters
	local -a flt=("$@")                   # Array of filter strings
	local -a cmd=(ffmpeg -y -i "$infile") # Base command array
	local filter_chain                    # Declare variable

	# Add video filter graph if filters exist
	if ((${#flt[@]} > 0)); then # Check if array is not empty
		local IFS=,                # Set local IFS for array join
		filter_chain="${flt[*]}"   # Join array elements with comma
		cmd+=(-vf "$filter_chain") # Add video filter option
	fi

	# Add progress pipe and output file
	cmd+=(-progress pipe:1 "$outfile")

	# Dry run mode: print the command and exit
	if ((DRY_RUN)); then
		printf '%bDRY-RUN:%b %q\n' "$CYAN" "$RESET" "${cmd[@]}" >&2 # Output to stderr
		return 0
	fi

	printf '%bRunning ffmpeg...%b\n' "$CYAN" "$RESET" >&2 # Output to stderr
	# Execute the ffmpeg command, redirecting stdout and stderr to tee
	# tee appends output to logfile and also displays it
	# PIPESTATUS[0] gets the exit status of the first command in the pipe (ffmpeg)
	"${cmd[@]}" 2>&1 | tee -a "$LOGFILE"
	local rv=${PIPESTATUS[0]} # Get ffmpeg's exit status

	# Check ffmpeg's exit status
	((rv == 0)) || error_exit "ffmpeg failed with status $rv. See $LOGFILE for details."
	printf '%bffmpeg completed successfully.%b\n' "$GREEN" "$RESET" >&2 # Output to stderr
}

parse_args() {
	while (($#)); do
		case "$1" in # Quote variable
		--dry-run) DRY_RUN=1 ;;
		-h | --help)
			display_help
			exit 0
			;;
		--fps)
			# Check for argument presence and format
			if [ $# -lt 2 ] || [[ ! "$2" =~ ^[0-9]+$ ]]; then error_exit "--fps requires an integer value"; fi
			filters+=("fps=$2")
			shift
			;;
		--deflicker) filters+=("deflicker") ;;
		--dedot) filters+=("removegrain=1") ;;
		--dehalo) filters+=("unsharp=5:5:-1.5:5:5:-1.5") ;;
		--removegrain)
			if [ $# -lt 2 ] || [[ ! "$2" =~ ^[0-9]+$ ]]; then error_exit "--removegrain requires an integer type"; fi
			filters+=("removegrain=$2")
			shift
			;;
		--deband)
			if [ $# -lt 2 ] || [ -z "$2" ]; then error_exit "--deband requires parameters"; fi
			filters+=("deband=$2")
			shift
			;;
		--sharpen) filters+=("unsharp") ;;
		--scale) filters+=("scale=iw2:ih2:flags=spline") ;; # Fixed scale filter syntax
		--deshake) filters+=("deshake") ;;
		--edge-detect) filters+=("edgedetect") ;;
		--slo-mo)
			if [ $# -lt 2 ] || [[ ! "$2" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then error_exit "--slo-mo requires a numeric factor"; fi
			if (($(bc -l <<<"$2 <= 0"))); then error_exit "--slo-mo factor must be greater than 0"; fi
			filters+=("setpts=$2*PTS")
			shift
			;;
		--speed-up)
			if [ $# -lt 2 ] || [[ ! "$2" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then error_exit "--speed-up requires a numeric factor"; fi
			if (($(bc -l <<<"$2 <= 0"))); then error_exit "--speed-up factor must be greater than 0"; fi
			local inverse_factor              # Declare variable
			inverse_factor=$(bc -l <<<"1/$2") # Assign value: Calculate 1/factor using bc
			filters+=("setpts=${inverse_factor}*PTS")
			shift
			;; # Use calculated inverse
		--convert)
			if [ $# -lt 2 ] || [ -z "$2" ] || [[ ! "$2" =~ ^[A-Za-z0-9]+$ ]]; then error_exit "--convert requires a format string"; fi
			format=$2
			shift
			;;
		--color-correct) filters+=("eq=gamma=1.5:contrast=1.2:brightness=0.3:saturation=0.7") ;;
		--crop-resize)
			if [ $# -lt 3 ] || [ -z "$2" ] || [ -z "$3" ]; then
				error_exit "--crop-resize requires crop and scale parameters"
			fi
			filters+=("crop=$2,scale=$3")
			shift 2
			;; # Shift 2 arguments ($2 and $3)
		--rotate)
			if [ $# -lt 2 ] || [ -z "$2" ]; then error_exit "--rotate requires degrees (90, 180, -90)"; fi
			case "$2" in # Quote variable
			90) filters+=("transpose=1") ;;
			180) filters+=("transpose=2,transpose=2") ;;
			-90) filters+=("transpose=2") ;;
			*) error_exit "rotate degrees must be 90, 180 or -90" ;;
			esac
			shift
			;;
		--flip)
			if [ $# -lt 2 ] || [ -z "$2" ]; then error_exit "--flip requires direction (h or v)"; fi
			case "$2" in # Quote variable
			h) filters+=("hflip") ;;
			v) filters+=("vflip") ;;
			*) error_exit "flip direction must be h or v" ;;
			esac
			shift
			;;
		--*) error_exit "Unknown option: $1" ;; # More specific error message
		*)                                      # Input file argument
			# Check if an input file has already been specified
			if [[ -z "$INPUT_FILE" ]]; then # Quote variable
				INPUT_FILE="$1"                # Quote variable
			else
				error_exit "Multiple input files specified: '$INPUT_FILE' and '$1'" # More specific error
			fi ;;
		esac
		shift # Shift to the next argument (or option)
	done
}

show_menu() {
	{ # Group output to stderr
		printf '%bMenu (d=done, q=quit)%b\n' "$CYAN" "$RESET"
		printf ' 1) fps         6) deband        11) slo-mo      16) rotate\n'
		printf ' 2) deflicker   7) sharpen       12) speed-up    17) flip\n'
		printf ' 3) dedot       8) scale         13) convert\n'
		printf ' 4) dehalo      9) deshake       14) color-correct\n'
		printf ' 5) removegrain 10) edge-detect  15) crop-resize\n'
	} >&2

	local choice    # Declare variable
	local -a out=() # Declare and assign array to hold selected arguments

	while true; do
		read -r -p "Choice: " choice # Read user input
		case "$choice" in            # Quote variable
		d) break ;;                  # Done
		q) exit 0 ;;                 # Quit
		1)
			local v # Declare variable
			read -r -p "FPS value: " v
			if [[ -z "$v" ]] || [[ ! "$v" =~ ^[0-9]+$ ]]; then # Check empty AND regex
				printf '%bInvalid FPS value%b\n' "$RED" "$RESET" >&2
			else
				out+=(--fps "$v")
			fi
			;;
		2) out+=(--deflicker) ;;
		3) out+=(--dedot) ;;
		4) out+=(--dehalo) ;;
		5)
			local t # Declare variable
			read -r -p "removegrain type: " t
			if [[ -z "$t" ]] || [[ ! "$t" =~ ^[0-9]+$ ]]; then # Check empty AND regex
				printf '%bInvalid removegrain type%b\n' "$RED" "$RESET" >&2
			else
				out+=(--removegrain "$t")
			fi
			;;
		6)
			local p # Declare variable
			read -r -p "deband params: " p
			if [[ -z "$p" ]]; then # Check empty
				printf '%bDeband parameters required%b\n' "$RED" "$RESET" >&2
			else
				out+=(--deband "$p")
			fi
			;;
		7) out+=(--sharpen) ;;
		8) out+=(--scale) ;;
		9) out+=(--deshake) ;;
		10) out+=(--edge-detect) ;;
		11)
			local f # Declare variable
			read -r -p "slo-mo factor: " f
			# Check empty, regex, and value > 0 using bc
			if [[ -z "$f" ]] || [[ ! "$f" =~ ^[0-9]+(\.[0-9]+)?$ ]] || (($(bc -l <<<"$f <= 0"))); then
				printf '%bInvalid or non-positive factor%b\n' "$RED" "$RESET" >&2
			else
				out+=(--slo-mo "$f")
			fi
			;;
		12)
			local f # Declare variable
			read -r -p "speed-up factor: " f
			# Check empty, regex, and value > 0 using bc
			if [[ -z "$f" ]] || [[ ! "$f" =~ ^[0-9]+(\.[0-9]+)?$ ]] || (($(bc -l <<<"$f <= 0"))); then
				printf '%bInvalid or non-positive factor%b\n' "$RED" "$RESET" >&2
			else
				out+=(--speed-up "$f")
			fi
			;;
		13)
			local fmt # Declare variable
			read -r -p "format: " fmt
			if [[ -z "$fmt" ]] || [[ ! "$fmt" =~ ^[A-Za-z0-9]+$ ]]; then # Check empty AND regex
				printf '%bInvalid format string%b\n' "$RED" "$RESET" >&2
			else
				out+=(--convert "$fmt")
			fi
			;;
		14) out+=(--color-correct) ;;
		15)
			local c s # Declare variables
			read -r -p "crop params: " c
			read -r -p "scale params: " s
			if [[ -z "$c" ]] || [[ -z "$s" ]]; then # Check empty
				printf '%bCrop and scale parameters required%b\n' "$RED" "$RESET" >&2
			else
				out+=(--crop-resize "$c" "$s")
			fi
			;;
		16)
			local d # Declare variable
			read -r -p "degrees (90/180/-90): " d
			case "$d" in # Quote variable
			90 | 180 | -90) out+=(--rotate "$d") ;;
			*) printf '%bInvalid degrees (must be 90, 180, or -90)%b\n' "$RED" "$RESET" >&2 ;;
			esac
			;;
		17)
			local f # Declare variable
			read -r -p "flip h|v: " f
			case "$f" in # Quote variable
			h | v) out+=(--flip "$f") ;;
			*) printf '%bInvalid flip direction (must be h or v)%b\n' "$RED" "$RESET" >&2 ;;
			esac
			;;
		*) printf '%bUnknown choice: %s%b\n' "$RED" "$choice" "$RESET" >&2 ;; # Show unknown choice
		esac
	done
	# Print the collected arguments (tokens) to stdout for mapfile
	printf '%s\n' "${out[@]}"
}

main() {
	check_deps # Verify dependencies are installed

	# Parse command-line arguments initially
	parse_args "$@"

	# If no filters were specified via CLI, enter interactive menu mode
	if ((${#filters[@]} == 0)); then
		printf '%bNo filters specified via CLI. Entering interactive menu.%b\n' "$CYAN" "$RESET" >&2
		local -a menu_args # Declare array
		# Capture menu output (which is CLI-like arguments) into an array
		mapfile -t menu_args < <(show_menu)

		# If the menu returned arguments (user didn't just type 'd' immediately)
		if ((${#menu_args[@]} > 0)); then
			local -a new_cli=("${menu_args[@]}") # Declare and assign array
			# If an input file was already specified via CLI, add it back to the new args list
			[[ -n "$INPUT_FILE" ]] && new_cli+=("$INPUT_FILE") # Quote variable
			# Reset filters and input file before re-parsing the menu output
			filters=()
			INPUT_FILE=""
			parse_args "${new_cli[@]}" # Re-parse with menu args and potentially original file
		else
			# Menu was shown, but no filters were selected (user typed 'd' immediately)
			printf '%bNo filters selected from menu. Exiting.%b\n' "$RED" "$RESET" >&2
			exit 1
		fi
	fi

	# If input file is still missing after parsing CLI and menu args, prompt using fzf
	if [[ -z "$INPUT_FILE" ]]; then                                   # Quote variable
		INPUT_FILE=$(choose_file) || error_exit "No input file selected" # Use error_exit for clarity
	fi

	# Final validation of the selected input file
	[[ -f "$INPUT_FILE" ]] || error_exit "Input file not found: '$INPUT_FILE'"   # Quote variable
	[[ -r "$INPUT_FILE" ]] || error_exit "Cannot read input file: '$INPUT_FILE'" # Quote variable

	# Check if any filters were actually applied after all parsing
	if ((${#filters[@]} == 0)); then
		printf '%bNo filters were applied. Exiting.%b\n' "$RED" "$RESET" >&2
		exit 1
	fi

	# Build the output filename
	local dir base outfile          # Declare variables
	dir=$(dirname -- "$INPUT_FILE") # Assign value
	base=${INPUT_FILE##/}
	base=${base%.}_out                                     # Assign value: remove path and extension, add _out
	outfile=$(unique_output_name "$dir" "$base" "$format") # Assign value: get unique name

	# Run the ffmpeg command with the collected filters
	run_ffmpeg "$INPUT_FILE" "$outfile" "${filters[@]}"

	# Success message
	printf '%bOutput saved to:%b %s\n' "$GREEN" "$RESET" "$outfile" >&2 # Output to stderr
}

main "$@"
