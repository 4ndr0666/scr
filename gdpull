#!/usr/bin/env bash
#
# --- // GDPULL // ========
# Description:  This script will recursively traverse all directories under a
#               specified folder
# Version: 2.0
# Usage: gdpull.sh /path/to/folder
# Author: 4ndr0666 <github.com/4ndr0666>


# --- // LOG_FILE:
LOG_FILE="/var/log/gdpull.log"

# --- // LOG_WITH_TIMESTAMP:
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# --- // DEFAULT_SEARCH_PATH ($PWD if empty):
SEARCHPATH=""

# --- // IGNORE_THESE_DIR/FILES:
IGNORE=('Third-Party')

# --- // SOURCE_COLORS.SH:
BASEPATH=$(dirname "$0")
if [[ -f "${BASEPATH}/colors.sh" ]]; then
    . "${BASEPATH}/colors.sh"
else
    heading() {
        echo "---------------------------------------------------------------------"
        echo "  $2"
        echo "---------------------------------------------------------------------"
        echo
    }
fi

clear
heading green "gdpull ${VERSION}"

# Set the search path
if [[ -z "$1" ]]; then
    if [[ -z $SEARCHPATH ]]; then
        SEARCHPATH=$PWD
    fi
else
    if [[ $1 == '-p' ]]; then
        SEARCHPATH=$PWD
    else
        SEARCHPATH="$1"
    fi
fi

# Validate search path
if [[ ! -d "$SEARCHPATH" ]]; then
    log_message "The supplied path does not resolve to a valid directory"
    log_message "Aborting..."
    exit 1
fi

# Change to the specified directory
cd "$SEARCHPATH"

# Preserve the old input field separator and set new one
OLDIFS=$IFS
IFS=$'\n'

# Recursive git pull
dir_count=0
for gitprojpath in `find . -type d -name .git | sort | sed "s/\/\.git//"`; do
    if [ "${#IGNORE}" -gt 0 ]; then
        localpath=${gitprojpath:2}
        pathseg1=$(echo "$localpath" | sed "s/[\/].*//")
        for dir in ${IGNORE[@]}; do
            if [ "$localpath" == "$dir" ] || [ "$pathseg1" == "$dir" ]; then
                continue 2
            fi
        done
    fi

    (( dir_count++ ))
    pushd . >/dev/null
    cd $gitprojpath

    # Log directory name
    if [[ $gitprojpath == '.' ]]; then
        log_message "Pulling in directory: ${PWD##*/}"
    else
        log_message "Pulling in directory: ${gitprojpath:2}"
    fi

    # Perform git pull
    git pull | tee -a "$LOG_FILE"

    popd >/dev/null
done

log_message "DIRECTORIES PROCESSED: $dir_count"

# Restore original state
IFS=$OLDIFS
log_message "gdpull script finished"
