#!/usr/bin/env bash

# File: permission_manifest.sh
# Author: 4ndr0666
# Edited: 11-2-2024
# Description: PermMaster - A versatile tool for managing system permissions on Arch Linux.

# ============================== // PERMISSION_MANIFEST //

# --- // Colors:
GRE='\033[0;32m'
BOLD='\033[1m'
RED='\033[0;31m'
NC='\033[0m'
EXPLOSION="💥"
SUCCESS="✔️"
FAILURE="❌"
STATS="➡️"

# --- // Utility Functions:
green() {
    echo -e "${BOLD}${GRE}$1${NC}"
}

red() {
    echo -e "${BOLD}${RED}$1${NC}"
}

log_action() {
    local level="INFO"
    [[ -n "$2" ]] && level="$2"
    local message="$1"
    local log_file="/var/log/perm_master.log"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$level] - $message" >> "$log_file"
}

check_dependencies() {
    local dependencies=("pacman" "paccheck" "pacrepairfile" "bsdtar" "awk" "find" "getfacl" "setfacl" "getfattr" "setfattr" )
    local missing_deps=()
    for dep in "${dependencies[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            missing_deps+=("$dep")
        fi
    done

    if [ "${#missing_deps[@]}" -ne 0 ]; then
        red "$FAILURE Missing dependencies: ${missing_deps[*]}"
        read -rp "Do you want to install them now? [Y/n]: " choice
        choice=${choice:-Y}
        if [[ "$choice" =~ ^[Yy]$ ]]; then
            sudo pacman -S --noconfirm "${missing_deps[@]}"
            log_action "Installed missing dependencies: ${missing_deps[*]}" "DEBUG"
        else
            red "$FAILURE Cannot proceed without installing missing dependencies."
            exit 1
        fi
    fi
}

validate_path() {
    local input="$1"
    if [[ "$input" =~ ^(/[-_./A-Za-z0-9]+)?$ ]] && [[ "$input" != *..* ]] && [[ ! "$input" =~ [[:space:]] ]]; then
        echo "$input"
    else
        red "$FAILURE Invalid or potentially dangerous path: $input"
        log_action "Invalid path provided: $input" "ERROR"
        return 1
    fi
}

confirm_action() {
    local prompt="$1"
    local default_choice="${2:-N}"
    read -rp "$prompt [Y/n]: " choice
    choice=${choice:-$default_choice}
    if [[ "$choice" =~ ^[Yy]$ ]]; then
        return 0
    else
        return 1
    fi
}

backup_permissions() {
    local backup_dir="/var/backups/perm_master"
    mkdir -p "$backup_dir"
    local timestamp=$(date '+%Y%m%d%H%M%S')
    tar -czf "$backup_dir/permissions_backup_$timestamp.tar.gz" permissions_manifest.* 2>/dev/null
    green "$SUCCESS Backup created at $backup_dir/permissions_backup_$timestamp.tar.gz"
    log_action "Backup created at $backup_dir/permissions_backup_$timestamp.tar.gz" "INFO"
}

create_manifest() {
    log_action "Starting manifest creation." "DEBUG"
    read -rp "Enter the directory to create permissions manifest for [/]: " target_dir
    target_dir=${target_dir:-/}
    target_dir=$(validate_path "$target_dir") || return

    read -rp "Enter the output file [permissions_manifest]: " manifest_file
    manifest_file=${manifest_file:-permissions_manifest}
    manifest_file=$(validate_path "$manifest_file") || return

    if [[ ! -d "$target_dir" ]]; then
        red "$FAILURE Directory $target_dir does not exist."
        log_action "Directory $target_dir does not exist." "ERROR"
        return
    fi

    if ! confirm_action "This will create a permissions manifest for $target_dir. Continue?"; then
        red "$FAILURE Operation cancelled."
        log_action "Manifest creation operation cancelled by user." "INFO"
        return
    fi

    echo "Creating permissions manifest for $target_dir..."
    log_action "Dumping ACLs and attributes." "INFO"
    sudo getfacl -R --absolute-names "$target_dir" > "$manifest_file.acl"
    sudo getfattr -R -d "$target_dir" > "$manifest_file.attrs"
    sudo find "$target_dir" -printf '%m %u %g %p\n' | tee "$manifest_file.perms" | xargs -P 4 -I {} echo 'Processing entry: {}'
    green "$SUCCESS Permissions manifest saved to $manifest_file.*"
    log_action "Created permissions manifest for $target_dir." "INFO"
}

apply_manifest() {
    log_action "Starting application of manifest." "DEBUG"
    read -rp "Enter the base directory to apply permissions to [/]: " target_dir
    target_dir=${target_dir:-/}
    target_dir=$(validate_path "$target_dir") || return

    read -rp "Enter the permissions manifest file prefix [permissions_manifest]: " manifest_file
    manifest_file=${manifest_file:-permissions_manifest}
    manifest_file=$(validate_path "$manifest_file") || return

    if [[ -f "$manifest_file.acl" && -f "$manifest_file.attrs" && -f "$manifest_file.perms" ]]; then
        echo 'Applying permissions from manifest...'
        log_action "All necessary manifest files found for application." "DEBUG"
    else
        red "$FAILURE Manifest files missing."
        log_action "Manifest files $manifest_file.* are missing." "ERROR"
        return
    fi

    if ! confirm_action "This will change permissions across the filesystem. Are you sure?"; then
        red "$FAILURE Operation cancelled."
        log_action "Manifest application operation cancelled by user." "INFO"
        return
    fi

    echo "Applying permissions from $manifest_file.*..."
    sudo setfacl --restore="$manifest_file.acl"
    sudo setfattr --restore="$manifest_file.attrs"
    while IFS=' ' read -r perm user group path; do
        if [[ -z "$path" ]]; then
            red "$FAILURE Empty path entry, skipping."
            log_action "Empty path entry detected, skipping." "WARNING"
            continue
        fi
        if [[ -e "$path" ]]; then
            sudo chown "$user:$group" "$path"
            sudo chmod "$perm" "$path"
        else
            red "$FAILURE Path $path does not exist. Skipping."
            log_action "Path $path does not exist. Skipping." "WARNING"
        fi
    done < "$manifest_file.perms"
    green "$SUCCESS Permissions applied from $manifest_file.*"
    log_action "Permissions applied successfully from $manifest_file." "INFO"
}

apply_manifest_dry_run() {
    log_action "Starting dry-run of manifest application." "DEBUG"
    echo "Dry-run: Simulating changes from $manifest_file.*"
    while IFS=' ' read -r perm user group path; do
        echo "Would apply chown $user:$group and chmod $perm on $path"
    done < "$manifest_file.perms"
    green "$SUCCESS Dry-run completed. No changes made."
    log_action "Dry-run completed for manifest application." "INFO"
}

audit_pacsift() {
    echo "$STATS Auditing and fixing permissions with pacsift..."
    log_action "Starting pacsift audit." "DEBUG"

    # Declare variables separately to avoid masking return values
    local timestamp
    timestamp=$(date '+%Y%m%d%H%M%S')

    local tmp_output
    tmp_output="/tmp/paccheck_output_${timestamp}.log"

    local tmp_log
    tmp_log="/tmp/pacsift_repair_${timestamp}.log"

    # Check if paccheck supports the required flag
    if paccheck --help | grep -q 'file-properties'; then
        log_action "Running paccheck --file-properties and saving output to $tmp_output" "DEBUG"

        # Run paccheck and redirect output properly using sudo
        if ! sudo paccheck --file-properties --quiet | sudo tee "$tmp_output" > /dev/null 2>&1; then
            red "$FAILURE paccheck encountered an issue. Review $tmp_output for details."
            log_action "paccheck encountered an issue. Check $tmp_output for details." "ERROR"
            cat "$tmp_output"
            return 1
        fi

        # Check if the paccheck output contains discrepancies like UID, GID, or time mismatches
        if grep -qE 'UID mismatch|GID mismatch|modification time mismatch' "$tmp_output"; then
            log_action "Discrepancies found. Attempting repairs with pacrepairfile." "INFO"

            # Extract the paths and attempt repairs
            if ! awk -F': ' '{print $2}' "$tmp_output" | sed -E 's/^(.*) .*$/\1/' | sudo pacrepairfile - | sudo tee "$tmp_log" > /dev/null 2>&1; then
                red "$FAILURE pacrepairfile encountered an issue. Review $tmp_log for details."
                log_action "pacrepairfile encountered an issue. Check $tmp_log for details." "ERROR"
                cat "$tmp_log"
                return 1
            fi

            green "$SUCCESS Permissions audited and corrected using pacsift. See $tmp_log for details."
            log_action "Permissions audited and corrected successfully using pacsift." "INFO"
        else
            green "$SUCCESS No discrepancies found by paccheck."
            log_action "No discrepancies found by paccheck." "INFO"
        fi
    else
        red "$FAILURE Unsupported paccheck version or invalid flags used."
        log_action "Unsupported paccheck version or invalid flags used. Update or check pacutils package." "ERROR"
        return 1
    fi
}

audit_pacman() {
    echo "$STATS Auditing and fixing permissions with pacman..."
    log_action "Starting pacman audit for permission issues." "DEBUG"
    permission_errors=$(sudo pacman -Qkk 2>/dev/null | grep -E 'Permissions differ|Ownership differs')

    if [[ -z "$permission_errors" ]]; then
        green "$SUCCESS All files have correct permissions and ownerships."
        log_action "All files have correct permissions and ownerships." "INFO"
        return
    fi

    echo "$STATS Fixing permissions and ownerships..."
    while IFS= read -r line; do
        [[ -z "$line" ]] && continue
        file=$(echo "$line" | awk '{print $2}')
        if [[ -e "$file" ]]; then
            pkg=$(pacman -Qo "$file" 2>/dev/null | awk '{print $5}')
            if [[ -n "$pkg" ]]; then
                echo "$STATS Restoring $file from package $pkg"
                sudo pacman -S "$pkg" --noconfirm --needed || {
                    red "$FAILURE Failed to reinstall $pkg for $file."
                    log_action "Failed to reinstall $pkg for $file." "ERROR"
                }
            else
                red "$FAILURE File $file is not owned by any package. Skipping."
                log_action "File $file is not owned by any package. Skipping." "WARNING"
            fi
        else
            red "$FAILURE File $file does not exist. Skipping."
            log_action "File $file does not exist. Skipping." "WARNING"
        fi
    done <<< "$permission_errors"
    green "$SUCCESS Permissions audited and corrected using pacman."
    log_action "Permissions audited and corrected using pacman." "INFO"
}

reset_pkgs() {
    log_action "Starting full reset of package permissions..." "INFO"
    echo "$STATS Resetting permissions for all installed packages..."
    local pkg_list
    pkg_list=$(pacman -Qq)
    
    for pkg in $pkg_list; do
        echo "$STATS Resetting permissions for package $pkg"
        sudo pacman -Qkk "$pkg" 2>/dev/null | grep -E 'Permissions differ|Ownership differs' && {
            sudo pacman -S "$pkg" --noconfirm --needed || {
                red "$FAILURE Failed to reinstall $pkg to reset permissions."
                log_action "Failed to reinstall $pkg for full reset." "ERROR"
            }
        }
    done
    green "$SUCCESS Completed full reset of package permissions."
    log_action "Completed full reset of package permissions." "INFO"
}

reset_directories() {
    log_action "Resetting system directory permissions." "DEBUG"
    declare -A dir_permissions=(
        ["/etc"]=755
        ["/var"]=755
        ["/usr"]=755
        ["/bin"]=755
        ["/sbin"]=755
        ["/lib"]=755
        ["/lib64"]=755
        ["/opt"]=755
        ["/home"]=755
        ["/root"]=750
        ["/tmp"]=1777
        ["/srv"]=755
        ["/mnt"]=755
        ["/media"]=755
    )

    for dir in "${!dir_permissions[@]}"; do
        if [[ -d "$dir" ]]; then
            sudo chmod "${dir_permissions[$dir]}" "$dir" && log_action "Set permissions for $dir to ${dir_permissions[$dir]}." "INFO"
            sudo chown root:root "$dir" && log_action "Set ownership for $dir to root:root." "INFO"
        fi
    done
    green "$SUCCESS System directories permissions reset."
    log_action "System directories permissions reset completed." "INFO"
}

reset_etc() {
    log_action "Resetting /etc permissions..." "DEBUG"
    sudo find /etc -type f | xargs -P 4 -I {} chmod 644 {} && log_action "Set file permissions in /etc to 644." "INFO"
    sudo find /etc -type d | xargs -P 4 -I {} chmod 755 {} && log_action "Set directory permissions in /etc to 755." "INFO"
    sudo chmod 600 /etc/shadow /etc/gshadow && log_action "Restricted access to /etc/shadow and /etc/gshadow." "INFO"
    sudo chmod 644 /etc/passwd /etc/group && log_action "Set permissions for /etc/passwd and /etc/group to 644." "INFO"
    sudo chmod 440 /etc/sudoers && log_action "Set /etc/sudoers to 440." "INFO"
    sudo setfacl --restore="/etc/permissions.acl" 2>/dev/null || true
    sudo setfattr --restore="/etc/permissions.attrs" 2>/dev/null || true
    green "$SUCCESS /etc permissions reset."
    log_action "/etc permissions reset completed." "INFO"
}

reset_home() {
    log_action "Resetting /home permissions..." "DEBUG"
    for dir in /home/*; do
        if [[ -d "$dir" ]]; then
            user=$(basename "$dir")
            sudo chown -R "$user":"$user" "$dir" && log_action "Set ownership for $dir to $user." "INFO"
            sudo chmod 700 "$dir" && log_action "Set directory permissions for $dir to 700." "INFO"
            sudo find "$dir" -type d | xargs -P 4 -I {} chmod 700 {} && log_action "Set permissions for directories under $dir to 700." "INFO"
            sudo find "$dir" -type f | xargs -P 4 -I {} chmod 600 {} && log_action "Set permissions for files under $dir to 600." "INFO"
            sudo setfacl --restore="$dir/permissions.acl" 2>/dev/null || true
            sudo setfattr --restore="$dir/permissions.attrs" 2>/dev/null || true
        fi
    done
    green "$SUCCESS /home permissions reset."
    log_action "/home permissions reset completed." "INFO"
}

generate_report() {
    local report_file="/var/log/perm_master_report_$(date '+%Y%m%d%H%M%S').json"
    echo "{" > "$report_file"
    echo "\"report_time\": \"$(date '+%Y-%m-%d %H:%M:%S')\"," >> "$report_file"
    echo "\"actions\": [" >> "$report_file"
    grep -E '\[INFO\]' /var/log/perm_master.log | awk '{print "{\"timestamp\":\""$1" "$2"\", \"message\":\""$6"\"},"}' >> "$report_file"
    sed -i '$ s/,$//' "$report_file"
    echo "]" >> "$report_file"
    echo "}" >> "$report_file"
    green "$SUCCESS Report generated at $report_file"
    log_action "Detailed report generated at $report_file" "INFO"
}

send_email_notification() {
    local subject="PermMaster Report - $(date '+%Y-%m-%d %H:%M:%S')"
    local recipient="admin@example.com"
    mail -s "$subject" "$recipient" < /var/log/perm_master.log
    green "$SUCCESS Email notification sent to $recipient"
    log_action "Email notification sent to $recipient" "INFO"
}

display_help() {
    echo "PermMaster - A multi-tool for managing system permissions on Arch Linux."
    echo ""
    echo "Usage:"
    echo "  sudo ./permission_manifest.sh"
    echo ""
    echo "Options:"
    echo "  1. Create Permissions Manifest"
    echo "     - Generates a snapshot of current permissions, ACLs, and extended attributes."
    echo "     - Example: Creates 'permissions_manifest.perms', 'permissions_manifest.acl', and 'permissions_manifest.attrs'."
    echo ""
    echo "  2. Apply Permissions Manifest"
    echo "     - Restores permissions from the manifest files."
    echo "     - Example: Uses 'permissions_manifest.perms', 'permissions_manifest.acl', and 'permissions_manifest.attrs' to restore."
    echo ""
    echo "  3. Apply Permissions Manifest (DRYRUN)"
    echo "     - Doesnt make changes instead shows what would be done."
    echo "     - Example: Same as above but printed not executed."
    echo ""
    echo "  4. Backup Current Permissions"
    echo "     - Create backup of system permissions"
    echo "     - Example: "
    echo "" 
    echo "  5. Audit and Fix with Pacman"
    echo "     - Uses 'pacman -Qkk' to audit and fix permissions of package-managed files."
    echo "     - Example: Identifies files with incorrect permissions and reinstalls packages as needed."
    echo ""
    echo "  6. Audit and Fix with Pacsift"
    echo "     - Uses 'paccheck' and 'pacrepairfile' from 'pacutils' to audit and fix permissions."
    echo "     - Example: Automatically repairs files with incorrect permissions."
    echo ""
    echo "  7. Reset Package Permissions"
    echo "     - Resets permissions of all installed packages."
    echo "     - Note: This is equivalent to option 3."
    echo ""
    echo "  8. Reset System Directories"
    echo "     - Resets permissions of common system directories to their defaults."
    echo "     - Example: Sets '/etc' to 755 and ownership to 'root:root'."
    echo ""
    echo "  9. Reset /etc Permissions"
    echo "     - Resets permissions within the '/etc' directory, including ACLs and extended attributes."
    echo ""
    echo "  10. Reset /home Permissions"
    echo "     - Resets permissions within the '/home' directory for all users, including ACLs and extended attributes."
    echo ""
    echo " 11. Generate Detailed Report"
    echo " 12. Send Email Notification with Report"
    echo " 13. Help"
    echo "     - Displays this help message."
    echo ""
    echo "  0. Exit"
    echo "     - Exits the script."
}
display_menu() {
    clear
    green "$EXPLOSION ---------- // PermMaster //"
    echo ""
    echo -e "${GRE}1.${NC} Create Manifest       ${GRE}2.${NC} Apply Manifest"
    echo -e "${GRE}3.${NC} Apply (Dry-Run)       ${GRE}4.${NC} Backup Permissions"
    echo -e "${GRE}5.${NC} Pacman Audit          ${GRE}6.${NC} Pacsift Audit"
    echo -e "${GRE}7.${NC} Reset Packages        ${GRE}8.${NC} Reset Directories"
    echo -e "${GRE}9.${NC} Reset /etc            ${GRE}10.${NC} Reset /home"
    echo -e "${GRE}11.${NC} Report               ${GRE}12.${NC} Email Notify"
    echo -e "${GRE}13.${NC} Help                 ${RED}0.${NC} Exit"
    echo ""
    echo -ne "By your command: "
}

main() {
    trap 'red "$FAILURE An error occurred. Exiting gracefully."; log_action "Script encountered an error and exited." "ERROR"; exit 1' ERR
    trap 'green "Cleaning up before exit."; log_action "Script ended by user." "DEBUG"; exit 0' SIGINT SIGTERM

    check_dependencies

    if [ "$(id -u)" -ne 0 ]; then
        sudo "$0" "$@"
        exit $?
    fi
    echo "💀 WARNING: You are now operating as root..."
    sleep 1 

    while true; do
        display_menu
        read -r command
        case "$command" in
            1) create_manifest ;;
            2) apply_manifest ;;
            3) apply_manifest_dry_run ;;
            4) backup_permissions ;;
            5) audit_pacman ;;
            6) audit_pacsift ;;
            7) reset_pkgs ;;
            8) reset_directories ;;
            9) reset_etc ;;
            10) reset_home ;;
            11) generate_report ;;
            12) send_email_notification ;;
            13) display_help ;;
            0) 
                echo "Exiting..." 
                log_action "Script exited by user." "INFO"
                exit 0 ;;
            *) 
                red "$FAILURE Invalid option. Please try again."
                log_action "Invalid menu option selected: $command" "WARNING" ;;
        esac
        echo ""
        read -rp "Press Enter to continue..."
    done
}

# --- // Start Script:
main "$@"
