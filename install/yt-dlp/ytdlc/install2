#!/usr/bin/env bash
# Author: 4ndr0666
set -euo pipefail
# ================== // INSTALL_YTDLC.SH //

# ── locations (validated by ensure_xdg) ──────────────────────────
BIN_DIR="/usr/local/bin"
APP_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/applications"
ZSH_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/zsh"
YTDL_FILE="$ZSH_DIR/ytdl.zsh"
HANDLER_FILE="$BIN_DIR/ytdl-handler.sh"
DMENU_FILE="$BIN_DIR/dmenuhandler"
DESKTOP_FILE="$APP_DIR/ytdl.desktop"

# ── tiny colour helpers (tput → portable) ───────────────────────
GLOW () { printf '%s\n' "$(tput setaf 6)[✔️] $*$(tput sgr0)"; }
BUG  () { printf '%s\n' "$(tput setaf 1)[❌] $*$(tput sgr0)"; }
INFO () { printf '%s\n' "$(tput setaf 4)[→] $*$(tput sgr0)"; }

# ── XDG dir sanity ───────────────────────────────────────────────
ensure_xdg() {
  : "${XDG_CONFIG_HOME:=$HOME/.config}"
  : "${XDG_DATA_HOME:=$HOME/.local/share}"
  [[ -d $XDG_CONFIG_HOME && -d $XDG_DATA_HOME ]] || {
    BUG "XDG dirs missing"; exit 1; }
  GLOW "XDG compliance detected"
}

# ── immutability helpers ────────────────────────────────────────
unlock() { [[ -e $1 ]] && sudo chattr -i "$1" 2>/dev/null || true; }
lock()   { [[ -e $1 ]] && sudo chattr +i "$1" 2>/dev/null || true; }

# ── clean old install (after unlocking) ─────────────────────────
cleanup_old() {
  for f in "$YTDL_FILE" "$HANDLER_FILE" "$DMENU_FILE" "$DESKTOP_FILE"; do
    unlock "$f"; [[ -e $f ]] && { INFO "Removing old $f"; sudo rm -f "$f"; }
  done
}

# ── dependencies (Arch / pacman) ────────────────────────────────
check_dependencies() {
  local -a pkgs=()
  command -v aria2c     >/dev/null || pkgs+=(aria2)
  { command -v xclip || command -v wl-paste; } || pkgs+=(xclip wl-clipboard)
  command -v jq         >/dev/null || pkgs+=(jq)
  command -v yt-dlp     >/dev/null || pkgs+=(yt-dlp)
  [[ ${#pkgs[@]} -eq 0 ]] && { GLOW "Dependencies OK"; return; }
  INFO "Installing: ${pkgs[*]}"
  sudo pacman -S --needed --noconfirm "${pkgs[@]}"
}

# ── create empty cookie files so sourcing never fails ────────────
bootstrap_cookies() {
  local dir="$XDG_CONFIG_HOME/yt-dlp"; mkdir -p "$dir"
  for f in youtube_cookies.txt youtu.be_cookies.txt patreon_cookies.txt \
           vimeo_cookies.txt boosty_cookies.txt instagram_cookies.txt \
           fanvue_cookies.txt redgifs_cookies.txt dzen.cookies.txt; do
    : >| "$dir/$f"
    chmod 600 "$dir/$f"
  done
  INFO "Cookie store initialised in $dir"
}

# ── ytdl.zsh ─────────────────────────────────────────────────────
write_ytdl_zsh() {
mkdir -p "$ZSH_DIR"
tee "$YTDL_FILE" >/dev/null <<'ZSH'
#!/usr/bin/env zsh
# Author: 4ndr0666
# ======================== // YTDL.ZSH //

# --- fallback log helpers (overridden by installer) --------------
typeset -f GLOW >/dev/null || GLOW(){ print "[✔️] $*"; }
typeset -f BUG  >/dev/null || BUG(){  print "[❌] $*"; }
typeset -f INFO >/dev/null || INFO(){ print "[→]  $*"; }

# --- cookie map --------------------------------------------------
typeset -A YTDLP_COOKIES_MAP=(
  [youtube.com]   "$XDG_CONFIG_HOME/yt-dlp/youtube_cookies.txt"
  [youtu.be]      "$XDG_CONFIG_HOME/yt-dlp/youtube_cookies.txt"
  [patreon.com]   "$XDG_CONFIG_HOME/yt-dlp/patreon_cookies.txt"
  [vimeo.com]     "$XDG_CONFIG_HOME/yt-dlp/vimeo_cookies.txt"
  [boosty.to]     "$XDG_CONFIG_HOME/yt-dlp/boosty_cookies.txt"
  [instagram.com] "$XDG_CONFIG_HOME/yt-dlp/instagram_cookies.txt"
  [fanvue.com]    "$XDG_CONFIG_HOME/yt-dlp/fanvue_cookies.txt"
  [dzen.com]      "$XDG_CONFIG_HOME/yt-dlp/dzen.cookies.txt"
  [redgifs.com]   "$XDG_CONFIG_HOME/yt-dlp/redgifs_cookies.txt"
)

# touch missing cookie files (idempotent)
for f in ${(kv)YTDLP_COOKIES_MAP}; do [[ -f $f ]] || : >| "$f"; done

# --- helpers -----------------------------------------------------
validate_url() [[ $1 == http*://* ]]

get_domain_from_url() {
  local d=${1#*://}; d=${d%%/*}; d=${d##www.}; d=${d##m.}
  d=$(print -r -- "$d" | tr '[:upper:]' '[:lower:]')
  [[ $d == fanvue.com ]] && print -r fanvue.com || print -r -- "$d"
}

get_cookie_path_for_domain() { print -r -- "${YTDLP_COOKIES_MAP[$1]}"; }

prompt_cookie_update() {
  local domain cookie clip
  print "Select domain to refresh cookie:"
  if command -v fzf >/dev/null; then
    domain=$(print -rl -- ${(k)YTDLP_COOKIES_MAP} | fzf --prompt=Domain:)
  else
    print -rl -- ${(k)YTDLP_COOKIES_MAP} | nl -w2 -ba
    read -r "?Choice: " domain
    domain=${(k)YTDLP_COOKIES_MAP[$domain]}
  fi
  cookie=$(get_cookie_path_for_domain "$domain") || return
  printf "Copy cookie for %s then ENTER… " "$domain"; read -r _
  clip=$(command -v wl-paste || echo 'xclip -selection clipboard -o')
  eval "$clip" >| "$cookie" && chmod 600 "$cookie"
  GLOW "Cookie updated for $domain"
}

# --- wrappers ----------------------------------------------------
ytdl() {
  local usec=0 args url domain cookie
  while (( $# )); do
    case $1 in -c) usec=1; shift ;; *) args+="$1 "; shift ;; esac
  done
  url=${=args}[1] || { BUG "ytdl: no URL"; return 1; }

  if (( usec )); then
    domain=$(get_domain_from_url "$url")
    cookie=$(get_cookie_path_for_domain "$domain")
    [[ -f $cookie ]] && yt-dlp --add-metadata --embed-metadata \
      --external-downloader aria2c \
      --external-downloader-args 'aria2c:-c -j8 -x8 -s8 -k2M' \
      -f '335/315/313/308/303/299/271/248/137+bestaudio+bestaudio' \
      --newline --ignore-config --no-playlist --no-mtime \
      --cookies "$cookie" ${(z)args} && return
  fi
  yt-dlp --add-metadata --embed-metadata \
    --external-downloader aria2c \
    --external-downloader-args 'aria2c:-c -j8 -x8 -s8 -k2M' \
    -f '335/315/313/308/303/299/271/248/137+bestaudio+bestaudio' \
    --newline --ignore-config --no-playlist --no-mtime ${(z)args}
}

ytf() {
  local url=$1 fid domain cookie
  validate_url "$url" || { BUG "Bad URL"; return 1; }
  domain=$(get_domain_from_url "$url")
  cookie=$(get_cookie_path_for_domain "$domain")
  yt-dlp --list-formats ${cookie:+--cookies "$cookie"} "$url" || {
    prompt_cookie_update || return
    cookie=$(get_cookie_path_for_domain "$domain")
    yt-dlp --list-formats ${cookie:+--cookies "$cookie"} "$url" || return
  }
  read -r "?Format ID (ENTER=default): " fid
  [[ -z $fid ]] && { ytdl "$url"; return; }
  yt-dlp --add-metadata --embed-metadata \
    --external-downloader aria2c \
    --external-downloader-args 'aria2c:-c -j8 -x8 -s8 -k2M' \
    -f "$fid+bestaudio" --newline --ignore-config --no-playlist --no-mtime \
    ${cookie:+--cookies "$cookie"} --output '%(title)s.%(ext)s' "$url"
}

ytdlc() {
  (( $# )) || { show_ytdlc_help; return 1; }
  local list=0 odir="$HOME/Downloads" upd=0
  typeset -a extra urls
  while (( $# )); do
    case $1 in
      -l|--list-formats) list=1 ;;
      -o|--output-dir)   odir=$2; shift ;;
      --update)          upd=1 ;;
      -f)                extra+=("$1" "$2"); shift ;;
      -h|--help)         show_ytdlc_help; return 0 ;;
      *)                 urls+=("$1") ;;
    esac; shift
  done
  (( upd )) && { prompt_cookie_update; return; }
  mkdir -p -- "$odir"

  for url in "${urls[@]}"; do
    validate_url "$url" || { BUG "Bad URL: $url"; continue; }
    [[ $url == *embed/* ]] && url="https://www.youtube.com/watch?v=${url##*/embed/}"
    local domain=$(get_domain_from_url "$url")
    local cookie=$(get_cookie_path_for_domain "$domain")
    [[ -f $cookie ]] || { BUG "Missing cookie for $domain"; continue; }
    (( list )) && { ytf "$url"; continue; }
    if [[ $domain == fanvue.com ]]; then
      yt-dlp --cookies "$cookie" --output "$odir/%(title)s.%(ext)s" \
        "${extra[@]}" "$url" && continue
    fi
    ytdl -c "$url" || BUG "Download failed for $url"
  done
}

show_ytdlc_help() {
  cat <<'EOF'
ytdlc – cookie-aware yt-dlp wrapper
Usage: ytdlc [opts] URL…
  -l/--list-formats        only list formats
  -o/--output-dir DIR      set output directory (default ~/Downloads)
  --update                 interactively update cookie
  -f ID                    pass -f directly to yt-dlp
  -h/--help                this help
EOF
}
ZSH
chmod +x "$YTDL_FILE"
INFO "ytdl.zsh written"
}

# ── ytdl-handler.sh ──────────────────────────────────────────────
write_handler() {
sudo tee "$HANDLER_FILE" >/dev/null <<'SH'
#!/bin/sh
set -eu
DMENU=$(command -v dmenu) || { printf >&2 'dmenu not found\n'; exit 1; }
clip() { command -v wl-copy >/dev/null && wl-copy || xclip -selection clipboard -in; }

[ $# -eq 1 ] && [ "$1" != "%u" ] || { printf >&2 'No URL\n'; exit 1; }

feed=${1#ytdl://}
command -v python3 >/dev/null &&
  feed=$(printf '%s' "$feed" |
        python3 -c 'import sys,urllib.parse as u;print(u.unquote(sys.stdin.read()))')

case $feed in
  *youtube.com/embed/*) id=${feed##*/embed/}; id=${id%%\?*}; feed="https://www.youtube.com/watch?v=$id" ;;
  *youtu.be/*)          id=${feed##*/}; id=${id%%\?*};        feed="https://www.youtube.com/watch?v=$id" ;;
esac

choice=$(printf '%s\n' 'copy url' 'ytf' 'ytdlc' 'queue download' 'cancel' |
         "$DMENU" -i -p 'ytdl:')

case $choice in
  'copy url')   printf '%s' "$feed" | clip ;;
  ytf)          setsid -f "${TERMINAL:-st}" -e zsh -c "ytf '$feed'; read -r -p '\nPress ENTER…'" ;;
  ytdlc)        setsid -f "${TERMINAL:-st}" -e zsh -c "ytdlc '$feed'; read -r -p '\nPress ENTER…'" ;;
  'queue download') qndl "$feed" 'curl -LO' ;;
  *) : ;;
esac
SH
sudo chmod +x "$HANDLER_FILE"
INFO "handler written"
}

# ── (optional) dmenuhandler wrapper ──────────────────────────────
write_dmenuhandler() {
sudo tee "$DMENU_FILE" >/dev/null <<'DM'
#!/bin/sh
feed="${1:-$(true | dmenu -p 'Paste URL or file path')}"
choice=$(printf '%s\n' copy url ytf ytdlc mpv 'mpv loop' 'queue yt-dlp' 'queue download' |
         dmenu -i -p 'Open with?')
clip() { command -v wl-copy && wl-copy || xclip -selection clipboard; }

case $choice in
  'copy url')          printf '%s' "$feed" | clip ;;
  ytf)                 setsid -f "${TERMINAL:-st}" -e zsh -c "ytf '$feed'; read -r -p '\nENTER…'" ;;
  ytdlc)               setsid -f "${TERMINAL:-st}" -e zsh -c "ytdlc '$feed'; read -r -p '\nENTER…'" ;;
  mpv)                 setsid -f mpv -quiet "$feed" ;;
  'mpv loop')          setsid -f mpv -quiet --loop "$feed" ;;
  'queue yt-dlp')      qndl "$feed" ;;
  'queue download')    qndl "$feed" 'curl -LO' ;;
esac
DM
sudo chmod +x "$DMENU_FILE"
INFO "dmenuhandler written"
}

# ── .desktop file ────────────────────────────────────────────────
write_desktop() {
mkdir -p "$APP_DIR"
cat >"$DESKTOP_FILE" <<EOF
[Desktop Entry]
Name=YTDL handler
Exec=$HANDLER_FILE %u
Type=Application
MimeType=x-scheme-handler/ytdl;
NoDisplay=true
EOF
INFO "desktop entry written"
}

register_xdg() {
  xdg-mime default ytdl.desktop x-scheme-handler/ytdl
  update-desktop-database "$APP_DIR" >/dev/null 2>&1 || true
  INFO "xdg-mime registered"
}

# ── main ─────────────────────────────────────────────────────────
main() {
  ensure_xdg
  GLOW "💥 INSTALL YTDLC"
  read -r -p "Press ENTER to continue…"

  cleanup_old
  check_dependencies
  bootstrap_cookies
  write_ytdl_zsh
  write_handler
  write_dmenuhandler
  write_desktop
  register_xdg

  lock "$YTDL_FILE" "$HANDLER_FILE" "$DMENU_FILE" "$DESKTOP_FILE"
  GLOW "Installation complete"
}

main "$@"
