#!/bin/bash
# Author: 4ndr0666
# ================= // DMENURECORD //
# Usage:
# `$0`: Ask for recording type via dmenu
# `$0 screencast`: Record both audio and screen
# `$0 video`: Record only screen
# `$0 audio`: Record only audio
# `$0 kill`: Kill existing recording
#

updateicon() { \
    if [[ -n "$1" ]]; then
        echo "$1" > /tmp/recordingicon
    else
        echo "" > /tmp/recordingicon
    fi
    pkill RTMIN+9 "${STATUSBAR:-waybar}"
    }

killrecording() {
	recpid="$(cat /tmp/recordingpid)"
	kill -15 "$recpid"
	rm -f /tmp/recordingpid
	updateicon ""
	pkill -RTMIN+9 "${STATUSBAR:-waybar}"
	}

screencast() { \
	ffmpeg -y \
	-f x11grab \
	-framerate 30 \
	-s "$(getdim)" \
	-i "$DISPLAY" \
	-r 24 \
	-use_wallclock_as_timestamps 1 \
	-f alsa -thread_queue_size 1024 -i default \
 	-c:v h264 \
	-crf 0 -preset ultrafast -c:a aac \
	"$HOME/screencast-$(date '+%y%m%d-%H%M-%S').mp4" &
	echo $! > /tmp/recordingpid
	updateicon "‚è∫Ô∏èüéôÔ∏è"
       	}

video() {
    notify-send "Recording started" "Recording video."
    wf-recorder \ 
	--no-damage \
	--framerate 60 \
	--codec libx264 -p qp=0 \
	-f "$HOME/video-$(date '+%y%m%d-%H%M-%S')-$(date +%N).mp4" &
    if [[ $? -eq 0 ]]; then
        echo $! > /tmp/recordingpid
        updateicon "‚è∫Ô∏è"
    else
        notify-send "Recording failed to start."
    fi
}

webcamhidef() { ffmpeg \
	-f v4l2 \
	-i /dev/video0 \
	-video_size 1920x1080 \
	"$HOME/webcam-$(date '+%y%m%d-%H%M-%S').mkv" &
	echo $! > /tmp/recordingpid
	updateicon "üé•"
	}

webcam() { ffmpeg \
	-f v4l2 \
	-i /dev/video0 \
	-video_size 640x480 \
	"$HOME/webcam-$(date '+%y%m%d-%H%M-%S').mkv" &
	echo $! > /tmp/recordingpid
	updateicon "üé•"
	}

audio() {
    notify-send "Recording started" "Recording audio."
    ffmpeg \
	-f alsa -i default \
	-c:a flac \
	"$HOME/audio-$(date '+%y%m%d-%H%M-%S')-$(date +%N).flac" &
    if [[ $? -eq 0 ]]; then
        echo $! > /tmp/recordingpid
        updateicon "üéôÔ∏è"
    else
        notify-send "Audio recording failed to start."
    fi
}

askrecording() { \
	choice=$(printf "screencast\\nvideo\\nvideo selected\\naudio\\nwebcam\\nwebcam (hi-def)" | dmenu -i -p "Select recording style:")
	case "$choice" in
		screencast) screencast;;
		audio) audio;;
		video) video;;
		*selected) videoselected;;
		webcam) webcam;;
		"webcam (hi-def)") webcamhidef;;
	esac
	}

asktoend() { \
	response=$(printf "No\\nYes" | dmenu -i -p "Recording still active. End recording?") &&
	[ "$response" = "Yes" ] &&  killrecording
	}

videoselected() 
{
    slop_output=$(slop -f "%x %y %w %h")
    if [[ -z "$slop_output" ]]; then
        notify-send "Area selection failed." "No area selected. Exiting."
        exit 1
    fi

    IFS=' ' read -r X Y W H <<< "$slop_output"

    if [[ "$W" -le 0 || "$H" -le 0 ]]; then
        notify-send "Invalid area selected." "Width or height is zero. Recording aborted."
        exit 1
    fi

    notify-send "Recording started" "Recording selected area: ${W}x${H} at ${X},${Y}."
    wf-recorder \
	--no-damage
	--framerate 60
	--codec libx264 -p qp=0
	-g "${X},${Y} ${W}x${H}" \
	-f "$HOME/box-$(date '+%y%m%d-%H%M-%S')-$(date +%N).mp4" &

    if [[ $? -eq 0 ]]; then
        echo $! > /tmp/recordingpid
        updateicon "‚è∫Ô∏è"
    else
        notify-send "Recording failed to start."
    fi
}

case "$1" in
	screencast) screencast;;
	audio) audio;;
	video) video;;
	*selected) videoselected;;
	kill) killrecording;;
	*) ([ -f /tmp/recordingpid ] && asktoend && exit) || askrecording;;
esac
