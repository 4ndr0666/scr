#!/bin/bash

# Set constants for directories and files
HOOK_DIR="/etc/pacman.d/hooks"
SCRIPT_DIR="/usr/local/bin"
HOOK_FILE_REMOVAL="60-mkinitcpio-removal.hook"
HOOK_FILE_INSTALL="90-mkinitcpio-install.hook"
SCRIPT_REGENERATE="dracut-regenerate.sh"
SCRIPT_CLEANUP="dracut-cleanup.sh"

# Error function for handling errors gracefully
error_exit() {
    echo "Error: $1" >&2
    exit 1
}

# --- // AUTO_ESCALATE:
if [ "$(id -u)" -ne 0 ]; then
      sudo "$0" "$@"
    exit $?
fi
sleep 1
echo "ðŸ’€WARNINGðŸ’€ - you are now operating as root..."
sleep 1
echo
   
# Ensure necessary directories exist
echo "Ensuring necessary directories exist..."
mkdir -p "$HOOK_DIR" || error_exit "Failed to create hook directory"
mkdir -p "$SCRIPT_DIR" || error_exit "Failed to create script directory"

# Create hook files
echo "Creating hook files..."
cat << 'EOF' > "$HOOK_DIR/$HOOK_FILE_REMOVAL"
[Trigger]
Type = Path
Operation = Install
Operation = Upgrade
Target = usr/lib/modules/*/pkgbase

[Action]
Description = Regenerating initramfs with dracut...
When = PostTransaction
Exec = /usr/local/bin/dracut-regenerate.sh
Depends = dracut
NeedsTargets
EOF
[ $? -eq 0 ] || error_exit "Failed to create $HOOK_FILE_REMOVAL"

cat << 'EOF' > "$HOOK_DIR/$HOOK_FILE_INSTALL"
[Trigger]
Type = Path
Operation = Remove
Target = usr/lib/modules/*/pkgbase

[Action]
Description = Cleaning up old initramfs images...
When = PreTransaction
Exec = /usr/local/bin/dracut-cleanup.sh
NeedsTargets
EOF
[ $? -eq 0 ] || error_exit "Failed to create $HOOK_FILE_INSTALL"

# Create dracut scripts
echo "Creating dracut scripts..."
cat << 'EOF' > "$SCRIPT_DIR/$SCRIPT_REGENERATE"
#!/bin/bash

# Error handling
error_exit() {
    echo "Error: $1" >&2
    exit 1
}

# Remove existing initramfs images in /boot
echo "Removing old initramfs images..."
rm -f /boot/initramfs-*.img || error_exit "Failed to remove old initramfs images"

# Regenerate all initramfs images
echo "Regenerating initramfs images..."
dracut --force --regenerate-all || error_exit "Dracut failed to regenerate initramfs"

# Create symlinks for the current kernel
current_kernel=$(uname -r)
ln -sf /boot/initramfs-${current_kernel}.img /boot/initramfs-linux.img || error_exit "Failed to create initramfs symlink"
ln -sf /boot/vmlinuz-${current_kernel} /boot/vmlinuz-linux || error_exit "Failed to create vmlinuz symlink"

# Ensure GRUB is updated to point to the correct kernel
echo "Updating GRUB configuration..."
grub-mkconfig -o /boot/grub/grub.cfg || error_exit "Failed to update GRUB configuration"

# Check and correct the GRUB default entry if necessary
echo "Ensuring GRUB default entry points to the correct kernel..."
grub-set-default 0 || error_exit "Failed to set GRUB default entry"

echo "Initramfs images regenerated, symlinks created, and GRUB configuration updated successfully."
EOF
[ $? -eq 0 ] || error_exit "Failed to create $SCRIPT_REGENERATE"

cat << 'EOF' > "$SCRIPT_DIR/$SCRIPT_CLEANUP"
#!/bin/bash

# Error handling
error_exit() {
    echo "Error: $1" >&2
    exit 1
}

# Find all installed kernels
installed_kernels=$(ls /usr/lib/modules) || error_exit "Failed to list installed kernels"

# Loop through all initramfs images in /boot and remove those not matching installed kernels
echo "Cleaning up old initramfs images..."
for img in /boot/initramfs-*.img; do
    kernel_version=$(basename "$img" | sed 's/initramfs-//;s/.img//')
    if ! [[ $installed_kernels =~ $kernel_version ]]; then
        echo "Removing old initramfs image: $img"
        rm -f "$img" || error_exit "Failed to remove old initramfs image $img"
    fi
done

# Clean up /boot/efi if necessary
for img in /boot/efi/initramfs-*.img; do
    kernel_version=$(basename "$img" | sed 's/initramfs-//;s/.img//')
    if ! [[ $installed_kernels =~ $kernel_version ]]; then
        echo "Removing old initramfs image from EFI: $img"
        rm -f "$img" || error_exit "Failed to remove old EFI initramfs image $img"
    fi
done

echo "Old initramfs images cleaned up successfully."
EOF
[ $? -eq 0 ] || error_exit "Failed to create $SCRIPT_CLEANUP"

# Make dracut scripts executable
echo "Making dracut scripts executable..."
chmod +x "$SCRIPT_DIR/$SCRIPT_REGENERATE" || error_exit "Failed to make $SCRIPT_REGENERATE executable"
chmod +x "$SCRIPT_DIR/$SCRIPT_CLEANUP" || error_exit "Failed to make $SCRIPT_CLEANUP executable"

# Disable default mkinitcpio hooks
echo "Disabling default mkinitcpio hooks..."
ln -sf /dev/null "$HOOK_DIR/90-mkinitcpio-install.hook" || error_exit "Failed to disable mkinitcpio install hook"
ln -sf /dev/null "$HOOK_DIR/60-mkinitcpio-remove.hook" || error_exit "Failed to disable mkinitcpio remove hook"

echo "Installation complete. Dracut is now configured to manage initramfs images automatically."
