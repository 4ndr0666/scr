#!/bin/bash

# Install script for setting up ZRam with a systemd service

# Variables
ZRAM_SETUP_SCRIPT_PATH="/home/andro/.local/bin/zram_setup.py"
ZRAM_SERVICE_PATH="/etc/systemd/system/zram-setup.service"

# Function to create the ZRam setup Python script
create_zram_setup_script() {
    echo "Creating ZRam setup Python script at $ZRAM_SETUP_SCRIPT_PATH..."
    mkdir -p "$(dirname "$ZRAM_SETUP_SCRIPT_PATH")"

    cat <<EOF > "$ZRAM_SETUP_SCRIPT_PATH"
#!/usr/bin/env python3
import subprocess

def log_and_print(message, level='info'):
    print(f"[{level.upper()}] {message}")

# Step 1: Calculate 25% of total memory
mem_total_cmd = "awk '/MemTotal/ {print int(\$2 * 1024 * 0.25)}' /proc/meminfo"
mem_total_output = subprocess.check_output(mem_total_cmd, shell=True).strip()
log_and_print(f"Memory calculation output: {mem_total_output}", 'info')
mem_total = int(mem_total_output)
log_and_print(f"Calculated ZRam size: {mem_total} bytes", 'info')

# Step 2: Check if an existing zram device is available or create one
try:
    log_and_print("Attempting to find an existing zram device...", 'info')
    zram_device = subprocess.run(["sudo", "zramctl", "--find", "--size", str(mem_total)],
                                 stdout=subprocess.PIPE, text=True, check=True).stdout.strip()
    log_and_print(f"Using existing zram device: {zram_device}", 'info')
except subprocess.CalledProcessError:
    log_and_print("No free zram device found. Creating a new one...", 'info')
    subprocess.run(["sudo", "modprobe", "zram"], check=True)
    zram_device = subprocess.run(["sudo", "zramctl", "--find", "--size", str(mem_total)],
                                 stdout=subprocess.PIPE, text=True, check=True).stdout.strip()
    log_and_print(f"Created new zram device: {zram_device}", 'info')

# Step 3: Set up the zram device as swap
log_and_print(f"Setting up {zram_device} as swap...", 'info')
subprocess.run(["sudo", "mkswap", zram_device], check=True)
subprocess.run(["sudo", "swapon", zram_device, "-p", "32767"], check=True)
log_and_print(f"ZRam device {zram_device} is set as swap.", 'info')
EOF

    # Make the script executable
    chmod +x "$ZRAM_SETUP_SCRIPT_PATH"
    echo "ZRam setup Python script created and made executable."
}

# Function to create the systemd service for the ZRam setup
create_zram_service() {
    echo "Creating ZRam setup service at $ZRAM_SERVICE_PATH..."

    cat <<EOF > "$ZRAM_SERVICE_PATH"
[Unit]
Description=ZRam Setup Service
After=network.target

[Service]
ExecStart=$ZRAM_SETUP_SCRIPT_PATH
ExecStartPost=/usr/bin/sleep 2
Type=oneshot
RemainAfterExit=true

[Install]
WantedBy=multi-user.target
EOF

    echo "ZRam setup service created."
}

# Function to reload systemd, enable, and start the service
setup_systemd_service() {
    echo "Reloading systemd daemon..."
    sudo systemctl daemon-reload

    echo "Enabling ZRam setup service..."
    sudo systemctl enable zram-setup.service

    echo "Starting ZRam setup service..."
    sudo systemctl start zram-setup.service

    echo "ZRam setup service has been enabled and started."
}

# Main function to orchestrate the installation
main() {
    create_zram_setup_script
    create_zram_service
    setup_systemd_service
}

# Execute the main function
main
