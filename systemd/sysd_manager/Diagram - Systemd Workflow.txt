### Systemd Workflow

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Systemd Cheat Sheet for Arch Linux System Administrators
--------------------------------------------------------

### Systemd Basics

Systemd is a system and service manager for Linux, compatible with SysV and LSB init scripts. It is used for booting the system, managing system processes, and providing features for managing services.

### Service Management

*   **Start a service**
    
    sh
    
    `sudo systemctl start [service_name]`
    
    _Example:_ Start the Apache HTTP server
    
    sh
    
    `sudo systemctl start httpd`
    
*   **Stop a service**
    
    sh
    
    `sudo systemctl stop [service_name]`
    
    _Example:_ Stop the Apache HTTP server
    
    sh
    
    `sudo systemctl stop httpd`
    
*   **Restart a service**
    
    sh
    
    `sudo systemctl restart [service_name]`
    
    _Example:_ Restart the Apache HTTP server
    
    sh
    
    `sudo systemctl restart httpd`
    
*   **Reload a service (without full restart)**
    
    sh
    
    `sudo systemctl reload [service_name]`
    
    _Example:_ Reload the Apache HTTP server
    
    sh
    
    `sudo systemctl reload httpd`
    
*   **Enable a service (start at boot)**
    
    sh
    
    `sudo systemctl enable [service_name]`
    
    _Example:_ Enable the Apache HTTP server to start on boot
    
    sh
    
    `sudo systemctl enable httpd`
    
*   **Disable a service (do not start at boot)**
    
    sh
    
    `sudo systemctl disable [service_name]`
    
    _Example:_ Disable the Apache HTTP server from starting on boot
    
    sh
    
    `sudo systemctl disable httpd`
    
*   **Check the status of a service**
    
    sh
    
    `sudo systemctl status [service_name]`
    
    _Example:_ Check the status of the Apache HTTP server
    
    sh
    
    `sudo systemctl status httpd`
    

### System Management

*   **Reboot the system**
    
    sh
    
    `sudo systemctl reboot`
    
*   **Shut down the system**
    
    sh
    
    `sudo systemctl poweroff`
    
*   **Suspend the system**
    
    sh
    
    `sudo systemctl suspend`
    

### Unit Management

*   **List all units (services, sockets, devices, etc.)**
    
    sh
    
    `systemctl list-units`
    
*   **List all unit files (including those that are not active)**
    
    sh
    
    `systemctl list-unit-files`
    
*   **Check the status of all services**
    
    sh
    
    `systemctl list-units --type=service`
    

### Logs and Troubleshooting

*   **View system logs**
    
    sh
    
    `journalctl`
    
*   **View logs for a specific service**
    
    sh
    
    `journalctl -u [service_name]`
    
    _Example:_ View logs for the Apache HTTP server
    
    sh
    
    `journalctl -u httpd`
    
*   **View logs since boot**
    
    sh
    
    `journalctl -b`
    
*   **View the kernel log**
    
    sh
    
    `journalctl -k`
    
*   **Follow logs in real-time**
    
    sh
    
    `journalctl -f`
    

### Timers (Systemd's equivalent to cron jobs)

*   **List all timers**
    
    sh
    
    `systemctl list-timers`
    
*   **Start a timer**
    
    sh
    
    `sudo systemctl start [timer_name]`
    
    _Example:_ Start a backup timer
    
    sh
    
    `sudo systemctl start backup.timer`
    
*   **Enable a timer**
    
    sh
    
    `sudo systemctl enable [timer_name]`
    
    _Example:_ Enable a backup timer
    
    sh
    
    `sudo systemctl enable backup.timer`
    

### Mount and Automount

*   **Mount a filesystem**
    
    sh
    
    `sudo systemctl start [mount_name]`
    
    _Example:_ Mount a filesystem defined in /etc/fstab
    
    sh
    
    `sudo systemctl start home.mount`
    
*   **Enable a mount (for automatic mounting at boot)**
    
    sh
    
    `sudo systemctl enable [mount_name]`
    
    _Example:_ Enable a filesystem to mount at boot
    
    sh
    
    `sudo systemctl enable home.mount`
    

### Network Management (using systemd-networkd)

*   **Start the network service**
    
    sh
    
    `sudo systemctl start systemd-networkd`
    
*   **Enable the network service (start at boot)**
    
    sh
    
    `sudo systemctl enable systemd-networkd`
    
*   **Check the status of the network service**
    
    sh
    
    `sudo systemctl status systemd-networkd`
    

### Practical Usage Examples

*   **Restart the SSH service after making changes to its configuration:**
    
    sh
    
    `sudo systemctl restart sshd`
    
*   **Check if a critical service like MySQL is running:**
    
    sh
    
    `sudo systemctl status mysqld`
    
*   **Enable and start a new service immediately:**
    
    sh
    
    `sudo systemctl enable --now nginx`
    
*   **Debugging a failing service by viewing its logs:**
    
    sh
    
    `sudo systemctl status httpd sudo journalctl -u httpd`
    

### Summary

This cheat sheet covers essential systemd commands for managing services, system state, logs, and more on Arch Linux. Familiarizing yourself with these commands will streamline your workflow as a system administrator and help you efficiently manage and troubleshoot your system.

* * *

By using this cheat sheet, you should be able to quickly recall and apply the most commonly used systemd commands in real-world administrative tasks.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Resolving Systemd Service Conflicts and Restoring Functionality
---------------------------------------------------------------

### Scenario: Modified Systemd Services

Over the past few months, a user has made various modifications to systemd services. As a result, the systemd setup has lost some of its original functionality. The services were initially configured to specific admin requirements, so a `systemctl preset-all` is not a suitable solution.

### Step-by-Step Resolution

1.  **Identify Modified Services**
    
    *   **List all services and check their status**
        
        sh
        
        `systemctl list-units --type=service --all`
        
        _Example Output:_ This will show all services, including inactive and failed ones. Look for any anomalies or changes from the original setup.
2.  **Review Service Configuration Changes**
    
    *   **Check the configuration of each suspect service**
        
        sh
        
        `systemctl cat [service_name]`
        
        _Example:_ Check the configuration for the Apache HTTP server
        
        sh
        
        `systemctl cat httpd`
        
    *   **Compare with original service files (if available)** If you have backups or a reference for the original configuration, compare them to identify changes.
3.  **Restore Original Service Files (if available)**
    
    *   **Replace modified service files with the original**
        
        sh
        
        `sudo cp /path/to/backup/[service_name].service /etc/systemd/system/[service_name].service`
        
        _Example:_ Restore the Apache HTTP server configuration
        
        sh
        
        `sudo cp /backup/httpd.service /etc/systemd/system/httpd.service`
        
4.  **Reload Systemd Configuration**
    
    *   **Reload the systemd manager configuration**
        
        sh
        
        `sudo systemctl daemon-reload`
        
5.  **Restart Services**
    
    *   **Restart the services to apply the restored configurations**
        
        sh
        
        `sudo systemctl restart [service_name]`
        
        _Example:_ Restart the Apache HTTP server
        
        sh
        
        `sudo systemctl restart httpd`
        
6.  **Enable Services (if they were disabled)**
    
    *   **Enable the services to start at boot**
        
        sh
        
        `sudo systemctl enable [service_name]`
        
        _Example:_ Enable the Apache HTTP server to start at boot
        
        sh
        
        `sudo systemctl enable httpd`
        
7.  **Verify Service Functionality**
    
    *   **Check the status of each restored service**
        
        sh
        
        `sudo systemctl status [service_name]`
        
        _Example:_ Verify the Apache HTTP server
        
        sh
        
        `sudo systemctl status httpd`
        
8.  **Check for Dependencies and Conflicts**
    
    *   **List dependencies of a service**
        
        sh
        
        `systemctl list-dependencies [service_name]`
        
        _Example:_ Check dependencies for Apache HTTP server
        
        sh
        
        `systemctl list-dependencies httpd`
        
    *   **List reverse dependencies (units that depend on this service)**
        
        sh
        
        `systemctl list-dependencies --reverse [service_name]`
        
        _Example:_ Check reverse dependencies for Apache HTTP server
        
        sh
        
        `systemctl list-dependencies --reverse httpd`
        
9.  **Analyze Logs for Errors**
    
    *   **View logs for specific services**
        
        sh
        
        `journalctl -u [service_name]`
        
        _Example:_ View logs for Apache HTTP server
        
        sh
        
        `journalctl -u httpd`
        
    *   **Filter logs for error messages**
        
        sh
        
        `journalctl -p err -u [service_name]`
        
        _Example:_ View error logs for Apache HTTP server
        
        sh
        
        `journalctl -p err -u httpd`
        
10.  **Document Changes and Restore Points**
    
    *   **Create a backup of the current service configurations**
        
        sh
        
        `sudo cp /etc/systemd/system/[service_name].service /path/to/backup/[service_name].service`
        
        _Example:_ Backup the Apache HTTP server configuration
        
        sh
        
        `sudo cp /etc/systemd/system/httpd.service /backup/httpd.service`
        
    *   **Maintain documentation of changes for future reference**
        

### Practical Usage Example

Assume a user has modified the `nginx`, `mysql`, and `sshd` services.

1.  **Identify Modified Services**
    
    sh
    
    `systemctl list-units --type=service --all`
    
2.  **Review Service Configuration Changes**
    
    sh
    
    `systemctl cat nginx systemctl cat mysqld systemctl cat sshd`
    
3.  **Restore Original Service Files (if backups are available)**
    
    sh
    
    `sudo cp /backup/nginx.service /etc/systemd/system/nginx.service sudo cp /backup/mysqld.service /etc/systemd/system/mysqld.service sudo cp /backup/sshd.service /etc/systemd/system/sshd.service`
    
4.  **Reload Systemd Configuration**
    
    sh
    
    `sudo systemctl daemon-reload`
    
5.  **Restart Services**
    
    sh
    
    `sudo systemctl restart nginx sudo systemctl restart mysqld sudo systemctl restart sshd`
    
6.  **Enable Services**
    
    sh
    
    `sudo systemctl enable nginx sudo systemctl enable mysqld sudo systemctl enable sshd`
    
7.  **Verify Service Functionality**
    
    sh
    
    `sudo systemctl status nginx sudo systemctl status mysqld sudo systemctl status sshd`
    
8.  **Check for Dependencies and Conflicts**
    
    sh
    
    `systemctl list-dependencies nginx systemctl list-dependencies --reverse nginx`
    
9.  **Analyze Logs for Errors**
    
    sh
    
    `journalctl -u nginx journalctl -p err -u nginx`
    
10.  **Document Changes and Restore Points**
    

sh

`sudo cp /etc/systemd/system/nginx.service /backup/nginx.service sudo cp /etc/systemd/system/mysqld.service /backup/mysqld.service sudo cp /etc/systemd/system/sshd.service /backup/sshd.service`

By following these steps, you can effectively restore and verify the original functionality of systemd services, ensuring the system operates as required by the system administrator's specifications.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
From ChatGPT, designed with FancyGPT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
