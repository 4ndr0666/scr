#!/bin/bash

# --- // AUTO_ESCALATE:
if [ "$(id -u)" -ne 0 ]; then
    echo "This script requires root privileges. Please enter your password to continue."
    exec sudo "$0" "$@"
fi

sleep 1
echo "ðŸ’€WARNINGðŸ’€ - you are now operating as root..."
sleep 1
echo

set -euo pipefail  # Fail fast on errors and undefined variables

# Paths and files
BASE_DIR="/home/andro/.local/bin"
FREECACHE_PATH="/etc/systemd/system/freecache.path"
FREECACHE_SERVICE="/etc/systemd/system/freecache.service"
MEMORY_MONITOR_SERVICE="/etc/systemd/system/memory_monitor.service"
OOMD_SERVICE="/etc/systemd/system/systemd-oomd.service"
EARLYOOM_SERVICE="/etc/systemd/system/earlyoom.service"
OOMD_CONF="/etc/systemd/oomd.conf"
log_file="/var/log/freecache.log"

# Initialize EARLYOOM_BIN as empty
EARLYOOM_BIN=""

# Function to check and install dependencies
installDependencies() {
    local packages=("systemd" "earlyoom" "procps-ng")
    for pkg in "${packages[@]}"; do
        if ! pacman -Qi "$pkg" &> /dev/null; then
            echo "Installing package $pkg..."
            sudo pacman -S --needed --noconfirm "$pkg" || { echo "Error: Failed to install $pkg"; exit 1; }
        else
            echo "Package $pkg is already installed."
        fi
    done
}

# Function to dynamically resolve paths
resolvePaths() {
    EARLYOOM_BIN=$(command -v earlyoom || true)
    if [[ -z "$EARLYOOM_BIN" ]]; then
        echo "earlyoom binary not found in PATH. Attempting to install..."
        installDependencies
        EARLYOOM_BIN=$(command -v earlyoom || true)
        if [[ -z "$EARLYOOM_BIN" ]]; then
            echo "Error: earlyoom binary still not found after installation."
            exit 1
        fi
    fi
    echo "Found earlyoom binary at: $EARLYOOM_BIN"
}

# Function to check command dependencies
checkCommandDependencies() {
    local commands=("systemctl" "mkdir" "chmod" "tee" "sysctl" "free" "awk" "date" "sudo")
    for cmd in "${commands[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            echo "Error: $cmd is not installed. Please install it to proceed." >&2
            exit 1
        fi
    done
}

# Function to create necessary directories and check permissions
createDirectories() {
    if [[ ! -d "$BASE_DIR" ]]; then
        mkdir -p "$BASE_DIR" || { echo "Error: Failed to create directory $BASE_DIR"; exit 1; }
        echo "Created directory: $BASE_DIR"
    elif [[ ! -w "$BASE_DIR" ]]; then
        echo "Error: Directory $BASE_DIR is not writable."
        exit 1
    else
        echo "Directory $BASE_DIR already exists and is writable."
    fi
}

# Function to define and write file contents if they differ from existing ones
defineWriteFiles() {
    local content="$1"
    local path="$2"
    if [[ -f "$path" ]]; then
        local existing_content
        existing_content=$(<"$path")
        if [[ "$existing_content" == "$content" ]]; then
            echo "File $path is already up to date."
            return
        else
            echo "Updating file $path."
            backupServiceFile "$path"
        fi
    else
        echo "Creating file $path."
    fi
    echo "$content" | tee "$path" > /dev/null
}

# Function to make scripts executable if not already
makeExecutable() {
    local script="$1"
    if [[ -x "$script" ]]; then
        echo "Script $script is already executable."
    else
        chmod +x "$script"
        echo "Made $script executable."
    fi
}

# Function to reload systemd and enable/start services
reloadEnableStartServices() {
    systemctl daemon-reload
    local services=("memory_monitor.service" "freecache.service" "systemd-oomd.service" "earlyoom.service")
    for service in "${services[@]}"; do
        if systemctl is-enabled --quiet "$service"; then
            echo "Service $service is already enabled."
        else
            systemctl enable "$service" || { echo "Failed to enable $service"; return 1; }
        fi

        if systemctl is-active --quiet "$service"; then
            echo "Service $service is already running."
        else
            systemctl start "$service" || { echo "Failed to start $service"; return 1; }
        fi
    done
}

# Function to enable a service safely
enableServiceSafely() {
    local service="$1"
    if systemctl is-enabled --quiet "$service"; then
        echo "Service $service is already enabled."
    else
        systemctl enable "$service" || { echo "Failed to enable $service"; return 1; }
    fi
}

# Function to create a backup of existing service files
backupServiceFile() {
    local service_file="$1"
    if [[ -f "$service_file" ]]; then
        local backup_file="$service_file.bak.$(date +'%Y%m%d%H%M%S')"
        cp "$service_file" "$backup_file" || { echo "Error: Failed to create backup of $service_file"; exit 1; }
        echo "Backup of $service_file created as $backup_file."
    fi
}

# Function to validate systemd service files
validateServiceFile() {
    local file="$1"
    if ! systemd-analyze verify "$file"; then
        echo "Error: Invalid service file $file"
        exit 1
    fi
}

# Adjust swappiness based on free memory
adjust_swappiness() {
    local target_swappiness=10
    local free_ram_mb=$(free -m | awk '/^Mem:/{print $4}')
    if [[ -z "$free_ram_mb" ]]; then
        free_ram_mb=0  # Default to 0 if the free command fails or returns nothing
    fi
    sysctl vm.swappiness="$target_swappiness"
    log_action "Swappiness adjusted to $target_swappiness. Free memory: ${free_ram_mb}MB"
}

# Clear RAM cache if free memory is low
clear_ram_cache() {
    local free_ram_mb=$(free -m | awk '/^Mem:/{print $4}')
    if [[ -z "$free_ram_mb" ]]; then
        free_ram_mb=0  # Default to 0 if the free command fails or returns nothing
    fi

    if [ "$free_ram_mb" -lt 500 ]; then
        echo 3 > /proc/sys/vm/drop_caches
        log_action "RAM cache cleared due to low free memory."
    fi
}

# Clear swap if usage exceeds threshold
clear_swap() {
    local swap_total
    local swap_used
    local swap_usage_percent

    swap_total=$(free | awk '/^Swap:/{print $2}')
    swap_used=$(free | awk '/^Swap:/{print $3}')

    if [[ -z "$swap_total" || -z "$swap_used" || "$swap_total" -eq 0 ]]; then
        swap_usage_percent=0  # Set to 0 if swap values can't be determined
    else
        swap_usage_percent=$(awk "BEGIN {printf \"%.0f\", ($swap_used/$swap_total) * 100}")
    fi

    if [ "$swap_usage_percent" -gt 80 ]; then
        swapoff -a && swapon -a
        log_action "Swap cleared due to high swap usage."
    fi
}

# Kill processes that consume excessive memory
kill_memory_hogs() {
    local mem_threshold=80
    local current_mem_usage
    current_mem_usage=$(free | awk '/^Mem:/{printf("%.0f", $3/$2 * 100)}')

    if [ "$current_mem_usage" -gt "$mem_threshold" ]; then
        log_action "Memory usage over $mem_threshold%. Killing memory hogs..."
        # Identify and kill the top memory-consuming processes
        ps aux --sort=-%mem | awk 'NR>1{print $2, $4, $11}' | while read -r pid mem cmd; do
            if [ "$(echo $mem | cut -d. -f1)" -gt 10 ]; then
                kill -9 "$pid"
                log_action "Killed process $cmd (PID $pid) using $mem% memory."
            fi
        done
    fi
}

# Define service and script contents
FREECACHE_SERVICE_CONTENT=$(cat <<EOF
[Unit]
Description=Free Cache when Memory is Low
After=oomd.service

[Service]
Type=oneshot
ExecStart=$BASE_DIR/freecache.sh

[Install]
WantedBy=multi-user.target
EOF
)

MEMORY_MONITOR_SERVICE_CONTENT=$(cat <<EOF
[Unit]
Description=Monitor Memory Usage

[Service]
Type=simple
ExecStart=$BASE_DIR/memory_monitor.sh

[Install]
WantedBy=multi-user.target
EOF
)

OOMD_SERVICE_CONTENT=$(cat <<EOF
[Unit]
Description=Out Of Memory Daemon
ConditionControlGroupController=v2
ConditionControlGroupController=memory
ConditionPathExists=/proc/pressure/cpu
ConditionPathExists=/proc/pressure/io
ConditionPathExists=/proc/pressure/memory
Requires=systemd-oomd.socket
After=systemd-oomd.socket

[Service]
AmbientCapabilities=CAP_KILL CAP_DAC_OVERRIDE
BusName=org.freedesktop.oom1
CapabilityBoundingSet=CAP_KILL CAP_DAC_OVERRIDE
ExecStart=/usr/lib/systemd/systemd-oomd
IPAddressDeny=any
LockPersonality=yes
MemoryDenyWriteExecute=yes
MemoryMin=128M
MemoryLow=128M
NoNewPrivileges=yes
OOMScoreAdjust=-900
PrivateDevices=yes
PrivateTmp=yes
ProtectClock=yes
ProtectHome=yes
ProtectHostname=yes
ProtectKernelLogs=yes
ProtectKernelModules=yes
ProtectKernelTunables=yes
ProtectSystem=strict
Restart=on-failure
RestrictAddressFamilies=AF_UNIX
RestrictNamespaces=yes
RestrictRealtime=yes
RestrictSUIDSGID=yes
SystemCallArchitectures=native
SystemCallErrorNumber=EPERM
SystemCallFilter=@system-service
Type=notify
User=systemd-oom
WatchdogSec=3min

[Install]
WantedBy=multi-user.target
Alias=dbus-org.freedesktop.oom1.service
EOF
)

EARLYOOM_SERVICE_CONTENT=$(cat <<EOF
[Unit]
Description=Early OOM Daemon
After=network.target

[Service]
ExecStart=$EARLYOOM_BIN -m 35 -s 35 -r 60 -p -d -n --sort-by-rss --avoid '(^|/)(init|X|wayland|wayfire|sshd|brave|systemd)$'
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
)

OOMD_CONF_CONTENT=$(cat <<EOF
# /etc/systemd/oomd.conf
# oomd Configuration File

[OOM]
SwapUsedLimit=50%
DefaultMemoryPressureLimit=45%
DefaultMemoryPressureDurationSec=10s
EOF
)

FREECACHE_SCRIPT_CONTENT=$(cat <<EOF
#!/bin/bash

set -euo pipefail

log_file="/var/log/freecache.log"

log_action() {
    echo "\$(date '+%Y-%m-%d %H:%M:%S') - \$1" >> "\$log_file"
}

if [ "\$(id -u)" -ne 0 ]; then
    exec sudo "\$0" "\${@:-}"
fi

mkdir -p "$(dirname "$log_file")" || { echo "Failed to create log directory"; exit 1; }
touch "$log_file" || { echo "Failed to create log file"; exit 1; }

adjust_swappiness() {
    local target_swappiness=10
    local free_ram_mb=\$(free -m | awk '/^Mem:/{print \$4}')
    if [[ -z "\$free_ram_mb" ]]; then
        free_ram_mb=0
    fi
    sysctl vm.swappiness="\$target_swappiness"
    log_action "Swappiness adjusted to \$target_swappiness."
}

clear_ram_cache() {
    local free_ram_mb=\$(free -m | awk '/^Mem:/{print \$4}')
    if [[ -z "\$free_ram_mb" ]]; then
        free_ram_mb=0
    fi

    if [ "\$free_ram_mb" -lt 500 ]; then
        echo 3 > /proc/sys/vm/drop_caches
        log_action "RAM cache cleared due to low free memory."
    fi
}

clear_swap() {
    local swap_total=\$(free | awk '/^Swap:/{print \$2}')
    local swap_used=\$(free | awk '/^Swap:/{print \$3}')
    local swap_usage_percent=\$(awk "BEGIN {printf \"%.0f\", (\$swap_used/\$swap_total) * 100}")

    if [ "\$swap_usage_percent" -gt 80 ]; then
        swapoff -a && swapon -a
        log_action "Swap cleared due to high swap usage."
    fi
}

kill_memory_hogs() {
    local mem_threshold=80
    local current_mem_usage=\$(free | awk '/^Mem:/{printf("%.0f", \$3/\$2 * 100)}')

    if [ "\$current_mem_usage" -gt "\$mem_threshold" ]; then
        log_action "Memory usage over \$mem_threshold%. Killing memory hogs..."
        ps aux --sort=-%mem | awk 'NR>1{print \$2, \$4, \$11}' | while read -r pid mem cmd; do
            if [ "\$(echo \$mem | cut -d. -f1)" -gt 10 ]; then
                kill -9 "\$pid"
                log_action "Killed process \$cmd (PID \$pid) using \$mem% memory."
            fi
        done
    fi
}

adjust_swappiness
clear_ram_cache
clear_swap
kill_memory_hogs

log_action "Memory and Swap Usage After Operations:"
free -h | tee -a "\$log_file"
EOF
)

MEMORY_MONITOR_SCRIPT_CONTENT=$(cat <<EOF
#!/bin/bash
while true; do
    FREE_RAM=\$(free -m | awk '/^Mem:/{print \$4}')
    if [ "\$FREE_RAM" -lt 1000 ]; then
        touch /tmp/low_memory
    else
        rm -f /tmp/low_memory
    fi
    sleep 60
done
EOF
)

# Main function to orchestrate the script logic
main() {
    checkCommandDependencies
    resolvePaths
    createDirectories

    # Backup and define services and scripts
    backupServiceFile "$EARLYOOM_SERVICE"
    backupServiceFile "$OOMD_SERVICE"

    defineWriteFiles "$FREECACHE_SERVICE_CONTENT" "$FREECACHE_SERVICE"
    defineWriteFiles "$MEMORY_MONITOR_SERVICE_CONTENT" "$MEMORY_MONITOR_SERVICE"
    defineWriteFiles "$OOMD_SERVICE_CONTENT" "$OOMD_SERVICE"
    defineWriteFiles "$EARLYOOM_SERVICE_CONTENT" "$EARLYOOM_SERVICE"
    defineWriteFiles "$OOMD_CONF_CONTENT" "$OOMD_CONF"

    validateServiceFile "$FREECACHE_SERVICE"
    validateServiceFile "$MEMORY_MONITOR_SERVICE"
    validateServiceFile "$OOMD_SERVICE"
    validateServiceFile "$EARLYOOM_SERVICE"

    defineWriteFiles "$FREECACHE_SCRIPT_CONTENT" "$BASE_DIR/freecache.sh"
    defineWriteFiles "$MEMORY_MONITOR_SCRIPT_CONTENT" "$BASE_DIR/memory_monitor.sh"

    makeExecutable "$BASE_DIR/freecache.sh"
    makeExecutable "$BASE_DIR/memory_monitor.sh"

    reloadEnableStartServices

    enableServiceSafely "earlyoom.service"
}

# Execute the main function
main
