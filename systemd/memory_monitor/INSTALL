#!/bin/bash

# --- // AUTO_ESCALATE:
if [ "$(id -u)" -ne 0 ]; then
    echo "This script requires root privileges. Please enter your password to continue."
    sudo "$0" "${@:-}"
    exit $?
fi
sleep 1
echo "ðŸ’€WARNINGðŸ’€ - you are now operating as root..."
sleep 1
echo

set -euo pipefail

# Paths and files
BASE_DIR="${HOME}/.local/bin"
FREECACHE_PATH="/etc/systemd/system/freecache.path"
FREECACHE_SERVICE="/etc/systemd/system/freecache.service"
MEMORY_MONITOR_SERVICE="/etc/systemd/system/memory_monitor.service"
OOMD_SERVICE="/etc/systemd/system/systemd-oomd.service"
EARLYOOM_SERVICE="/etc/systemd/system/earlyoom.service"
OOMD_CONF="/etc/systemd/oomd.conf"

# Function to check and install dependencies
installDependencies() {
    local packages=("systemd" "earlyoom" "procps-ng")
    for pkg in "${packages[@]}"; do
        if ! pacman -Qi "$pkg" &> /dev/null; then
            sudo pacman -S --noconfirm "$pkg"
        else
            echo "Package $pkg is already installed."
        fi
    done
}

# Function to dynamically resolve paths
resolvePaths() {
    EARLYOOM_BIN=$(which earlyoom || echo "/usr/local/bin/earlyoom")
    if [[ ! -f "$EARLYOOM_BIN" ]]; then
        echo "Error: $EARLYOOM_BIN does not exist. Please install earlyoom or adjust the path."
        exit 1
    fi
}

# Function to check command dependencies
checkCommandDependencies() {
    local commands=("systemctl" "mkdir" "chmod" "tee" "sysctl" "free" "awk" "date" "sudo")
    for cmd in "${commands[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            echo "Error: $cmd is not installed. Please install it to proceed." >&2
            exit 1
        fi
    done
}

# Function to create necessary directories
createDirectories() {
    if [[ ! -d "$BASE_DIR" ]]; then
        mkdir -p "$BASE_DIR"
        echo "Created directory: $BASE_DIR"
    else
        echo "Directory $BASE_DIR already exists."
    fi
}

# Function to define and write file contents if they differ from existing ones
defineWriteFiles() {
    local content="$1"
    local path="$2"
    if [[ -f "$path" ]]; then
        local existing_content
        existing_content=$(<"$path")
        if [[ "$existing_content" == "$content" ]]; then
            echo "File $path is already up to date."
            return
        else
            echo "Updating file $path."
        fi
    else
        echo "Creating file $path."
    fi
    echo "$content" | tee "$path" > /dev/null
}

# Function to make scripts executable if not already
makeExecutable() {
    local script="$1"
    if [[ -x "$script" ]]; then
        echo "Script $script is already executable."
    else
        chmod +x "$script"
        echo "Made $script executable."
    fi
}

# Function to reload systemd and enable/start services
reloadEnableStartServices() {
    systemctl daemon-reload
    local services=("memory_monitor.service" "freecache.path" "systemd-oomd.service" "earlyoom.service")
    for service in "${services[@]}"; do
        if systemctl is-enabled --quiet "$service"; then
            echo "Service $service is already enabled."
        else
            systemctl enable "$service"
        fi
        if systemctl is-active --quiet "$service"; then
            echo "Service $service is already running."
        else
            systemctl start "$service"
        fi
    done
}

# Function to enable a service safely
enableServiceSafely() {
    local service="$1"
    if systemctl is-enabled --quiet "$service"; then
        echo "Service $service is already enabled."
    else
        systemctl enable "$service" || { echo "Failed to enable $service"; return 1; }
    fi
}

# Function to create a backup of existing service files
backupServiceFile() {
    local service_file="$1"
    if [[ -f "$service_file" ]]; then
        local backup_file="$service_file.bak.$(date +'%Y%m%d%H%M%S')"
        cp "$service_file" "$backup_file"
        echo "Backup of $service_file created as $backup_file."
    fi
}

# Main script logic
main() {
    installDependencies
    resolvePaths
    checkCommandDependencies
    createDirectories

    # Backup existing service files
    backupServiceFile "$EARLYOOM_SERVICE"
    backupServiceFile "$OOMD_SERVICE"

    # Define and write new service files if necessary
    defineWriteFiles "$FREECACHE_SERVICE_CONTENT" "$FREECACHE_SERVICE"
    defineWriteFiles "$MEMORY_MONITOR_SERVICE_CONTENT" "$MEMORY_MONITOR_SERVICE"
    defineWriteFiles "$OOMD_SERVICE_CONTENT" "$OOMD_SERVICE"
    defineWriteFiles "$EARLYOOM_SERVICE_CONTENT" "$EARLYOOM_SERVICE"
    defineWriteFiles "$OOMD_CONF_CONTENT" "$OOMD_CONF"

    defineWriteFiles "$FREECACHE_SCRIPT_CONTENT" "$BASE_DIR/freecache.sh"
    defineWriteFiles "$MEMORY_MONITOR_SCRIPT_CONTENT" "$BASE_DIR/memory_monitor.sh"

    makeExecutable "$BASE_DIR/freecache.sh"
    makeExecutable "$BASE_DIR/memory_monitor.sh"

    reloadEnableStartServices

    enableServiceSafely "earlyoom.service"
}

FREECACHE_SERVICE_CONTENT=$(cat <<EOF
[Unit]
Description=Free Cache when Memory is Low
After=oomd.service  # Ensures this service runs after oomd

[Service]
Type=oneshot
ExecStart=$BASE_DIR/freecache.sh

[Install]
WantedBy=multi-user.target
EOF
)

MEMORY_MONITOR_SERVICE_CONTENT=$(cat <<EOF
[Unit]
Description=Monitor Memory Usage

[Service]
Type=simple
ExecStart=$BASE_DIR/memory_monitor.sh

[Install]
WantedBy=multi-user.target
EOF
)

OOMD_SERVICE_CONTENT=$(cat <<EOF
[Unit]
Description=Out Of Memory Daemon
ConditionControlGroupController=v2
ConditionControlGroupController=memory
ConditionPathExists=/proc/pressure/cpu
ConditionPathExists=/proc/pressure/io
ConditionPathExists=/proc/pressure/memory
Requires=systemd-oomd.socket
After=systemd-oomd.socket

[Service]
AmbientCapabilities=CAP_KILL CAP_DAC_OVERRIDE
BusName=org.freedesktop.oom1
CapabilityBoundingSet=CAP_KILL CAP_DAC_OVERRIDE
ExecStart=/usr/lib/systemd/systemd-oomd
IPAddressDeny=any
LockPersonality=yes
MemoryDenyWriteExecute=yes
MemoryMin=128M
MemoryLow=128M
NoNewPrivileges=yes
OOMScoreAdjust=-900
PrivateDevices=yes
PrivateTmp=yes
ProtectClock=yes
ProtectHome=yes
ProtectHostname=yes
ProtectKernelLogs=yes
ProtectKernelModules=yes
ProtectKernelTunables=yes
ProtectSystem=strict
Restart=on-failure
RestrictAddressFamilies=AF_UNIX
RestrictNamespaces=yes
RestrictRealtime=yes
RestrictSUIDSGID=yes
SystemCallArchitectures=native
SystemCallErrorNumber=EPERM
SystemCallFilter=@system-service
Type=notify
User=systemd-oom
WatchdogSec=3min

[Install]
WantedBy=multi-user.target
Alias=dbus-org.freedesktop.oom1.service
EOF
)

EARLYOOM_SERVICE_CONTENT=$(cat <<EOF
[Unit]
Description=Early OOM Daemon
After=network.target

[Service]
ExecStart=$EARLYOOM_BIN -M 2048 -m 10 -s 10 -r 60 -p -d -n --sort-by-rss --avoid '(^|/)(init|X|wayland|wayfire|sshd|brave|systemd)$'
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
)

OOMD_CONF_CONTENT=$(cat <<EOF
# /etc/systemd/oomd.conf
# oomd Configuration File

[OOM]
# SwapUsedLimit sets the percentage of swap usage at which oomd will take action
SwapUsedLimit=75%

# DefaultMemoryPressureLimit sets the memory pressure threshold for a cgroup.
# oomd will act if the memory pressure exceeds this limit.
DefaultMemoryPressureLimit=70%

# DefaultMemoryPressureDurationSec specifies the duration memory pressure must 
# exceed the limit for oomd to act.
DefaultMemoryPressureDurationSec=20s
EOF
)

FREECACHE_SCRIPT_CONTENT=$(cat <<EOF
#!/bin/bash

# Set robust error handling
set -euo pipefail

log_file="/var/log/freecache.log"

log_action() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - \$1" >> "\$log_file"
}

# Automatically escalate privileges if not run as root
if [ "\$(id -u)" -ne 0 ]; then
    exec sudo "\$0" "\${@:-}"
fi

# Ensure the logging directory and file exist, now that we have root privileges
mkdir -p "\$(dirname "\$log_file")"
touch "\$log_file"

adjust_swappiness() {
    local current_swappiness=\$(sysctl vm.swappiness | awk '{print \$3}')
    local target_swappiness=10
    local free_ram_mb=\$(free -m | awk '/^Mem:/{print \$4}')

    if [[ "\$free_ram_mb" -lt 1000 ]]; then
        target_swappiness=10
    elif [[ "\$free_ram_mb" -gt 2000 ]]; then
        target_swappiness=10
    fi

    if [[ "\$current_swappiness" -ne "\$target_swappiness" ]]; then
        sysctl vm.swappiness="\$target_swappiness"
        log_action "Swappiness adjusted to \$target_swappiness."
    fi
}

clear_ram_cache() {
    local free_ram_mb=\$(free -m | awk '/^Mem:/{print \$4}')

    if [ "\$free_ram_mb" -lt 1000 ]; then
        echo 3 > /proc/sys/vm/drop_caches
        log_action "RAM cache cleared due to low free memory."
    fi
}

clear_swap() {
    local swap_usage_percent=\$(free | awk '/^Swap:/{printf "%.0f", \$3/\$2 * 100}')

    if [ "\$swap_usage_percent" -gt 70 ]; then
        swapoff -a && swapon -a
        log_action "Swap cleared due to high swap usage."
    fi
}

# Main
adjust_swappiness
clear_ram_cache
clear_swap

# Log final state
log_action "Memory and Swap Usage After Operations:"
free -h | tee -a "\$log_file"
EOF
)

MEMORY_MONITOR_SCRIPT_CONTENT=$(cat <<EOF
#!/bin/bash
while true; do
    FREE_RAM=\$(free -m | awk '/^Mem:/{print \$4}')
    # Adjust this threshold as needed, ensuring it's higher than oomd's threshold
    if [ "\$FREE_RAM" -lt 1000 ]; then
        touch /tmp/low_memory
    else
        rm -f /tmp/low_memory
    fi
    sleep 60  # Check every 60 seconds
done
EOF
)

# Execute the main function
main
