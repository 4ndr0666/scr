#!/bin/sh
###############################################################################
# drive_ops.sh (POSIX-Compliant)
# Purpose: Single script for either block-level cloning (ddrescue) or
#          file-level synchronization (rsync).
# Usage:
#   chmod +x drive_ops.sh
#   sudo ./drive_ops.sh
#
# Logs all actions to /var/log/drive_ops.log
###############################################################################

LOG_FILE="/var/log/drive_ops.log"

###############################################################################
# 1) log_msg
###############################################################################
log_msg() {
    TS="$(date "+%Y-%m-%d_%H:%M:%S" 2>/dev/null)"
    if [ -z "$TS" ]; then
        TS="unknown_time"
    fi
    echo "$TS : $1" | tee -a "$LOG_FILE"
}

###############################################################################
# 2) check_dependencies
###############################################################################
check_dependencies() {
    DEPS="ddrescue rsync fsck lsblk"
    for dep in $DEPS
    do
        if ! command -v "$dep" >/dev/null 2>&1
        then
            log_msg "Dependency '$dep' not found. Installing..."
            pacman -Sy --noconfirm "$dep" >/dev/null 2>&1
            if ! command -v "$dep" >/dev/null 2>&1
            then
                log_msg "Failed to install '$dep'. Exiting."
                exit 1
            fi
            log_msg "Installed '$dep' successfully."
        fi
    done
}

###############################################################################
# 3) menu_selection
###############################################################################
menu_selection() {
    echo "Select an operation:"
    echo "1) Clone a disk (ddrescue)"
    echo "2) File-level sync (rsync)"
    printf "Enter choice [1 or 2]: "
    read CHOICE
    case "$CHOICE" in
        1) return 1 ;;
        2) return 2 ;;
        *) return 255 ;;
    esac
}

###############################################################################
# 4) confirm_operation
###############################################################################
confirm_operation() {
    echo "Are you sure you want to proceed? (yes/no):"
    read ANSWER
    ANSWER_LOWER="$(echo "$ANSWER" | tr '[:upper:]' '[:lower:]')"
    if [ "$ANSWER_LOWER" != "yes" ]
    then
        log_msg "User aborted operation."
        exit 0
    fi
}

###############################################################################
# 5) select_drive
###############################################################################
select_drive() {
    echo "Available block devices:"
    lsblk -o NAME,SIZE,TYPE,MOUNTPOINT 2>/dev/null
    echo
    echo "Enter the device name for $1 (e.g., sda):"
    read DRIVE
    if [ ! -b "/dev/$DRIVE" ]
    then
        log_msg "Device /dev/$DRIVE does not exist. Exiting."
        exit 1
    fi
    echo "/dev/$DRIVE"
}

###############################################################################
# 6) ddrescue_clone
###############################################################################
ddrescue_clone() {
    SOURCE_DEV="$1"
    TARGET_DEV="$2"
    DDRESC_LOG="/var/log/ddrescue_clone.log"

    # Unmount if mounted
    for DEV in "$SOURCE_DEV" "$TARGET_DEV"
    do
        MOUNTS="$(lsblk -no MOUNTPOINT "$DEV" 2>/dev/null)"
        if [ -n "$MOUNTS" ]
        then
            log_msg "Unmounting $DEV..."
            umount "$DEV" 2>/dev/null
        fi
    done

    log_msg "Starting ddrescue initial pass: $SOURCE_DEV -> $TARGET_DEV"
    ddrescue -n "$SOURCE_DEV" "$TARGET_DEV" "$DDRESC_LOG"

    log_msg "Retrying bad sectors with ddrescue..."
    ddrescue -d -f -r3 "$SOURCE_DEV" "$TARGET_DEV" "$DDRESC_LOG"

    log_msg "Checking for partitions on $TARGET_DEV..."
    PARTS="$(lsblk -ln -o NAME "$TARGET_DEV" 2>/dev/null | grep -E "^$(basename "$TARGET_DEV")[0-9]+$")"
    if [ -n "$PARTS" ]
    then
        OIFS="$IFS"
        IFS='
'
        for P in $PARTS
        do
            PARTITION="/dev/$P"
            log_msg "Running fsck on $PARTITION..."
            fsck -f "$PARTITION" 2>/dev/null
        done
        IFS="$OIFS"
    else
        log_msg "No partitions found on $TARGET_DEV. Skipping fsck."
    fi

    log_msg "ddrescue clone operation completed."
}

###############################################################################
# 7) rsync_sync
###############################################################################
rsync_sync() {
    echo "Enter the SOURCE path (directory):"
    read SRC_PATH
    if [ ! -d "$SRC_PATH" ]
    then
        log_msg "Source path '$SRC_PATH' is not a directory or does not exist."
        exit 1
    fi

    echo "Enter the TARGET path (directory):"
    read TGT_PATH
    if [ ! -d "$TGT_PATH" ]
    then
        log_msg "Target path '$TGT_PATH' not found. Creating..."
        mkdir -p "$TGT_PATH" 2>/dev/null
        if [ ! -d "$TGT_PATH" ]
        then
            log_msg "Failed to create '$TGT_PATH'. Exiting."
            exit 1
        fi
    fi

    echo "About to sync from '$SRC_PATH' to '$TGT_PATH'. Proceed? (yes/no)"
    read RESP
    RESP_LOWER="$(echo "$RESP" | tr '[:upper:]' '[:lower:]')"
    if [ "$RESP_LOWER" != "yes" ]
    then
        log_msg "User aborted file sync."
        exit 0
    fi

    log_msg "Starting rsync transfer from '$SRC_PATH' to '$TGT_PATH'."
    rsync -avP --append-verify "$SRC_PATH" "$TGT_PATH" 2>&1 | tee -a "$LOG_FILE"
    RSYNC_EXIT="$?"
    if [ "$RSYNC_EXIT" -ne 0 ]
    then
        log_msg "rsync encountered an error (exit code $RSYNC_EXIT)."
        exit "$RSYNC_EXIT"
    fi

    log_msg "rsync file transfer completed successfully."
}

###############################################################################
# Main Execution
###############################################################################
# 1. Clear or create the main log file
: > "$LOG_FILE"
log_msg "Starting drive_ops.sh script..."

# 2. Check for required commands
check_dependencies

# 3. Display menu
menu_selection
CHOICE="$?"
case "$CHOICE" in
    1)
        log_msg "User selected ddrescue (clone)."
        SRC_DEV="$(select_drive "SOURCE drive")"
        TGT_DEV="$(select_drive "TARGET drive")"
        log_msg "Source: $SRC_DEV | Target: $TGT_DEV"
        confirm_operation
        ddrescue_clone "$SRC_DEV" "$TGT_DEV"
        ;;
    2)
        log_msg "User selected rsync (file-level sync)."
        rsync_sync
        ;;
    255)
        log_msg "Invalid menu choice. Exiting."
        exit 1
        ;;
esac

log_msg "All operations completed."
exit 0