#!/usr/bin/env bash
# Author: 4ndr0666
set -eu
set -o pipefail

# ==================================== // FFX //

# Global Options:
#  --advanced, -A        Enable advanced interactive prompts
#  -v, --verbose         Verbose logging (shows FFmpeg progress bar)
#  -b                    Bulk mode for process, fix, clean
#  -an                   Remove audio
#  -d                    Debug mode
#  -C, --composite       Force composite fallback in merges
#  -P, --max1080         Enforce maximum height of 1080p
#
# Commands:
#  process <input> [output] [fps]
#  merge   [-o output] [-s fps] [files...]
#  looperang <file1> [file2 ...] [output]
#  slowmo  <input> [output] [factor] [target_fps]
#  fix     [<input>] <output> [-an]
#  clip    <input> [output]
#  clean   <input> <output>
#  probe   [<file>]
#  help    Show this usage information
# -----------------------------------------------------

## Constants

ADVANCED_MODE=false
VERBOSE_MODE=false
BULK_MODE=false
REMOVE_AUDIO=false
DEBUG_MODE=false
CLEAN_META_DEFAULT=true
COMPOSITE_MODE=false
MAX_1080=false

## Advanced

ADV_CONTAINER="mp4"
ADV_RES="1920x1080"
ADV_FPS="60"
ADV_CODEC="libx264"
ADV_PIX_FMT="yuv420p"
ADV_CRF="18"
ADV_BR="10M"
ADV_MULTIPASS="false"

## TRAP and cleanup

TEMP_FILES=()
TEMP_DIRS=()

cleanup_all() {
  local f
  for f in "${TEMP_FILES[@]}"; do
    if [ -f "$f" ]; then
      rm -f "$f"
    fi
  done
  local d
  for d in "${TEMP_DIRS[@]}"; do
    if [ -d "$d" ]; then
      rm -rf "$d"
    fi
  done
}

register_temp_file() {
  TEMP_FILES+=("$1")
}

register_temp_dir() {
  TEMP_DIRS+=("$1")
}

trap 'cleanup_all; exit 1' SIGINT SIGTERM
trap cleanup_all EXIT

## Autocomplete

#### To enable auto-completion, source this script in your .bashrc or install it.
#### To enable, run: complete -F _ffx_completion ffx
_readarray_for_compgen() {
  #### Use readarray to capture compgen output into an array.
  readarray -t COMPREPLY < <(compgen -W "$1" -- "$2")
}
_ffx_completion() {
  local cur prev opts subcommands
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  subcommands="help probe process merge looperang slowmo fix clip clean"
  opts="--advanced -A --verbose -v -b -an -d -C --composite -P --max1080"
  if [[ ${COMP_CWORD} -eq 1 ]]; then
    _readarray_for_compgen "${subcommands}" "${cur}"
    return 0
  fi
  case "${COMP_WORDS[1]}" in
    process|merge|looperang|slowmo|fix|clip|clean|probe)
      _readarray_for_compgen "${opts}" "${cur}"
      ;;
    *)
      ;;
  esac
}

## Logging & Debug

verbose_log() {
  if [ "$VERBOSE_MODE" = true ]; then
    echo "[VERBOSE] $*"
  fi
}

debug_log() {
  if [ "$DEBUG_MODE" = true ]; then
    echo "[DEBUG] $*" >&2
  fi
}

## moovCheck: Verify that the output file has a valid moov atom.

moovCheck() {
  local outFile="$1"
  # Check file size and duration to ensure container is valid.
  if [ ! -s "$outFile" ]; then
    return 1
  fi
  if ! ffprobe -v error -show_entries format=duration \
       -of default=noprint_wrappers=1:nokey=1 "$outFile" 2>/dev/null | grep -q .; then
    return 1
  fi
  return 0
}

## moov_fallback: If the moov atom is missing, re-encode using a safe approach.

moov_fallback() {
  local in_file="$1"
  local out_file="$2"
  local audio_opts_arr
  read -r -a audio_opts_arr <<< "$(get_audio_opts)"
  ffmpeg -y -i "$in_file" -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium "${audio_opts_arr[@]}" \
    -movflags +faststart "$out_file" >/dev/null 2>&1
}

## Usage

show_usage() {
  local CYAN="\033[36m"
  local RESET="\033[0m"
  echo -e "${CYAN}Usage:${RESET} ffx [global_options] <command> [args...]"
  echo ""
  echo -e "${CYAN}Global Options:${RESET}"
  echo "  --advanced, -A        Enable advanced interactive prompts"
  echo "  -v, --verbose         Verbose logging (shows FFmpeg progress bar)"
  echo "  -b                    Bulk mode for process, fix, clean"
  echo "  -an                   Remove audio"
  echo "  -d                    Debug mode"
  echo "  -C, --composite       Force composite fallback in merges"
  echo "  -P, --max1080         Enforce maximum height of 1080p"
  echo ""
  echo -e "${CYAN}Commands:${RESET}"
  echo "  process <input> [output] [fps]"
  echo "  merge   [-o output] [-s fps] [files...]"
  echo "  looperang <file1> [file2 ...] [output]"
  echo "  slowmo  <input> [output] [factor] [target_fps]"
  echo "  fix     [<input>] <output> [-an]"
  echo "  clip    <input> [output]"
  echo "  clean   <input> <output>"
  echo "  probe   [<file>]"
  echo "  help    Show this usage information"
  echo ""
  exit 0
}

## Utilities: command existence, absolute path, sanitation, human readability and audio

command_exists() {
  command -v "$1" >/dev/null 2>&1
}

absolute_path() {
  local in_path="${1:-}"
  if command_exists readlink; then
    local abs
    abs="$(readlink -f "$in_path" 2>/dev/null || true)"
    if [ -n "$abs" ]; then
      echo "$abs"
    else
      echo "$in_path"
    fi
  else
    echo "$in_path"
  fi
}

get_default_filename() {
  local base="${1:-out}"
  local suffix="${2:-tmp}"
  local ext="${3:-mp4}"
  local candidate="${base}_${suffix}.${ext}"
  local counter=1
  while [ -e "$candidate" ]; do
    candidate="${base}_${suffix}_${counter}.${ext}"
    counter=$(( counter + 1 ))
  done
  echo "$candidate"
}

bytes_to_human() {
  local bytes="${1:-0}"
  if [ "$bytes" -lt 1024 ]; then
    echo "${bytes} B"
  elif [ "$bytes" -lt 1048576 ]; then
    printf "%.2f KiB" "$(echo "$bytes / 1024" | bc -l)"
  elif [ "$bytes" -lt 1073741824 ]; then
    printf "%.2f MiB" "$(echo "$bytes / 1048576" | bc -l)"
  else
    printf "%.2f GiB" "$(echo "$bytes / 1073741824" | bc -l)"
  fi
}

get_audio_opts() {
  if [ "$REMOVE_AUDIO" = true ]; then
    echo "-an"
  else
    echo "-c:a aac -b:a 128k"
  fi
}

#### For commands where splitting is desired, convert audio options to an array.
read -r -a GLOBAL_AUDIO_OPTS <<< "$(get_audio_opts)"

run_ffmpeg() {
  set +e
  ffmpeg "$@"
  local status=$?
  set -e
  return $status
}

## Advanced CLI Prompt

advanced_prompt() {
  if [ "$ADVANCED_MODE" = true ]; then
    echo "# --- // ADVANCED MODE //"
    local cont
    read -r -p "Container extension? [mp4/mkv/mov] (default=mkv): " cont
    if [ -z "$cont" ]; then
      cont="mkv"
    fi
    ADV_CONTAINER="$cont"
    local r
    read -r -p "Resolution? (e.g., 1920x1080) (default=1920x1080): " r
    if [ -z "$r" ]; then
      r="1920x1080"
    fi
    ADV_RES="$r"
    local fpsin
    read -r -p "Frame rate? (24/30/60/120/240) (default=60): " fpsin
    if [ -z "$fpsin" ]; then
      fpsin="60"
    fi
    ADV_FPS="$fpsin"
    local choice
    read -r -p "Codec choice? 1=libx264, 2=libx265 (default=1): " choice
    if [ "$choice" = "2" ]; then
      ADV_CODEC="libx265"
    else
      ADV_CODEC="libx264"
    fi
    local p_choice
    read -r -p "Pixel format? 1=yuv420p, 2=yuv422p (default=1): " p_choice
    if [ "$p_choice" = "2" ]; then
      ADV_PIX_FMT="yuv422p"
    else
      ADV_PIX_FMT="yuv420p"
    fi
    local crfval
    read -r -p "CRF value? (0=lossless, default=18): " crfval
    if [ -z "$crfval" ]; then
      crfval="18"
    fi
    ADV_CRF="$crfval"
    local brval
    read -r -p "Bitrate? (e.g., 10M, default=10M): " brval
    if [ -z "$brval" ]; then
      brval="10M"
    fi
    ADV_BR="$brval"
    local mp_input
    read -r -p "Enable multi-pass? (y/N): " mp_input
    mp_input="$(echo "$mp_input" | tr '[:upper:]' '[:lower:]')"
    if [ "$mp_input" = "y" ] || [ "$mp_input" = "yes" ]; then
      ADV_MULTIPASS="true"
    else
      ADV_MULTIPASS="false"
    fi
    echo "Advanced: Container=$ADV_CONTAINER, Res=$ADV_RES, FPS=$ADV_FPS, Codec=$ADV_CODEC, PixFmt=$ADV_PIX_FMT, CRF=$ADV_CRF, BR=$ADV_BR, Multi=$ADV_MULTIPASS"
  fi
}

## Check Container: Determine if file is in a container that forces re-encode.

check_container_first() {
  local file="$1"
  local fmt
  fmt="$(ffprobe -v error -show_entries format=format_name -of default=noprint_wrappers=1:nokey=1 "$file" 2>/dev/null || echo "")"
  case "$fmt" in
    webm|matroska,webm|matroska)
      echo "webm"
      ;;
    *)
      echo ""
      ;;
  esac
}

## Interlacing Detection and Deinterlace Filter

is_interlaced() {
  local file="$1"
  if [ ! -f "$file" ]; then
    return 1
  fi
  local f_order
  f_order="$(ffprobe -v error -select_streams v:0 -show_entries stream=field_order -of default=noprint_wrappers=1:nokey=1 "$file" 2>/dev/null || echo "")"
  if [ "$f_order" != "progressive" ] && [ -n "$f_order" ]; then
    return 0
  else
    return 1
  fi
}

get_deinterlace_filter() {
  local file="$1"
  if is_interlaced "$file"; then
    echo ",yadif"
  else
    echo ""
  fi
}

## DTS Check & Fix

check_dts_for_file() {
  local file="$1"
  local prev=0
  local prob=0
  ffprobe -v error -select_streams v -show_entries frame=pkt_dts_time -of csv=p=0 "$file" 2>/dev/null | while read -r line; do
    line="$(echo "$line" | tr -d ',' | xargs)"
    if ! echo "$line" | grep -Eq '^[0-9]+(\.[0-9]+)?$'; then
      continue
    fi
    if awk "BEGIN {if ($line < $prev) exit 0; else exit 1}" >/dev/null 2>&1; then
      echo "Non-monotonic DTS detected in $file (prev: $prev, curr: $line)" >&2
      prob=1
      break
    fi
    prev="$line"
  done
  return $prob
}

fix_dts() {
  local file="$1"
  local audio_opts_arr
  read -r -a audio_opts_arr <<< "$(get_audio_opts)"
  local tmpf
  tmpf="$(mktemp --suffix=.mp4)"
  if ! run_ffmpeg -y -fflags +genpts -i "$file" -c:v copy "${audio_opts_arr[@]}" -movflags +faststart "$tmpf" >/dev/null 2>&1 || [ ! -f "$tmpf" ]; then
    if ! run_ffmpeg -y -fflags +genpts -i "$file" -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium "${audio_opts_arr[@]}" "$tmpf" >/dev/null 2>&1 || [ ! -f "$tmpf" ]; then
      echo "❌ fix_dts: Could not fix DTS for $file" >&2
      rm -f "$tmpf"
      return 1
    fi
  fi
  echo "$tmpf"
}

ensure_dts_correct() {
  local file="$1"
  if [ ! -f "$file" ]; then
    echo "❌ ensure_dts_correct: File not found: $file" >&2
    return 1
  fi
  if ! check_dts_for_file "$file"; then
    local fixed
    fixed="$(fix_dts "$file")"
    if [ ! -f "$fixed" ]; then
      echo "❌ ensure_dts_correct: DTS fix failed for $file" >&2
      return 1
    fi
    echo "$fixed"
  else
    echo "$file"
  fi
}

## Auto Clean Metadata

auto_clean() {
  local file="$1"
  if [ -z "$file" ]; then
    return 0
  fi
  if [ "$CLEAN_META_DEFAULT" = true ] && [ -f "$file" ]; then
    local tmpf
    tmpf="$(mktemp --suffix=.mp4)"
    register_temp_file "$tmpf"
    if run_ffmpeg -y -i "$file" -map_metadata -1 -c copy "$tmpf" >/dev/null 2>&1 && [ -f "$tmpf" ]; then
      mv "$tmpf" "$file"
      verbose_log "Auto-cleaned metadata for $file"
    else
      rm -f "$tmpf" 2>/dev/null || true
      verbose_log "Auto-clean failed for $file; original retained."
    fi
  fi
}

## Probe: Displays file information.

cmd_probe() {
  advanced_prompt
  local input="${1:-}"
  if [ -z "$input" ]; then
    if command_exists fzf; then
      echo "➡️ No file provided. Launching fzf..."
      input="$(fzf)"
      if [ -z "$input" ]; then
        echo "❌ No file selected."
        exit 1
      fi
    else
      echo "❌ No input provided for probe."
      exit 1
    fi
  fi
  if [ ! -f "$input" ]; then
    echo "❌ File not found: $input"
    exit 1
  fi
  local CYAN="\033[36m"
  local RESET="\033[0m"
  local sz
  sz="$(stat -c '%s' "$input" 2>/dev/null || echo 0)"
  local hsz
  hsz="$(bytes_to_human "$sz")"
  local resolution
  resolution="$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=p=0:s=x "$input" 2>/dev/null || echo 'unknown')"
  local fps
  fps="$(ffprobe -v error -select_streams v:0 -show_entries stream=avg_frame_rate -of default=noprint_wrappers=1:nokey=1 "$input" 2>/dev/null || echo '0/0')"
  local duration
  duration="$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$input" 2>/dev/null || echo 0)"
  echo -e "${CYAN}# === // Ffx Probe //${RESET}"
  echo
  echo -e "${CYAN}File:${RESET} $input"
  echo -e "${CYAN}Size:${RESET} $hsz"
  local fps_head
  fps_head="$(echo "$fps" | cut -d'/' -f1)"
  if [ "$fps_head" -gt 60 ] 2>/dev/null; then
    echo "➡️ High FPS detected; consider processing."
  fi
  echo -e "${CYAN}--------------------------------${RESET}"
  echo -e "${CYAN}Resolution:${RESET}   $resolution"
  echo -e "${CYAN}FPS:${RESET}          $fps"
  echo -e "${CYAN}Duration:${RESET}     ${duration}s"
}

## Process: Lossless and intelligent downscale (1080p) -P flag forces downscaling to a maximum of 1080p.
cmd_process() {
  advanced_prompt
  local input="${1:-}"
  local output="${2:-}"
  local forced_fps="${3:-}"
  if [ -z "$input" ]; then
    if command_exists fzf; then
      echo "➡️ No input provided. Launching fzf..."
      input="$(fzf)"
      if [ -z "$input" ]; then
        echo "❌ No file selected."
        exit 1
      fi
    else
      echo "❌ 'process' requires <input> [output] [fps]."
      exit 1
    fi
  fi
  if [ ! -s "$input" ]; then
    echo "❌ Input file is zero-length or corrupted: $input"
    exit 1
  fi
  #### Check for WEBM conversion prompt
  local input_ext="${input##*.}"
  if [ "$input_ext" = "webm" ]; then
    read -r -p "Input is WEBM. Choose conversion format [mkv/mp4/mov/gif] (default mkv): " conv_choice
    conv_choice="$(echo "$conv_choice" | tr '[:upper:]' '[:lower:]')"
    if [ -z "$conv_choice" ]; then
      conv_choice="mkv"
    fi
    case "$conv_choice" in
      mkv)
        ADV_CONTAINER="mkv"
        ;;
      mp4)
        ADV_CONTAINER="mp4"
        ;;
      mov)
        ADV_CONTAINER="mov"
        ADV_CODEC="prores_ks"
        ADV_CRF="0"
        ADV_BR="0"
        ;;
      gif)
        ADV_CONTAINER="gif"
        # For GIF conversion, one might choose specific parameters.
        ;;
      *)
        ADV_CONTAINER="mkv"
        ;;
    esac
  fi
  #### Set default output if not provided
  if [ -z "$output" ]; then
    local base
    base="$(basename "$input")"
    local bare="${base%.*}"
    output="$(get_default_filename "$bare" "processed" "$ADV_CONTAINER")"
  fi
  #### Correct DTS if needed
  input="$(ensure_dts_correct "$input")" || exit 1
  local scale_filter=""
  local do_encode=false
  if [ "$ADV_RES" != "1920x1080" ] || [ "$ADV_FPS" != "60" ] || [ -n "$forced_fps" ]; then
    scale_filter="scale=${ADV_RES}:force_original_aspect_ratio=decrease"
    do_encode=true
  fi
  local cont
  cont="$(check_container_first "$input")"
  if [ "$cont" = "webm" ] || [ "$ADV_CONTAINER" != "mp4" ]; then
    do_encode=true
  fi
  #### If -P (max1080) flag is set, prompt user if they wish to downscale if input is over 1080p.
  if [ "$MAX_1080" = true ]; then
    local orig_height
    orig_height="$(ffprobe -v error -select_streams v:0 -show_entries stream=height -of default=noprint_wrappers=1:nokey=1 "$input" 2>/dev/null || echo 0)"
    if [ -n "$orig_height" ] && [ "$orig_height" -gt 1080 ] 2>/dev/null; then
      read -r -p "Input height ($orig_height) exceeds 1080. Downscale losslessly to 1080p? (y/N): " downscale_choice
      downscale_choice="$(echo "$downscale_choice" | tr '[:upper:]' '[:lower:]')"
      if [ "$downscale_choice" = "y" ] || [ "$downscale_choice" = "yes" ]; then
        verbose_log "cmd_process: Downscaling to 1080p as per user selection."
        scale_filter="scale=w=-2:h=1080"
        do_encode=true
      fi
    fi
  fi
  local audio_opts_arr
  read -r -a audio_opts_arr <<< "$(get_audio_opts)"
  local fps_cmd=()
  if [ -n "$forced_fps" ]; then
    fps_cmd=(-r "$forced_fps")
  fi
  #### Add deinterlace filter if applicable
  local deint
  deint="$(get_deinterlace_filter "$input")"
  if [ -n "$scale_filter" ]; then
    scale_filter="${scale_filter}${deint}"
  fi
  #### If no re-encode is needed, attempt direct transmux
  if [ "$do_encode" = false ]; then
    verbose_log "cmd_process: Attempting direct transmux..."
    if ! run_ffmpeg -y -i "$input" -c copy -movflags +faststart "$output" >/dev/null 2>&1 || [ ! -s "$output" ]; then
      echo "❌ Transmux failed; forcing re-encode."
      do_encode=true
    fi
  fi
  #### If re-encode is required, apply the scaling and encoding options
  if [ "$do_encode" = true ]; then
    verbose_log "cmd_process: Re-encoding with CRF=$ADV_CRF"
    if [ -n "$scale_filter" ]; then
      if ! run_ffmpeg -y -i "$input" "${fps_cmd[@]}" -vf "$scale_filter" \
         -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium "${audio_opts_arr[@]}" \
         -movflags +faststart "$output" >/dev/null 2>&1; then
        echo "❌ Re-encode failed."
        exit 1
      fi
    else
      if ! run_ffmpeg -y -i "$input" "${fps_cmd[@]}" \
         -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium "${audio_opts_arr[@]}" \
         -movflags +faststart "$output" >/dev/null 2>&1; then
        echo "❌ Re-encode failed."
        exit 1
      fi
    fi
  fi
  if [ ! -s "$output" ]; then
    echo "❌ Process: Output not created: $output"
    exit 1
  fi
  if ! moovCheck "$output"; then
    verbose_log "cmd_process: moov atom missing; invoking fallback."
    moov_fallback "$input" "$output"
  fi
  if ! moovCheck "$output"; then
    echo "❌ Process: moov atom missing in output: $output"
    exit 1
  fi
  auto_clean "$output"
  echo "✔️ Processed ➡️ $output"
}

## Composite Group: Advanced composite layouts using xstack for counts>=5
composite_group() {
  local files=("$@")
  local count="${#files[@]}"
  if [ "$count" -eq 0 ]; then return 1; fi
  local c_file
  c_file="$(mktemp --suffix=.mp4)"
  register_temp_file "$c_file"
  local w=1280
  local h=720
  if [ -n "${TARGET_WIDTH:-}" ] && [ -n "${TARGET_HEIGHT:-}" ]; then
    w="$TARGET_WIDTH"
    h="$TARGET_HEIGHT"
  fi
  if [ "$count" -eq 1 ]; then
    run_ffmpeg -y -i "${files[0]}" -c copy "$c_file" >/dev/null 2>&1
    echo "$c_file"
    return 0
  elif [ "$count" -eq 2 ]; then
    if ! run_ffmpeg -y -i "${files[0]}" -i "${files[1]}" -filter_complex "hstack=inputs=2, pad=${w}:${h}:((ow-iw)/2):((oh-ih)/2):black" -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium -pix_fmt "$ADV_PIX_FMT" "${GLOBAL_AUDIO_OPTS[@]}" "$c_file" >/dev/null 2>&1; then
      echo "❌ Composite group failed."
      exit 1
    fi
  elif [ "$count" -eq 3 ]; then
    if ! run_ffmpeg -y -i "${files[0]}" -i "${files[1]}" -i "${files[2]}" -filter_complex "vstack=inputs=3" -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium -pix_fmt "$ADV_PIX_FMT" "${GLOBAL_AUDIO_OPTS[@]}" "$c_file" >/dev/null 2>&1; then
      echo "❌ Composite group failed."
      exit 1
    fi
  elif [ "$count" -eq 4 ]; then
    if ! run_ffmpeg -y -i "${files[0]}" -i "${files[1]}" -i "${files[2]}" -i "${files[3]}" -filter_complex "[0:v][1:v]hstack=inputs=2[top]; [2:v][3:v]hstack=inputs=2[bottom]; [top][bottom]vstack=inputs=2" -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium -pix_fmt "$ADV_PIX_FMT" "${GLOBAL_AUDIO_OPTS[@]}" "$c_file" >/dev/null 2>&1; then
      echo "❌ Composite group failed."
      exit 1
    fi
  else
    #### For 5 or more inputs, use xstack.
    local rows=3
    local cols=3
    if [ "$count" -le 6 ]; then
      rows=2
      cols=3
    fi
    local single_w
    single_w=$(printf "%.0f" "$(echo "$w / $cols" | bc -l)")
    local single_h
    single_h=$(printf "%.0f" "$(echo "$h / $rows" | bc -l)")
    local layout=""
    local i=0
    for (( i=0; i<count; i++ )); do
      local col=$(( i % cols ))
      local row=$(( i / cols ))
      local xx=$(( col * single_w ))
      local yy=$(( row * single_h ))
      if [ "$i" -eq 0 ]; then
        layout="${xx}_${yy}"
      else
        layout="${layout}|${xx}_${yy}"
      fi
    done
    if ! run_ffmpeg -y $(for ff in "${files[@]}"; do echo -i "$ff"; done) -filter_complex "xstack=inputs=$count:layout=${layout}:fill=black" -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium -pix_fmt "$ADV_PIX_FMT" "${GLOBAL_AUDIO_OPTS[@]}" "$c_file" >/dev/null 2>&1; then
      echo "❌ Composite group failed."
      exit 1
    fi
  fi
  if ! moovCheck "$c_file"; then
    verbose_log "composite_group: moov atom missing; invoking fallback."
    moov_fallback "${files[0]}" "$c_file"
  fi
  if ! moovCheck "$c_file"; then
    echo "❌ composite_group: moov atom still missing in $c_file"
  fi
  echo "$c_file"
}

## Merge: Dynamically harmonize fps and resolution with advanced composite layouts
cmd_merge() {
  advanced_prompt
  local files=()
  local output=""
  local forced_fps=""
  while [ $# -gt 0 ]; do
    case "$1" in
      -o|--output)
        output="$2"
        shift 2
        ;;
      -s|--fps)
        forced_fps="$2"
        shift 2
        ;;
      *)
        files+=("$1")
        shift
        ;;
    esac
  done
  if [ "${#files[@]}" -lt 2 ]; then
    if command_exists fzf; then
      echo "➡️ Merge requires at least 2 files. Launching fzf multi-select..."
      local sel
      sel="$(fzf --multi)"
      if [ -z "$sel" ]; then
        echo "❌ No files selected."
        exit 1
      fi
      IFS=$'\n' read -r -d '' -a files <<< "$sel" || true
    else
      echo "❌ 'merge' requires at least 2 input files."
      exit 1
    fi
  fi
  if [ -z "$output" ]; then
    output="$(get_default_filename "output" "merged" "mp4")"
  fi
  local tf="$ADV_FPS"
  if [ -n "$forced_fps" ]; then
    tf="$forced_fps"
  fi
  local max_h=0
  local i=0
  local orig_heights=()
  for f in "${files[@]}"; do
    if [ ! -f "$f" ]; then
      echo "❌ File not found: $f"
      exit 1
    fi
    #### Ensure DTS are correct
    local fixd
    fixd="$(ensure_dts_correct "$f")" || exit 1
    files[i]="$fixd"
    local res
    res="$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=p=0:s=x "$fixd" 2>/dev/null)"
    local h
    h="$(echo "$res" | cut -d'x' -f2)"
    if [ "$h" -gt "$max_h" ] 2>/dev/null; then
      max_h="$h"
    fi
    orig_heights[i]="$h"
    i=$(( i + 1 ))
  done
  export TARGET_HEIGHT="$max_h"
  export TARGET_WIDTH
  TARGET_WIDTH=$(printf "%.0f" "$(echo "$TARGET_HEIGHT * 16 / 9" | bc -l)")
  verbose_log "merge: Target resolution: ${TARGET_WIDTH}x${TARGET_HEIGHT} @ fps=$tf"
  local preprocessed=()
  i=0
  for f in "${files[@]}"; do
    local cont_chk
    cont_chk="$(check_container_first "$f")"
    local tmpf
    tmpf="$(mktemp --suffix=.mp4)"
    if [ "$cont_chk" = "webm" ]; then
      if ! run_ffmpeg -y -i "$f" -r "$tf" -vf "pad=${TARGET_WIDTH}:${TARGET_HEIGHT}:((TARGET_WIDTH-iw)/2):((TARGET_HEIGHT-ih)/2):black" -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium "${GLOBAL_AUDIO_OPTS[@]}" -movflags +faststart "$tmpf" >/dev/null 2>&1; then
        echo "❌ Preprocessing failed for $f"
        rm -f "$tmpf"
        exit 1
      fi
    else
      if ! run_ffmpeg -y -i "$f" -r "$tf" -vf "pad=${TARGET_WIDTH}:${TARGET_HEIGHT}:((TARGET_WIDTH-iw)/2):((TARGET_HEIGHT-ih)/2):black" -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium "${GLOBAL_AUDIO_OPTS[@]}" "$tmpf" >/dev/null 2>&1; then
        echo "❌ Preprocessing failed for $f"
        rm -f "$tmpf"
        exit 1
      fi
    fi
    if ! moovCheck "$tmpf"; then
      verbose_log "merge: Moov atom missing for $f; invoking fallback."
      moov_fallback "$f" "$tmpf"
    fi
    preprocessed+=("$tmpf")
    i=$(( i + 1 ))
  done
  #### Group preprocessed files by their original height.
  declare -A groups
  declare -A group_map
  i=0
  for f in "${files[@]}"; do
    local h="${orig_heights[i]}"
    groups["$h"]=$(( ${groups["$h"]:-0} + 1 ))
    group_map["$h"]+="${preprocessed[i]}|"
    i=$(( i + 1 ))
  done
  #### Build final segments array.
  local final_segments=()
  for h in "${!groups[@]}"; do
    IFS='|' read -r -a arr <<< "${group_map[$h]}"
    local valid=()
    local x
    for x in "${arr[@]}"; do
      [ -n "$x" ] && valid+=("$x")
    done
    if [ "${#valid[@]}" -gt 1 ]; then
      #### Use composite_group to create a composite layout for groups of 2-4 files.
      if [ "$COMPOSITE_MODE" = "true" ]; then
        local compf
        compf="$(composite_group "${valid[@]}")"
        final_segments+=("$compf")
      else
        for one in "${valid[@]}"; do
          final_segments+=("$one")
        done
      fi
    else
      for one in "${valid[@]}"; do
        final_segments+=("$one")
      done
    fi
  done
  if [ ${#final_segments[@]} -eq 0 ]; then
    final_segments=("${preprocessed[@]}")
  fi
  #### Create concat list
  local concat_list
  concat_list="$(mktemp)"
  register_temp_file "$concat_list"
  : > "$concat_list"
  for seg in "${final_segments[@]}"; do
    echo "file '$(absolute_path "$seg")'" >> "$concat_list"
  done
  if ! run_ffmpeg -y -avoid_negative_ts make_zero -f concat -safe 0 -i "$concat_list" -c copy "$output" >/dev/null 2>&1; then
    echo "❌ Merge failed: $output"
    rm -f "$concat_list" 2>/dev/null || true
    exit 1
  fi
  rm -f "$concat_list" 2>/dev/null || true
  #### Clean up temporary preprocessed files.
  local pf
  for pf in "${preprocessed[@]}"; do
    rm -f "$pf" 2>/dev/null || true
  done
  auto_clean "$output"
  echo "✔️ Merged ➡️ $output"
}

## Looperang: Lossless palindromic
cmd_looperang() {
  advanced_prompt
  local input="${1:-}"
  local output="${2:-}"
  if [ -z "$input" ]; then
    if command_exists fzf; then
      echo "➡️ looperang: No input provided. Launching fzf..."
      input="$(fzf)"
      if [ -z "$input" ]; then
        echo "❌ No file selected."
        exit 1
      fi
    else
      echo "❌ looperang requires at least one input file."
      exit 1
    fi
  fi
  if [ -z "$output" ]; then
    local b
    b="$(basename "$input")"
    local bare="${b%.*}"
    output="$(get_default_filename "$bare" "looperang" "mp4")"
  fi
  if [ ! -f "$input" ]; then
    echo "❌ File not found: $input"
    exit 1
  fi
  input="$(ensure_dts_correct "$input")" || exit 1
  local cont_chk
  cont_chk="$(check_container_first "$input")"
  if [ "$cont_chk" = "webm" ]; then
    verbose_log "looperang: Re-encoding webm to mp4"
  fi
  local fps
  fps="$(ffprobe -v error -select_streams v:0 -show_entries stream=r_frame_rate -of default=noprint_wrappers=1:nokey=1 "$input" 2>/dev/null || echo "25")"
  local fwd_dir
  fwd_dir="$(mktemp -d)"
  register_temp_dir "$fwd_dir"
  local rev_dir
  rev_dir="$(mktemp -d)"
  register_temp_dir "$rev_dir"
  local fwd_temp
  fwd_temp="$(mktemp --suffix=.mp4)"
  register_temp_file "$fwd_temp"
  local rev_temp
  rev_temp="$(mktemp --suffix=.mp4)"
  register_temp_file "$rev_temp"
  local c_list
  c_list="$(mktemp)"
  register_temp_file "$c_list"
  ffmpeg -y -i "$input" -qscale:v 2 -vsync 0 "$fwd_dir/frame-%06d.jpg" >/dev/null 2>&1
  local count
  count="$(find "$fwd_dir" -type f -name '*.jpg' | wc -l)"
  if [ "$count" -eq 0 ]; then
    echo "❌ Failed to extract frames from $input"
    exit 1
  fi
  local i=0
  find "$fwd_dir" -type f -name '*.jpg' | sort -r | while read -r frm; do
    i=$(( i + 1 ))
    cp "$frm" "$rev_dir/frame-$(printf '%06d' "$i").jpg"
  done
  ffmpeg -y -framerate "$fps" -i "$fwd_dir/frame-%06d.jpg" -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium -pix_fmt "$ADV_PIX_FMT" "$fwd_temp" >/dev/null 2>&1
  ffmpeg -y -framerate "$fps" -i "$rev_dir/frame-%06d.jpg" -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium -pix_fmt "$ADV_PIX_FMT" "$rev_temp" >/dev/null 2>&1
  echo "file '$(absolute_path "$fwd_temp")'" >> "$c_list"
  echo "file '$(absolute_path "$rev_temp")'" >> "$c_list"
  rm -rf "$fwd_dir" "$rev_dir"
  if ! ffmpeg -y -avoid_negative_ts make_zero -f concat -safe 0 -i "$c_list" -c copy "$output" >/dev/null 2>&1; then
    echo "❌ Looperang: Concat failed."
    exit 1
  fi
  if ! moovCheck "$output"; then
    verbose_log "looperang: Moov atom missing; invoking fallback."
    moov_fallback "$input" "$output"
  fi
  if ! moovCheck "$output"; then
    echo "❌ Looperang: Moov atom still missing in $output"
    exit 1
  fi
  auto_clean "$output"
  echo "✔️ Looperang ➡️ $output"
}

## Slowmo: Lossless PTS manipulation with optional interpolation and high-quality motion interpolation prompt.
cmd_slowmo() {
  advanced_prompt
  local input="${1:-}"
  shift || true
  local output="${1:-}"
  if [ -n "$output" ]; then
    shift
  fi
  local factor="${1:-3}"
  local target_fps="${2:-60}"
  if [ -z "$input" ] || [ ! -f "$input" ]; then
    echo "❌ Slowmo: Input file required." >&2
    exit 1
  fi
  if [ -z "$output" ]; then
    local b
    b="$(basename "$input")"
    local bare="${b%.*}"
    output="$(get_default_filename "$bare" "slowmo" "mp4")"
  fi
  #### Prompt for high-quality motion interpolation
  local interpolate_choice
  read -r -p "Enable high-quality motion interpolation? (y/N): " interpolate_choice
  interpolate_choice="$(echo "$interpolate_choice" | tr '[:upper:]' '[:lower:]')"
  local slowmo_filter
  if [ "$interpolate_choice" = "y" ] || [ "$interpolate_choice" = "yes" ]; then
    #### Apply setpts and high quality frame interpolation via minterpolate.
    slowmo_filter="setpts=${factor}*PTS,minterpolate=fps=${target_fps}:mi_mode=mci:mc_mode=aobmc:vsbmc=1"
  else
    slowmo_filter="setpts=${factor}*PTS"
  fi
  local audio_opts_arr
  read -r -a audio_opts_arr <<< "$(get_audio_opts)"
  local fps_cmd=()
  if [ -n "$target_fps" ]; then
    fps_cmd=(-r "$target_fps")
  fi
  if [ "$ADV_MULTIPASS" = "true" ]; then
    if ! run_ffmpeg -y -i "$input" "${fps_cmd[@]}" -filter:v "$slowmo_filter" -c:v "$ADV_CODEC" -b:v "$ADV_BR" -preset medium -pass 1 -an -f mp4 /dev/null >/dev/null 2>&1; then
      echo "❌ Slowmo (pass 1) failed." >&2
      exit 1
    fi
    if ! run_ffmpeg -y -i "$input" "${fps_cmd[@]}" -filter:v "$slowmo_filter" -c:v "$ADV_CODEC" -b:v "$ADV_BR" -preset medium -pass 2 "${audio_opts_arr[@]}" -movflags +faststart "$output" >/dev/null 2>&1; then
      echo "❌ Slowmo (pass 2) failed." >&2
      exit 1
    fi
  else
    if ! run_ffmpeg -y -i "$input" "${fps_cmd[@]}" -filter:v "$slowmo_filter" -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium "${audio_opts_arr[@]}" "$output" >/dev/null 2>&1; then
      echo "❌ Slowmo failed." >&2
      exit 1
    fi
  fi
  if ! moovCheck "$output"; then
    verbose_log "slowmo: Moov atom missing; invoking fallback."
    moov_fallback "$input" "$output"
  fi
  if ! moovCheck "$output"; then
    echo "❌ Slowmo: Moov atom missing in $output" >&2
    exit 1
  fi
  auto_clean "$output"
  echo "✔️ Slow motion ➡️ $output"
}

## Fix: Correct monotonic DTS and incorrect timestamp issues.
cmd_fix() {
  advanced_prompt
  local input="${1:-}"
  local output="${2:-}"
  if [ -z "$output" ]; then
    if command_exists fzf; then
      echo "➡️ Fix: No input provided. Launching fzf..."
      input="$(fzf)"
      if [ -z "$input" ]; then
        echo "❌ No file selected."
        exit 1
      fi
    else
      echo "❌ Fix requires <input> <output>."
      exit 1
    fi
  fi
  #### Ensure DTS are correct
  input="$(ensure_dts_correct "$input")" || exit 1
  if [ "$BULK_MODE" = true ]; then
    echo "➡️ Bulk fix: (f) for files or (d) for directory?"
    local c
    read -r c
    if [ "$c" = "f" ]; then
      if ! command_exists fzf; then
        echo "❌ fzf not installed."
        exit 1
      fi
      local fl
      fl="$(fzf --multi)"
      if [ -z "$fl" ]; then
        echo "❌ No files selected."
        exit 1
      fi
      local tmpd
      tmpd="$(mktemp -d)"
      while IFS= read -r i; do
        cp "$i" "$tmpd/"
      done <<< "$fl"
      for f in "$tmpd"/*; do
        local bn
        bn="$(basename "$f")"
        local out
        out="$(get_default_filename "${bn%.*}" "fix" "mp4")"
        echo "➡️ Fixing $f ➡️ $out"
        local audio_opts_arr
        read -r -a audio_opts_arr <<< "$(get_audio_opts)"
        if ! run_ffmpeg -y -fflags +genpts -i "$f" -c:v copy "${audio_opts_arr[@]}" -movflags +faststart "$out" >/dev/null 2>&1; then
          if ! run_ffmpeg -y -fflags +genpts -i "$f" -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset veryfast "${audio_opts_arr[@]}" "$out" >/dev/null 2>&1; then
            echo "❌ Fix failed for $f" >&2
          fi
        fi
        auto_clean "$out"
      done
      rm -rf "$tmpd"
      echo "➡️ Bulk fix complete."
      return
    elif [ "$c" = "d" ]; then
      echo "➡️ Enter directory path for fix:"
      local dir_path
      read -r dir_path
      if [ ! -d "$dir_path" ]; then
        echo "❌ Invalid directory."
        exit 1
      fi
      for f in "$dir_path"/*; do
        if [ -f "$f" ]; then
          local bn
          bn="$(basename "$f")"
          local out
          out="$(get_default_filename "${bn%.*}" "fix" "mp4")"
          echo "➡️ Fixing $f ➡️ $out"
          local audio_opts_arr
          read -r -a audio_opts_arr <<< "$(get_audio_opts)"
          if ! run_ffmpeg -y -fflags +genpts -i "$f" -c:v copy "${audio_opts_arr[@]}" -movflags +faststart "$out" >/dev/null 2>&1; then
            if ! run_ffmpeg -y -fflags +genpts -i "$f" -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset veryfast "${audio_opts_arr[@]}" "$out" >/dev/null 2>&1; then
              echo "❌ Fix failed for $f" >&2
            fi
          fi
          auto_clean "$out"
        fi
      done
      echo "➡️ Bulk fix complete."
      return
    fi
  fi
  if [ ! -f "$input" ]; then
    echo "❌ Fix: File not found: $input"
    exit 1
  fi
  if [ -z "$output" ]; then
    local base
    base="$(basename "$input")"
    output="$(get_default_filename "${base%.*}" "fix" "mp4")"
  fi
  local audio_opts_arr
  read -r -a audio_opts_arr <<< "$(get_audio_opts)"
  if ! run_ffmpeg -y -fflags +genpts -i "$input" -c:v copy "${audio_opts_arr[@]}" -movflags +faststart "$output" >/dev/null 2>&1; then
    if ! run_ffmpeg -y -fflags +genpts -i "$input" -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset veryfast "${audio_opts_arr[@]}" "$output" >/dev/null 2>&1; then
      echo "❌ Fix failed for $input" >&2
    fi
  fi
  auto_clean "$output"
  echo "✔️ Fixed ➡️ $output"
}

## Clip: (Interactive Cut)

cmd_timeline() {
  advanced_prompt
  local input="${1:-}"
  local output="${2:-}"
  if [ -z "$input" ]; then
    if command_exists fzf; then
      echo "➡️ No input for clip. Launching fzf..."
      input="$(fzf)"
      if [ -z "$input" ]; then
        echo "❌ No file selected."
        exit 1
      fi
    else
      echo "❌ 'clip' requires <input> [output]."
      exit 1
    fi
  fi
  if [ ! -f "$input" ]; then
    echo "❌ File not found: $input"
    exit 1
  fi
  if [ -z "$output" ]; then
    local b
    b="$(basename "$input")"
    local bare="${b%.*}"
    output="$(get_default_filename "$bare" "cut" "mp4")"
  fi
  local dur
  dur="$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$input" 2>/dev/null || echo 0)"
  echo "➡️ Duration: $dur seconds"
  local st
  local et
  read -r -p "Enter start time (s): " st
  read -r -p "Enter end time (s): " et
  if [ -z "$st" ] || [ -z "$et" ] || [ "$st" -ge "$et" ] 2>/dev/null; then
    echo "❌ Invalid start/end times."
    exit 1
  fi
  local audio_opts_arr
  read -r -a audio_opts_arr <<< "$(get_audio_opts)"
  if ! run_ffmpeg -y -i "$input" -ss "$st" -to "$et" "${audio_opts_arr[@]}" -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium "$output" >/dev/null 2>&1; then
    echo "❌ Clip creation failed."
    exit 1
  fi
  auto_clean "$output"
  echo "✔️ Clip created ➡️ $output"
}

## Metadata: Standalone call to clean metadata from file

cmd_cleanmeta() {
  advanced_prompt
  local input="${1:-}"
  local output="${2:-}"
  if [ -z "$input" ] || [ -z "$output" ]; then
    if [ "$#" -eq 1 ]; then
      output="$1"
      if command_exists fzf; then
        echo "➡️ No input provided. Launching fzf for clean..."
        input="$(fzf)"
        if [ -z "$input" ]; then
          echo "❌ No file selected."
          exit 1
        fi
      else
        echo "❌ 'clean' requires <input> <output>."
        exit 1
      fi
    else
      echo "❌ 'clean' requires <input> <output>."
      exit 1
    fi
  fi
  if [ "$BULK_MODE" = true ]; then
    echo "➡️ Bulk clean: (f)iles or (d)irectory?"
    local c
    read -r c
    if [ "$c" = "f" ]; then
      if ! command_exists fzf; then
        echo "❌ fzf not installed."
        exit 1
      fi
      echo "Using fzf multi-select for clean..."
      local file_list
      file_list="$(fzf --multi)"
      if [ -z "$file_list" ]; then
        echo "❌ No files selected."
        exit 1
      fi
      local tmpd
      tmpd="$(mktemp -d)"
      while IFS= read -r f; do
        cp "$f" "$tmpd/"
      done <<< "$file_list"
      for f in "$tmpd"/*; do
        local bn
        bn="$(basename "$f")"
        local out
        out="$(get_default_filename "${bn%.*}" "cleanmeta" "mp4")"
        echo "➡️ Cleaning metadata for $f ➡️ $out"
        local audio_opts_arr
        read -r -a audio_opts_arr <<< "$(get_audio_opts)"
        if ! run_ffmpeg -y -i "$f" -map_metadata -1 -c:v copy "${audio_opts_arr[@]}" -movflags +faststart "$out" >/dev/null 2>&1; then
          run_ffmpeg -y -i "$f" -map_metadata -1 -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium "${audio_opts_arr[@]}" "$out" >/dev/null 2>&1
        fi
      done
      rm -rf "$tmpd"
      echo "➡️ Bulk clean complete."
      return
    elif [ "$c" = "d" ]; then
      echo "➡️ Enter directory path for clean:"
      local dir_path
      read -r dir_path
      if [ ! -d "$dir_path" ]; then
        echo "❌ Invalid directory."
        exit 1
      fi
      for f in "$dir_path"/*; do
        if [ -f "$f" ]; then
          local bn
          bn="$(basename "$f")"
          local out
          out="$(get_default_filename "${bn%.*}" "cleanmeta" "mp4")"
          local audio_opts_arr
          read -r -a audio_opts_arr <<< "$(get_audio_opts)"
          run_ffmpeg -y -i "$f" -map_metadata -1 -c:v copy "${audio_opts_arr[@]}" -movflags +faststart "$out" >/dev/null 2>&1
          if [ $? -ne 0 ]; then
            run_ffmpeg -y -i "$f" -map_metadata -1 -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium "${audio_opts_arr[@]}" "$out" >/dev/null 2>&1
          fi
        fi
      done
      echo "➡️ Bulk clean complete."
      return
    else
      echo "❌ Invalid selection."
      exit 1
    fi
  fi
  if [ ! -f "$input" ]; then
    echo "❌ File not found: $input"
    exit 1
  fi
  local audio_opts_arr
  read -r -a audio_opts_arr <<< "$(get_audio_opts)"
  if ! run_ffmpeg -y -i "$input" -map_metadata -1 -c:v copy "${audio_opts_arr[@]}" -movflags +faststart "$output" >/dev/null 2>&1; then
    run_ffmpeg -y -i "$input" -map_metadata -1 -c:v "$ADV_CODEC" -crf "$ADV_CRF" -preset medium "${audio_opts_arr[@]}" "$output" >/dev/null 2>&1
  fi
  echo "✔️ Metadata cleaned ➡️ $output"
}

## Main Entry Point

main() {
  #### If no arguments are provided, display usage.
  if [ $# -lt 1 ]; then
    show_usage
  fi
  #### Collect non-global arguments.
  local -a non_global=()
  local arg
  for arg in "$@"; do
    case "$arg" in
      --advanced|-A| -v|--verbose| -b| -an| -d| -C|--composite| -P|--max1080)
        ;;
      *)
        non_global+=("$arg")
        ;;
    esac
  done
  #### Global flags
  local a
  for a in "$@"; do
    case "$a" in
      --advanced|-A)
        ADVANCED_MODE=true
        ;;
      -v|--verbose)
        VERBOSE_MODE=true
        ;;
      -b)
        BULK_MODE=true
        ;;
      -an)
        REMOVE_AUDIO=true
        ;;
      -d)
        DEBUG_MODE=true
        ;;
      -C|--composite)
        COMPOSITE_MODE=true
        ;;
      -P|--max1080)
        MAX_1080=true
        ;;
    esac
  done
  if [ ${#non_global[@]} -lt 1 ]; then
    show_usage
  fi
  local subcmd="${non_global[0]}"
  local -a sub_args=("${non_global[@]:1}")
  case "$subcmd" in
    help)
      show_usage
      ;;
    probe)
      cmd_probe "${sub_args[0]:-}"
      ;;
    process)
      cmd_process "${sub_args[@]}"
      ;;
    merge)
      cmd_merge "${sub_args[@]}"
      ;;
    looperang)
      cmd_looperang "${sub_args[@]}"
      ;;
    slowmo)
      cmd_slowmo "${sub_args[@]}"
      ;;
    fix)
      cmd_fix "${sub_args[@]}"
      ;;
    clip)
      cmd_timeline "${sub_args[@]}"
      ;;
    clean)
      cmd_cleanmeta "${sub_args[@]}"
      ;;
    *)
      echo "❌ Unrecognized subcommand: $subcmd"
      show_usage
      exit 1
      ;;
  esac
}

main "$@"
